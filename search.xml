<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于博客被恶意攻击的说明</title>
    <url>/top/</url>
    <content><![CDATA[<div class="note danger no-icon"><blockquote>
<p>今天是<strong>九一八纪念日</strong>，先缅怀致敬为抗战牺牲的先烈们，人民英雄永垂不朽！</p>
</blockquote>
<img style="height: 300px" alt="918" data-src="/images/loading.gif" data-original="/top/0.jpg">

<ul>
<li><code>2023 年 9 月 15 日晚上 8 点左右，我的博客遭受了恶意攻击。</code></li>
<li>攻击次数超过 300 万次，刷掉服务商流量共 7 TB。</li>
<li>晚上 10 点左右，我立即联系了服务商并停用了所有服务。</li>
<li>2023 年 9 月 16 日上午 11 点，我报警并展开调查。</li>
<li>在此期间，服务商累计消耗并产生总费用约 1500 元人民币。</li>
<li>虽然钱不多，服务商也表示可能会豁免我这部分费用，但我始终无法理解攻击者的心理，站长并没有在网络上恶意攻击或得罪过他人，无论攻击者是为了练手还是故意捣乱，我将坚决追究到底。</li>
<li>希望你没有留下任何破绽最好，我已经对相关信息与类似案例进行了收集查询。</li>
<li>之前有人以同样的手法刷掉某站站长 9000 元人民币，后面由于留下了家庭宽带的破绽，该人被服务商与警方联合调查并被公诉，最终判处 3-7 年。</li>
<li>我无法理解这种行为，如果你主动认错并联系我解释你的动机，我会酌情考虑对此事的处理，在此也警告你立即停止，否则后果自负。</li>
<li>人生弥足珍贵，经历是一种财富，损人不利己，伤敌一千自损八百的事情别再做了。</li>
<li>好好学习提升自己吧，遵纪守法，努力成长，广阔天地君子大有所为，何必行小人之道！</li>
<li>及时收手，回头是岸吧，少年。</li>
</ul>
<img style="height: 200px" data-src="/images/loading.gif" data-original="/top/6.JPG">

<img style="height: 300px" data-src="/images/loading.gif" data-original="/top/5.JPG">
</div>
<span id="more"></span>

<p><img data-src="/images/loading.gif" data-original="/top/1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/top/2.JPG"></p>
<p><img data-src="/images/loading.gif" data-original="/top/3.JPG"></p>
<p><img data-src="/images/loading.gif" data-original="/top/4.PNG"></p>
<p><img data-src="/images/loading.gif" data-original="/top/5.JPG"></p>
<p><img data-src="/images/loading.gif" data-original="/top/6.JPG"></p>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>说明</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录</title>
    <url>/morethinks/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请稍后再试！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="eb8e34189c6e465f8d71fe834ff4c19772c14819aec91c72e216756595415929"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">点击此处输入密码～</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm 开源项目列表</title>
    <url>/open_source_npm/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>开发这么久以来的一些开源小项目列表记录 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL35kb3VibGVhbQ==">Npm<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span> 

<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><table>
<thead>
<tr>
<th align="center"><strong>项目</strong></th>
<th><strong>介绍</strong></th>
<th align="center"><strong>地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>js-xxx</code></td>
<td>JavaScript 常用纯函数库，支持按需引入，方便抽离工具类等常用方法。<br>前端三叉戟(^O^)!!!</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteHh4">js-xxx<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>js-xhttp</code></td>
<td>基于 Axios 二次封装的 HTTP 请求工具，高效统一，且易于全局管理。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteGh0dHA=">js-xhttp<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>js-xcall</code></td>
<td>一个简单的事件派发单例类(EventBus)</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteGNhbGw=">js-xcall<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>js-xcmd</code></td>
<td>基于 Node 实现的简单 npm 命令行工具，便于管理项目。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteGNtZA==">js-xcmd<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>js-xfetch</code></td>
<td>Fetch 的二次封装，便捷好用。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteGZldGNo">js-xfetch<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>js-xajax</code></td>
<td>封装 XMLHttpRequest(xhr)，方便需要使用原生 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hamF4Lzg0MjU=">ajax<i class="fa fa-external-link-alt"></i></span> 的项目使用。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteGFqYXg=">js-xajax<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开源</category>
      </categories>
      <tags>
        <tag>开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 开源项目列表</title>
    <url>/open_source_github/</url>
    <content><![CDATA[<div class="note info no-icon"><p>开发这么久以来的一些开源小项目列表记录 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2g=">GitHub<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span> 

<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><table>
<thead>
<tr>
<th align="center"><strong>项目</strong></th>
<th><strong>介绍</strong></th>
<th align="center"><strong>地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>vue-admin</code></td>
<td>基于 Vue 的管理系统通用模板(可自由扩展与跨平台)<br><strong>Vue3、AntdV、Vite、TypeScript、EsLint+Prettier…</strong></td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvdnVlLWFkbWlu">vue-admin<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>react-view</code></td>
<td>基于 React 的跨平台通用模板(移动/PC/Web)<br><strong>React17、Antd、Echarts、Vite、TypeScript、EsLint+Prettier、Cordova、Electron…</strong></td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvcmVhY3Qtdmlldw==">react-view<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>react_micro_web</code></td>
<td>伪微前端模板(适用于开发大型/复杂项目但又人数较少的情况)<br><strong>React、Redux_Toolkit、Antd、Vite、TypeScript、EsLint+Prettier+Husky、Electron…</strong></td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvcmVhY3RfbWljcm9fd2Vi">react_micro_web<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>flutter_base</code>-rc</td>
<td>Flutter 开发通用模板，包含基础框架页面、全局统一数据管理、请求管理、常用插件集成、UI组件集成等。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9iYXNl">flutter_base<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>flutter_dio_xhttp</code></td>
<td>Flutter 基于 Dio 的 HTTP 请求工具二次封装，全局管理请求，简单便捷且高效。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9kaW9feGh0dHA=">flutter_dio_xhttp<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>flutter_dart_xcall</code></td>
<td>Dart 实现的一个事件派发单例类(EventBus)</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9kYXJ0X3hjYWxs">flutter_dart_xcall<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>dart_xxx_utils</code></td>
<td>Dart 常用工具方法等单例类(Utils 三叉戟)</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZGFydF94eHhfdXRpbHM=">dart_xxx_utils<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>chatroom</code></td>
<td>PHP+WebSocket+Vue 实现的一个聊天室</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvY2hhdHJvb20=">chatroom<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>h5games</code></td>
<td>网上搜集的几个好玩的 H5 游戏，稍微整理了一下，供大家学习参考<a href="https://a.biugle.cn/games">娱乐(演示)</a>。<br>由于资源太过久远，未找到原作者，若了解源头可以联系博主修正。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvaDVnYW1lcw==">h5games<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center"><code>tapmusic</code></td>
<td>资源站上撸到的一个<a href="https://a.biugle.cn/tap">解压神器</a>，当做博客小彩蛋，原作者好像是一个二次元大佬，本人未找到。</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvdGFwbXVzaWM=">tapmusic<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开源</category>
      </categories>
      <tags>
        <tag>开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>前端团队文档</title>
    <url>/share_web_docs/</url>
    <content><![CDATA[<div class="note primary no-icon"><p><span class="exturl" data-url="aHR0cHM6Ly93ZWItZG9jcy5iaXVnbGUuY24v">文档地址<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JpdWdsZS93ZWItZG9jcw==">GitHub<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span>

<h2 id="前端团队文档"><a href="#前端团队文档" class="headerlink" title="前端团队文档"></a>前端团队文档</h2><blockquote>
<p>文档，是一个团队的基础建设！</p>
</blockquote>
<ul>
<li>帮助大家快速熟悉、融入团队。</li>
<li>将技术知识固化分享，共同进步。</li>
<li>增强对知识的提炼总结能力，温故而知新。</li>
<li>提升成员间的协作与效率，避免非必要的重复。</li>
<li>作为团队的沉淀与财富，进行知识传递，防止断档。</li>
<li>…</li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>开源项目</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一个前端文档生成模板</title>
    <url>/share_bio/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>前端文档生成模板 <strong>Bio Docsify</strong> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvYmlvLWRvY3NpZnk=">GitHub<i class="fa fa-external-link-alt"></i></span>/<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vYmlvLWRvY3NpZnk=">Gitee<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span>

<h2 id="介绍-Introduction"><a href="#介绍-Introduction" class="headerlink" title="介绍 Introduction"></a>介绍 Introduction</h2><blockquote>
<p>基于 Docsify 的前端文档生成模板</p>
</blockquote>
<h2 id="功能-Feature"><a href="#功能-Feature" class="headerlink" title="功能 Feature"></a>功能 Feature</h2><ul>
<li>支持 <code>themeable</code></li>
<li>支持暗黑/简约主题模式切换</li>
<li>支持本地搜索</li>
<li>支持回到顶部</li>
<li>支持 <code>Markdown</code> 扩展语法</li>
<li>支持分页、代码块一键复制、图片缩放</li>
<li>支持 <code>flexible-alerts</code></li>
<li>支持在线编辑、外链跳转</li>
</ul>
<h2 id="预览-Preview"><a href="#预览-Preview" class="headerlink" title="预览 Preview"></a>预览 Preview</h2><blockquote>
<p><span class="exturl" data-url="aHR0cDovL2Jpby5iaXVnbGUuY24v">Demo Preview<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h3><ul>
<li><code>/source/</code> 此目录为静态文档根目录，一般只需编辑此目录内容即可，其他均为预设主题代码。</li>
</ul>
<h3 id="Light"><a href="#Light" class="headerlink" title="Light"></a>Light</h3><p><img data-src="/images/loading.gif" data-original="/share_bio/light.png"></p>
<p><img data-src="/images/loading.gif" data-original="/share_bio/light.pre.png"></p>
<h3 id="Dark"><a href="#Dark" class="headerlink" title="Dark"></a>Dark</h3><p><img data-src="/images/loading.gif" data-original="/share_bio/dark.png"></p>
<p><img data-src="/images/loading.gif" data-original="/share_bio/dark.pre.png"></p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>开源项目</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>前端通用项目资源分享</title>
    <url>/share_projects/</url>
    <content><![CDATA[<div class="note default no-icon"><p>长期更新 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JpdWdsZS93ZWItcHJvamVjdHM=">GitHub<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span>

<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamF2YXNjcmlwdC5mdW4v">前端工坊<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueGljb25zLm9yZy8jL3poLUNO">各图标库查询 XIcons<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hhcmVpY29uLm5ldC8=">ShareIcon<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tLw==">jsdelivr<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudW5wa2cuY29tLw==">unpkg<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v">MDN<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS8=">Processon 在线绘图<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9leGNhbGlkcmF3LmNvbS8=">Excalidraw 在线手绘图<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0Lw==">在线工具<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251eXNvZnQvTW9jaw==">MockJS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vhc3ktbW9jay9lYXN5LW1vY2s=">EasyMock<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vhc3ktbW9jay9lYXN5LW1vY2s=">JSON Server<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="开发模板"><a href="#开发模板" class="headerlink" title="开发模板"></a>开发模板</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvcmVhY3Qtdmlldw==">基于 React+Vite 的毛坯房<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvdnVlLWFkbWlu">基于 Vue3 的管理端<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvcmVhY3RfbWljcm9fd2Vi">基于 React+Electron+Vite 的前端大型模块化项目模板<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvYmlvLWRvY3NpZnk=">基于 Docsify 的前端文档工具 Bio<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9iYXNl">Flutter 开发模板<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGNhbGw=">XCall 简单的事件派发器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteHh4">前端通用函数工具库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGh0dHA=">XHttp 基于 Axios 封装的请求库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGFqYXg=">XAjax 原生 Ajax 封装<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGZldGNo">XFetch 原生 Fetch 封装<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGNtZA==">XCmd 前端通用命令行工具-包含打包、下载、文件处理等<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaXgvY3J5cHRvLWpz">Crypto 加密解密<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9kaW9feGh0dHA=">Flutter 请求库 Dio<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9kYXJ0X3hjYWxs">Flutter 事件派发<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p1YW5qb0RpYXovanNvbjJjc3Y=">json2csv<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpbmRlbGwvSnNCYXJjb2Rl">JsBarcode<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rhdmlkc2hpbWpzL3FyY29kZWpz">qrcodejs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHlwZWRvYw==">typedoc<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHlwZWRvYy1wbHVnaW4tbWFya2Rvd24=">typedoc-plugin-markdown<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNkb2M=">jsdoc<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNkb2MtdG8tbWFya2Rvd24=">jsdoc-to-markdown<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhY2hpbmNob29sdXIvbGlnaHRnYWxsZXJ5">lightgallery 灯箱<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzZ0YWlsL2x1bmFyLWphdmFzY3JpcHQ=">Lunar 农历计算<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rhd2VpbHYvdHJlZWpz">Tree.js<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbnltY2UvdGlueW1jZQ==">富文本编辑器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25obi90dWkuZWRpdG9y">Markdown 编辑器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhby9lZGl0b3IubWQ=">JQ Md 编辑器<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="开发资源"><a href="#开发资源" class="headerlink" title="开发资源"></a>开发资源</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvemgvZG9jcy9sYXRlc3Qv">Electron<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tb21lbnRqcy5jb20v">Moment.js<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLmJvb3Rjc3MuY29tLw==">React<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2NuLnJlZHV4LmpzLm9yZy9yZWR1eC10b29sa2l0L292ZXJ2aWV3Lw==">Redux Toolkit<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvb3ZlcnZpZXctY24v">Ant Design<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9jb21wb25lbnRzLmFudC5kZXNpZ24vY29tcG9uZW50cy8=">Ant Design ProComponents<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbnRkdi5jb20vY29tcG9uZW50cy9vdmVydmlldy1jbi8=">Ant Design Vue<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04vY29tcG9uZW50L2luc3RhbGxhdGlvbg==">ElementUI<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92Mi5jbi52dWVqcy5vcmcv">Vue 2<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvZ3VpZGUvaW50cm9kdWN0aW9uLmh0bWw=">Vue 3<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92aXRlanMuY24vZ3VpZGUv">Vite<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS8=">WebPack<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9sbHVwanMuY29tLw==">RollUp<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://a.biugle.cn/sass_scss_less/">Scss/Less</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvZGVyYWlzZXIvY2xvdWRjbWQ=">CloudCmd 文件管理/编辑 Web 端<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvY2l0eQ==">全国省/市/县(区)数据+全世界国家数据<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmxlYW5jbG91ZC5jbi8=">LeanCloud<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvd3VqaWU=">无界-腾讯微前端<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>开源项目</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>随机图片与一言 API 的前端小脚本简单实现</title>
    <url>/rand_words_imgs/</url>
    <content><![CDATA[<div class="note success no-icon"><p>之前分享过一次 <strong>PHP</strong> 版本的<a href="https://a.biugle.cn/github_share/">随机图片与一言</a>，最近我想给博客保留这个功能又不想再买服务器了，所以纯前端写了一个随机取值来简单实现，虽然有点小憨，但是简单好用就行哈哈。</p>
</div>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>首先我想到的是在本地用数组存储数据，然后设置定时器来随机读取数据并更新到页面，但是这种方式的弊端就是每次更新数据都要重新部署博客。</li>
<li>受之前使用 <code>iframe</code> 处理跨域的启发，我想到可以改用 <code>iframe</code> 嵌入一个页面，在此页面中使用 <code>window.parent.postMessage(&#39;data&#39;, &#39;*&#39;)</code> 来向父页面推送数据，这样我们每次只需要更新此页面的文件即可，再把此页面挂到 <code>cos 桶或其他对象存储</code> 上即可方便且高效复刻原有的随机图片与一言功能。</li>
<li>话不多说直接上代码</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="嵌入页面"><a href="#嵌入页面" class="headerlink" title="嵌入页面"></a>嵌入页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博客 API<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">AVATARS</span> = [</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/avatar.jpg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/xixi.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/jienigui.jpg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/yunnan.jpg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/baoerjie.jpg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/ruikeandmodi.jpg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/images/biugle.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;avatar&#x27;</span>, <span class="attr">value</span>: <span class="variable constant_">AVATARS</span>[<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>()] &#125;, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">WORDS</span> = [</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;人闲桂花落，夜静春山空。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;不如意事常八九，可与言者无二三。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;人间有味是清欢&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;君不见高堂明镜悲白发，朝如青丝暮成雪。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;南朝四百八十寺，多少楼台烟雨中。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;玲珑骰子安红豆，入骨相思知不知。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;枯藤老树昏鸦，小桥流水人家，古道西风瘦马。夕阳西下，断肠人在天涯。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;苟利国家生死以，岂因祸福避趋之。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;人生自古谁无死，留取丹心照汗青。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;我自横刀向天笑，去留肝胆两昆仑。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          ...</span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">type</span>: <span class="string">&#x27;word&#x27;</span>, <span class="attr">value</span>: <span class="built_in">escape</span>(<span class="variable constant_">WORDS</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable constant_">WORDS</span>.<span class="property">length</span>)]) &#125;, <span class="comment">// 中文使用 escape 编码防止乱码</span></span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">type</span>: <span class="string">&#x27;word&#x27;</span>, <span class="attr">value</span>: <span class="built_in">escape</span>(<span class="variable constant_">WORDS</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable constant_">WORDS</span>.<span class="property">length</span>)]) &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">10000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">type</span>: <span class="string">&#x27;image&#x27;</span>, <span class="attr">value</span>: <span class="string">`/img/cdn/dev/avatar/<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">50</span>) + <span class="number">1</span>&#125;</span>.png`</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">type</span>: <span class="string">&#x27;image&#x27;</span>, <span class="attr">value</span>: <span class="string">`/img/cdn/dev/avatar/<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">50</span>) + <span class="number">1</span>&#125;</span>.png`</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">30000</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="父页面监听处理"><a href="#父页面监听处理" class="headerlink" title="父页面监听处理"></a>父页面监听处理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="built_in">unescape</span>(e.<span class="property">data</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">switch</span> (e.<span class="property">data</span>.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;word&#x27;</span>:</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;avatar&#x27;</span>:</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>小玩意分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 模拟本地接口测试环境以及简单的代理转发服务</title>
    <url>/node_server_test/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>为方便测试小哥调试，用 Node.js 模拟了一些简单的接口测试业务场景。</p>
</div>
<span id="more"></span>

<h2 id="Koa-简单模拟服务器"><a href="#Koa-简单模拟服务器" class="headerlink" title="Koa 简单模拟服务器"></a>Koa 简单模拟服务器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">KoaBodyParser</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">KoaRouter</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">KoaRouter</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">KoaBodyParser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; path, method &#125; = ctx;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; ctx &#125;);</span><br><span class="line">  <span class="comment">// ctx.set(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span></span><br><span class="line">  <span class="comment">// ctx.set(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;);</span></span><br><span class="line">  <span class="keyword">let</span> status = <span class="title class_">Number</span>(path?.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>] ?? <span class="number">200</span>) || <span class="number">400</span>;</span><br><span class="line">  ctx.<span class="property">status</span> = status;</span><br><span class="line">  ctx.<span class="property">body</span> = &#123;</span><br><span class="line">    path,</span><br><span class="line">    <span class="attr">url</span>: ctx.<span class="property">request</span>.<span class="property">url</span>,</span><br><span class="line">    status,</span><br><span class="line">    method,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">body</span>: ctx.<span class="property">request</span>.<span class="property">body</span>,</span><br><span class="line">      <span class="attr">query</span>: ctx.<span class="property">request</span>.<span class="property">query</span>,</span><br><span class="line">      <span class="attr">querystring</span>: ctx.<span class="property">request</span>.<span class="property">querystring</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;method&#125;</span>[<span class="subst">$&#123;path&#125;</span>](请求完成-<span class="subst">$&#123;status&#125;</span>)`</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const cors = require(&#x27;koa-cors&#x27;);</span></span><br><span class="line"><span class="comment">// app.use(cors());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// router.post(&#x27;/post&#x27;, async (ctx, next) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   const &#123; path, method &#125; = ctx;</span></span><br><span class="line"><span class="comment">//   let data = &#123;</span></span><br><span class="line"><span class="comment">//     body: ctx.request.body,</span></span><br><span class="line"><span class="comment">//     query: ctx.request.query,</span></span><br><span class="line"><span class="comment">//     querystring: ctx.request.querystring</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">//   ctx.body = &#123;</span></span><br><span class="line"><span class="comment">//     status: 200,</span></span><br><span class="line"><span class="comment">//     path,</span></span><br><span class="line"><span class="comment">//     method,</span></span><br><span class="line"><span class="comment">//     data,</span></span><br><span class="line"><span class="comment">//     msg: &#x27;POST test&#x27;</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">//   await next();</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// router.get(&#x27;/hello/:name&#x27;, async (ctx, next) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   let name = ctx.params.name;</span></span><br><span class="line"><span class="comment">//   const &#123; path, method &#125; = ctx;</span></span><br><span class="line"><span class="comment">//   let data = &#123;</span></span><br><span class="line"><span class="comment">//     body: ctx.request.body,</span></span><br><span class="line"><span class="comment">//     query: ctx.request.query,</span></span><br><span class="line"><span class="comment">//     querystring: ctx.request.querystring</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">//   ctx.body = &#123;</span></span><br><span class="line"><span class="comment">//     status: 200,</span></span><br><span class="line"><span class="comment">//     path,</span></span><br><span class="line"><span class="comment">//     method,</span></span><br><span class="line"><span class="comment">//     data,</span></span><br><span class="line"><span class="comment">//     msg: `get $&#123;name&#125;`</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">//   await next();</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// app.use(router.routes());</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server error&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">666</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app started at port 666...&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Express-简单模拟服务器"><a href="#Express-简单模拟服务器" class="headerlink" title="Express 简单模拟服务器"></a>Express 简单模拟服务器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, req.<span class="property">headers</span>.<span class="property">origin</span> || <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST, OPTIONS, PUT, PATCH, DELETE&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/post/:name&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">path</span>: req.<span class="property">path</span>,</span><br><span class="line">    <span class="attr">url</span>: req.<span class="property">url</span>,</span><br><span class="line">    <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">body</span>: req.<span class="property">body</span>,</span><br><span class="line">      <span class="attr">query</span>: req.<span class="property">query</span>,</span><br><span class="line">      <span class="attr">querystring</span>: req.<span class="property">originalUrl</span>.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">      <span class="attr">params</span>: req.<span class="property">params</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;POST test&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">888</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> host = server.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">  <span class="keyword">let</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server：http://localhost:%s&#x27;</span>, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Koa-Request-代理转发请求"><a href="#Koa-Request-代理转发请求" class="headerlink" title="Koa+Request 代理转发请求"></a>Koa+Request 代理转发请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">KoaRouter</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;koa-cors&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">KoaRouter</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">request</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:666/hello/world?q=123&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">json</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = response.<span class="property">statusCode</span>;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------ERROR----------------&#x27;</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">          ctx.<span class="property">body</span> = error;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title function_">next</span>());</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------ERROR----------------&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------SUCCESS----------------&#x27;</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">          ctx.<span class="property">body</span> = body;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title function_">next</span>());</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------SUCCESS----------------&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server error&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">10010</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;proxy started at port 10010...&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Express-Request-代理转发请求"><a href="#Express-Request-代理转发请求" class="headerlink" title="Express+Request 代理转发请求"></a>Express+Request 代理转发请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, req.<span class="property">headers</span>.<span class="property">origin</span> || <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST, OPTIONS, PUT, PATCH, DELETE&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">request</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://localhost:666/hello/world?q=123&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------ERROR----------------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        res.<span class="title function_">status</span>(response.<span class="property">statusCode</span>).<span class="title function_">send</span>(error);</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------ERROR----------------&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------SUCCESS----------------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">        res.<span class="title function_">status</span>(response.<span class="property">statusCode</span>).<span class="title function_">send</span>(body);</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------SUCCESS----------------&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">10086</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;proxy started at port 10086...&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>一般垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>跨域</tag>
        <tag>Node.js</tag>
        <tag>接口测试</tag>
        <tag>Mock</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用 Node.js 来辅助进行 CI/CD 的一些想法</title>
    <url>/node_devops/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>&emsp;&emsp;由于使用到的 CI/CD 工具可能会更换，对应的学习成本也相应增加，但是 Node.js 其实可以帮助我们实现这些工具的大部分功能，包括操作文件、执行 cmd 等等。<br>&emsp;&emsp;所以我们如果把大部分的打包或集成操作使用 Node.js 去实现，那么无论工具如何更换，我们只需学习如何使用该工具执行 npm 即可，从而大大降低迁移与学习成本。<br>&emsp;&emsp;当然这只是我最近迁移时的一些解决方案与想法，如果有大佬指教一些其他的方式，那自然是更好啦哈哈哈～</p>
</div>
<span id="more"></span>

<h2 id="Flutter-根据安卓版本打包-Demo"><a href="#Flutter-根据安卓版本打包-Demo" class="headerlink" title="Flutter 根据安卓版本打包 Demo"></a>Flutter 根据安卓版本打包 Demo</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nodeCmd = <span class="built_in">require</span>(<span class="string">&#x27;node-cmd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable language_">arguments</span> = process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>); <span class="comment">// 获取命令行传入参数</span></span><br><span class="line"><span class="keyword">let</span> targetBranch = <span class="variable language_">arguments</span>[<span class="number">0</span>] || <span class="number">11</span>; <span class="comment">// 需要打包的对应安卓版本</span></span><br><span class="line"><span class="keyword">let</span> shouldBuild = <span class="variable language_">arguments</span>[<span class="number">1</span>] == <span class="literal">undefined</span> ? <span class="literal">true</span> : <span class="variable language_">arguments</span>[<span class="number">1</span>] == <span class="string">&#x27;true&#x27;</span>; <span class="comment">// 是否需要打包</span></span><br><span class="line"><span class="keyword">let</span> menusStation = <span class="variable language_">arguments</span>[<span class="number">2</span>] == <span class="literal">undefined</span> ? <span class="string">&#x27;changzhou&#x27;</span> : <span class="variable language_">arguments</span>[<span class="number">2</span>]; <span class="comment">// 菜单地址</span></span><br><span class="line"><span class="keyword">let</span> filePath = <span class="variable language_">arguments</span>[<span class="number">3</span>] || <span class="string">&#x27;./pubspec.yaml&#x27;</span>; <span class="comment">// pubspec 配置文件位置</span></span><br><span class="line"><span class="keyword">let</span> buildFilePath = <span class="variable language_">arguments</span>[<span class="number">4</span>] || <span class="string">&#x27;./android/app/build.gradle&#x27;</span>; <span class="comment">// build.gradle 配置文件位置</span></span><br><span class="line"><span class="keyword">let</span> menusConfigPath = <span class="variable language_">arguments</span>[<span class="number">5</span>] || <span class="string">&#x27;./lib/configuration/menus.dart&#x27;</span>; <span class="comment">// menus.dart 配置文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(&#123; <span class="variable language_">arguments</span>, targetBranch, shouldBuild, filePath, buildFilePath &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 读取对应的安卓目录配置文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(buildFilePath, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = data.<span class="title function_">replace</span>(<span class="regexp">/minSdkVersion\s\d&#123;2&#125;/g</span>, <span class="string">`minSdkVersion <span class="subst">$&#123;targetBranch == <span class="number">11</span> ? <span class="number">26</span> : <span class="number">21</span>&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在修改安卓 build 配置文件......&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(buildFilePath, result, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setMenus</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 设置对应版本的菜单</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setMenus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(menusConfigPath, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = data.<span class="title function_">replace</span>(</span><br><span class="line">      <span class="regexp">/static\sList\smenuList\s=\sX_MENU_\w+\;/g</span>,</span><br><span class="line">      <span class="string">`static List menuList = X_MENU_<span class="subst">$&#123;menusStation&#125;</span>;`</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`正在修改菜单 build 配置文件 [X_MENU_<span class="subst">$&#123;menusStation&#125;</span>]......`</span>);</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(menusConfigPath, result, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">buildStart</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 开始打包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = data.<span class="title function_">replace</span>(<span class="regexp">/_android_\d&#123;1,2&#125;_scan/g</span>, <span class="string">`_android_<span class="subst">$&#123;targetBranch&#125;</span>_scan`</span>); <span class="comment">// 修改对呀安卓版本的 SDK 插件版本</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在修改 Flutter 配置文件......&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(filePath, result, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">getFlutterPackages</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 获取 flutter 相关插件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFlutterPackages</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行下载命令 flutter pub get&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  nodeCmd.<span class="title function_">run</span>(<span class="string">&#x27;flutter pub get&#x27;</span>, <span class="function">(<span class="params">err, data, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    shouldBuild &amp;&amp; <span class="title function_">buildFlutterApk</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 打包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildFlutterApk</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打包中... flutter build apk --target-platform android-arm64&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  nodeCmd.<span class="title function_">run</span>(<span class="string">&#x27;flutter build apk --target-platform android-arm64&#x27;</span>, <span class="function">(<span class="params">err, data, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c<span class="subst">$&#123;data&#125;</span> %c成功，请检查 apk 文件！`</span>, <span class="string">&#x27;color:green;&#x27;</span>, <span class="string">&#x27;color:chocolate;&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样的话，我们只需要每次切换 CI/CD 工具时，学会使用 node 执行这个脚本即可。</span></span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>以上脚本既可以用于本地打包，也可以设置在推送时自动运行。</li>
<li>另外如果我们还要集成到服务端的不同目录，也可以使用 Node.js 去实现文件复制或者移动。</li>
<li>如果需要在 <code>commit</code> 或者 <code>push</code> 前进行一些操作，我们还可以使用 <code>package.json-scripts</code> 定义一些钩子来实现。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">prepublish<span class="punctuation">:</span> 在包发布之前运行，也会在 npm install 安装到本地时运行。</span><br><span class="line">publish<span class="punctuation">,</span>postpublish<span class="punctuation">:</span> 包被发布之后运行</span><br><span class="line">preinstall<span class="punctuation">:</span> 包被安装前运行</span><br><span class="line">install<span class="punctuation">,</span>postinstall<span class="punctuation">:</span> 包被安装后运行</span><br><span class="line">preuninstall<span class="punctuation">,</span>uninstall<span class="punctuation">:</span> 包被卸载前运行</span><br><span class="line">postuninstall<span class="punctuation">:</span> 包被卸载后运行</span><br><span class="line">preversion<span class="punctuation">:</span> bump 包版本前运行</span><br><span class="line">postversion<span class="punctuation">:</span> bump 包版本后运行</span><br><span class="line">pretest<span class="punctuation">,</span>test<span class="punctuation">,</span>posttest<span class="punctuation">:</span> 通过 npm test 命令运行</span><br><span class="line">prestop<span class="punctuation">,</span>stop<span class="punctuation">,</span>poststop<span class="punctuation">:</span> 通过 npm stop 命令运行</span><br><span class="line">prestart<span class="punctuation">,</span>start<span class="punctuation">,</span>poststart<span class="punctuation">:</span> 通过 npm start 命令运行</span><br><span class="line">prerestart<span class="punctuation">,</span>restart<span class="punctuation">,</span>postrestart<span class="punctuation">:</span> 通过 npm restart 运行</span><br></pre></td></tr></table></figure>

<h2 id="需要复制指定目录提交到某个仓库的-Demo"><a href="#需要复制指定目录提交到某个仓库的-Demo" class="headerlink" title="需要复制指定目录提交到某个仓库的 Demo"></a>需要复制指定目录提交到某个仓库的 Demo</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> isLocalPublish = process.<span class="property">argv</span>[<span class="number">2</span>] === <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> targetDir = process.<span class="property">argv</span>[<span class="number">3</span>] ?? <span class="string">&#x27;./test&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;package.json&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> nodeCmd = <span class="built_in">require</span>(<span class="string">&#x27;node-cmd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// git clone url[请设置带 token 的地址，或者先设置 SSH。]</span></span><br><span class="line"><span class="comment">// 将对外目录 git 仓库拉取到本地</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断目录是否存在，不存在则创建目录。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isDirExist</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// fs.access(path, function (err) &#123;</span></span><br><span class="line">  <span class="comment">//   if (err) &#123;</span></span><br><span class="line">  <span class="comment">//     // 目录不存在时创建目录</span></span><br><span class="line">  <span class="comment">//     fs.mkdirSync(path);</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(path)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 复制目录、子目录，及其中的文件。</span></span><br><span class="line"><span class="comment"> * @param src &#123;String&#125; 要复制的目录</span></span><br><span class="line"><span class="comment"> * @param target &#123;String&#125; 复制到目标目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">copyDir</span> = (<span class="params">err, src, target</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="string">&#x27;copyDir error&#x27;</span>: err &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fs.<span class="title function_">readdir</span>(src, <span class="keyword">function</span> (<span class="params">err, paths</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="string">&#x27;copyDir error&#x27;</span>: err &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    paths.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> _src = src + <span class="string">&#x27;/&#x27;</span> + path;</span><br><span class="line">      <span class="keyword">let</span> _target = target + <span class="string">&#x27;/&#x27;</span> + path;</span><br><span class="line">      fs.<span class="title function_">stat</span>(_src, <span class="keyword">function</span> (<span class="params">err, stat</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="string">&#x27;copyDir error&#x27;</span>: err &#125;);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        <span class="keyword">if</span> (stat.<span class="title function_">isFile</span>()) &#123;</span><br><span class="line">          fs.<span class="title function_">writeFileSync</span>(_target, fs.<span class="title function_">readFileSync</span>(_src));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">          <span class="comment">// 当是目录是，递归复制。</span></span><br><span class="line">          <span class="title function_">isDirExist</span>(_target);</span><br><span class="line">          <span class="title function_">copyDir</span>(<span class="literal">null</span>, _src, _target);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">src</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">copyFile</span> = (<span class="params">src, target</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(target, fs.<span class="title function_">readFileSync</span>(src));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="string">&#x27;copyFile error&#x27;</span>: e &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fs.<span class="title function_">createReadStream</span>(src).<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(target)); <span class="comment">// 大文件复制</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="string">&#x27;copyBigFile error&#x27;</span>: err &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取发布的所有对外文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">targetDir</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSubmitFiles</span> = (<span class="params">targetDir</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">isDirExist</span>(targetDir);</span><br><span class="line"></span><br><span class="line">  [<span class="string">&#x27;dir1&#x27;</span>, <span class="string">&#x27;dir2&#x27;</span>, <span class="string">&#x27;dir3&#x27;</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">srcDir</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> copyTargetDir = <span class="string">`<span class="subst">$&#123;targetDir&#125;</span>/<span class="subst">$&#123;srcDir&#125;</span>`</span>;</span><br><span class="line">    <span class="title function_">isDirExist</span>(copyTargetDir);</span><br><span class="line">    <span class="title function_">copyDir</span>(<span class="literal">null</span>, srcDir, copyTargetDir);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  [<span class="string">&#x27;package.json&#x27;</span>, <span class="string">&#x27;README.md&#x27;</span>, <span class="string">&#x27;README.en.md&#x27;</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">    <span class="title function_">copyFile</span>(file, <span class="string">`<span class="subst">$&#123;targetDir&#125;</span>/<span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">publishPackage</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">publishPackage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dateObj = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> versionNo = <span class="string">`<span class="subst">$&#123;dateObj.getMilliseconds()&#125;</span><span class="subst">$&#123;dateObj.getSeconds()&#125;</span><span class="subst">$&#123;dateObj.getMinutes()&#125;</span><span class="subst">$&#123;dateObj.getHours()&#125;</span><span class="subst">$&#123;dateObj.getDate()&#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    dateObj.getMonth() + <span class="number">1</span></span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span><span class="subst">$&#123;dateObj.getFullYear()&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> versionId = <span class="string">`(<span class="subst">$&#123;pkg.version&#125;</span>) <span class="subst">$&#123;versionNo&#125;</span>`</span>;</span><br><span class="line">  </span><br><span class="line">  nodeCmd.<span class="title function_">run</span>(</span><br><span class="line">    <span class="string">`cd <span class="subst">$&#123;targetDir&#125;</span> &amp;&amp; git checkout main &amp;&amp; git config --global user.name &quot;doubleam&quot; &amp;&amp; git config --global user.email &quot;admin@biugle.cn&quot; &amp;&amp; git status &amp;&amp; git add -A . &amp;&amp; git commit -m &quot;Auto publish, Version <span class="subst">$&#123;versionId&#125;</span>.&quot; &amp;&amp; git push origin main -f`</span>,</span><br><span class="line">    <span class="function">(<span class="params">err, data, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c 提交出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isLocalPublish) &#123;</span><br><span class="line">        <span class="comment">// 需要有 .npmrc 文件，才可自动登录并执行 npm publish。或者设置 CI/CD 专用 token。 https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow</span></span><br><span class="line">        nodeCmd.<span class="title function_">run</span>(<span class="string">&#x27;npm publish&#x27;</span>, <span class="function">(<span class="params">err, data, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c 发布版本出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">          nodeCmd.<span class="title function_">run</span>(<span class="string">`cd ../ &amp;&amp; rimraf <span class="subst">$&#123;targetDir&#125;</span>`</span>, <span class="function">(<span class="params">err, data, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c 删除文档出错啦！<span class="subst">$&#123;data&#125;</span>`</span>, <span class="string">&#x27;color:red;&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getSubmitFiles</span>(targetDir);</span><br></pre></td></tr></table></figure>

<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul>
<li>适用于我们部分源码不方便公开的情况，我们可以设置一个目录来暴露生产包，但是保留源码的私有性。</li>
<li>为了简化命令参数，我们可以预先写好放到 <code>package.json-scripts</code> 中去，方便直接使用 <code>npm run xxx</code> 执行。</li>
<li>以上内容仅供参考 (0.0)</li>
</ul>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>CI/CD</tag>
        <tag>Node.js</tag>
        <tag>DevOps</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart、JavaScript 的一些代码啊啊啊啊啊～</title>
    <url>/code_shots/</url>
    <content><![CDATA[<div class="note success no-icon"><p>投石击水，不起浪花，也泛涟漪。</p>
</div>
<span id="more"></span>

<h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><h3 id="Call-事件派发与监听"><a href="#Call-事件派发与监听" class="headerlink" title="Call 事件派发与监听"></a>Call 事件派发与监听</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span> </span>&#123;</span><br><span class="line">  Call._internal() &#123;</span><br><span class="line">    <span class="comment">// 构建单例，也可直接将 _callBackMap 变为静态成员，代码简洁，但是暴露了 _callBackMap。</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Call _instance = Call._internal();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">Function</span>&gt;&gt; _callBackMap = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">Function</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> hasCallBack(<span class="built_in">String</span> eventKey, <span class="built_in">Function</span> callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_instance._callBackMap[eventKey] == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance._callBackMap[eventKey].contains(callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> addCallBack(<span class="built_in">String</span> eventKey, <span class="built_in">Function</span> callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_instance._callBackMap[eventKey] == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _instance._callBackMap[eventKey] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hasCallBack(eventKey, callback)) &#123;</span><br><span class="line">      _instance._callBackMap[eventKey].add(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> removeCallBack(<span class="built_in">String</span> eventKey, <span class="built_in">Function</span> callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_instance._callBackMap[eventKey] == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _instance._callBackMap[eventKey].removeWhere((callBackFunc) =&gt; callBackFunc == callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> dispatch(<span class="built_in">String</span> eventKey, &#123;<span class="keyword">var</span> data&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_instance._callBackMap[eventKey] == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> Exception(<span class="string">&#x27;未找到回调事件 <span class="subst">$eventKey</span> 的监听&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _instance._callBackMap[eventKey].forEach((callBackFunc) &#123;</span><br><span class="line">      callBackFunc?.call(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  Call.addCallBack(<span class="string">&#x27;test&#x27;</span>, (data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test1<span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> test = (data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test2<span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  Call.addCallBack(<span class="string">&#x27;test&#x27;</span>, test);</span><br><span class="line">  Call.dispatch(<span class="string">&#x27;test&#x27;</span>, data: <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hasCallBack-test<span class="subst">$&#123;Call.hasCallBack(<span class="string">&#x27;test&#x27;</span>, test)&#125;</span>&#x27;</span>);</span><br><span class="line">  Call.removeCallBack(<span class="string">&#x27;test&#x27;</span>, test);</span><br><span class="line">  Call.dispatch(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">  Call.dispatch(<span class="string">&#x27;test-not&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span> debounce(</span><br><span class="line">  <span class="built_in">Function</span> func, [</span><br><span class="line">  <span class="built_in">int</span> delay = <span class="number">2000</span>,</span><br><span class="line">]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (func == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> () &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;func is null&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  Timer timer;</span><br><span class="line">  <span class="built_in">Function</span> target = () &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer?.isActive ?? <span class="keyword">false</span>) &#123;</span><br><span class="line">      timer?.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    timer = Timer(<span class="built_in">Duration</span>(milliseconds: delay), () &#123;</span><br><span class="line">      func?.call();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello, World0!&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> test = debounce(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, World1!&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>));</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>));</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello, World2!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后一次才有效，7s多打印一次 Hello, World1!。</span></span><br></pre></td></tr></table></figure>

<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span> throttle(</span><br><span class="line">  <span class="built_in">Function</span> func, [</span><br><span class="line">  <span class="built_in">int</span> delay = <span class="number">2000</span>,</span><br><span class="line">]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (func == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> () &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;func is null&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">bool</span> enable = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">Function</span> target = () <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (enable == <span class="keyword">true</span>) &#123;</span><br><span class="line">      enable = <span class="keyword">false</span>;</span><br><span class="line">      func?.call();</span><br><span class="line">      <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: delay));</span><br><span class="line">      enable = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello, World0!&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> test = throttle(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, World1!&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>));</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>));</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello, World2!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一次才有效，严格意义立即打印一次 Hello, World1!。</span></span><br></pre></td></tr></table></figure>

<h3 id="http-dao"><a href="#http-dao" class="headerlink" title="http-dao"></a>http-dao</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future fetch() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> getUrl = <span class="string">&#x27;http://localhost:888&#x27;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; header = &#123;<span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;authorization&#x27;</span>: <span class="string">&#x27;Bearer test&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">var</span> response;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    response = <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(getUrl), headers: header);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// ERROR</span></span><br><span class="line">  &#125;</span><br><span class="line">  Utf8Decoder utf8decoder = Utf8Decoder();</span><br><span class="line">  <span class="keyword">var</span> result = json.decode(utf8decoder.convert(response.bodyBytes));</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode == <span class="number">200</span> || result[<span class="string">&#x27;code&#x27;</span>] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Success</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Failed</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> base64StrEncode(<span class="built_in">String</span> sourceStr) &#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; bytes = utf8.encode(sourceStr);</span><br><span class="line">  <span class="built_in">String</span> encodeStr = base64Encode(bytes);</span><br><span class="line">  <span class="keyword">return</span> encodeStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> base64StrDecode(<span class="built_in">String</span> encodedStr) &#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; bytes = base64Decode(encodedStr);</span><br><span class="line">  <span class="comment">// String decodeStr = String.fromCharCodes(bytes);</span></span><br><span class="line">  <span class="built_in">String</span> decodeStr = utf8.decode(bytes);</span><br><span class="line">  <span class="keyword">return</span> decodeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="Call-事件派发与监听-1"><a href="#Call-事件派发与监听-1" class="headerlink" title="Call 事件派发与监听"></a>Call 事件派发与监听</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Call</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Call</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125; <span class="comment">// 不能初始化</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取 Call 单例</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(): <span class="title class_">Call</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Call</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_callBackMap</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">Function</span>[] &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">hasCallBack</span>(<span class="attr">eventKey</span>: <span class="built_in">string</span>, <span class="attr">callBack</span>: <span class="title class_">Function</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]?.<span class="title function_">includes</span>(callBack) ?? <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">addCallBack</span>(<span class="attr">eventKey</span>: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="title class_">Function</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]) &#123;</span><br><span class="line">      <span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Call</span>.<span class="title function_">hasCallBack</span>(eventKey, callback)) &#123;</span><br><span class="line">      <span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]?.<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">removeCallBack</span>(<span class="attr">eventKey</span>: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="title class_">Function</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey] = <span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]?.<span class="title function_">filter</span>(<span class="function">(<span class="params">callBackFunc</span>) =&gt;</span> callBackFunc != callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">dispatch</span>(<span class="params"><span class="attr">eventKey</span>: <span class="built_in">string</span>, ...<span class="attr">args</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`未找到回调事件 <span class="subst">$&#123;eventKey&#125;</span> 的监听`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Call</span>.<span class="title function_">getInstance</span>().<span class="property">_callBackMap</span>[eventKey].<span class="title function_">forEach</span>(<span class="function">(<span class="params">callBackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">      callBackFunc?.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">addCallBack</span>(<span class="string">&#x27;test&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test1&#x27;</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> (<span class="params">data1, data2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test2&#x27;</span>, data1, data2);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">addCallBack</span>(<span class="string">&#x27;test&#x27;</span>, test);</span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;test&#x27;</span>, <span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&#x27;hasCallBack-test&#x27;</span>,</span><br><span class="line">  <span class="title class_">Call</span>.<span class="title function_">hasCallBack</span>(<span class="string">&#x27;test&#x27;</span>, test),</span><br><span class="line">  <span class="title class_">Call</span>.<span class="title function_">hasCallBack</span>(<span class="string">&#x27;test&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">);</span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">removeCallBack</span>(<span class="string">&#x27;test&#x27;</span>, test);</span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;test-not&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="防抖-1"><a href="#防抖-1" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">2000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World0!&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> test = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World1!&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World2!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">testFunc</span>();</span><br><span class="line"><span class="comment">// 最后一次才有效，7s多打印一次 Hello, World1!。</span></span><br></pre></td></tr></table></figure>

<h3 id="节流-1"><a href="#节流-1" class="headerlink" title="节流"></a>节流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">2000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World0!&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> test = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World1!&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World2!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">testFunc</span>();</span><br><span class="line"><span class="comment">// 第一次才有效，严格意义立即打印一次 Hello, World1!。</span></span><br></pre></td></tr></table></figure>

<h3 id="fetch-ajax-axios-XHR"><a href="#fetch-ajax-axios-XHR" class="headerlink" title="fetch/ajax/axios/XHR"></a>fetch/ajax/axios/XHR</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ----- Ajax ----- */</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr, status, error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">get</span>(url, data, callback); <span class="comment">// querystring</span></span><br><span class="line">$.<span class="title function_">post</span>(url, data, callback); <span class="comment">// x-www-form-urlencoded</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----- Fetch ----- */</span></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;a=1&amp;b=2&amp;c[]=a&amp;c[]=b&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">100</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----- Axios ----- */</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;a=1&amp;b=2&amp;c[]=a&amp;c[]=b&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>));</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url, data).<span class="title function_">then</span>(callback);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----- XHR-XMLHttpRequestAjax ----- */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">XMLHttpRequestAjax</span>(<span class="params">method, url, callback, data, flag</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr;</span><br><span class="line">  flag = flag || <span class="literal">true</span>;</span><br><span class="line">  method = method.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHttp&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">      timer = date.<span class="title function_">getTime</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url + <span class="string">&#x27;?&#x27;</span> + data + <span class="string">&#x27;&amp;timer&#x27;</span> + timer, flag);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, flag);</span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Base64-1"><a href="#Base64-1" class="headerlink" title="Base64"></a>Base64</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">base64Encode</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">base64Decode</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他垃圾</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>JavaScript</tag>
        <tag>Dart</tag>
        <tag>Call</tag>
        <tag>EventBus</tag>
        <tag>单例</tag>
        <tag>防抖/节流</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>分享 - 逍遥游</title>
    <url>/xiaoyaoyou/</url>
    <content><![CDATA[<div class="note primary"><p>得空重温《逍遥游》，相较于上学时阅读，此番又多了几分味道…</p>
</div>
<span id="more"></span>

<h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><blockquote>
<p>庄子，姓庄，名周，战国时期宋国蒙人。战国中期道家学派代表人物，思想家、哲学家、文学家，庄学的创立者，与老子并称“老庄”。最早提出的“内圣外王”思想对儒家影响深远。洞悉易理，指出“《易》以道阴阳”，其“三籁”思想与《易经》三才之道相合。其文想象力极为丰富，语言运用自如，灵活多变，能把微妙难言的哲理说得引人入胜。代表作品为《庄子》，其中名篇有《逍遥游》《齐物论》《养生主》等。其作品被称为“文学的哲学，哲学的文学”。据传庄子尝隐居南华山，卒葬南华山，故唐玄宗天宝初，被诏封为南华真人，其书《庄子》被奉为《南华真经》。</p>
</blockquote>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>&emsp;&emsp;北冥有鱼，其名为鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏。鹏之背，不知其几千里也；怒而飞，其翼若垂天之云。是鸟也，海运则将徙于南冥。南冥者，天池也。《齐谐》者，志怪者也。《谐》之言曰：“鹏之徙于南冥也，水击三千里，抟扶摇而上者九万里，去以六月息者也。”野马也，尘埃也，生物之以息相吹也。天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。<strong>且夫水之积也不厚，则其负大舟也无力。</strong>覆杯水于坳堂之上，则芥为之舟；置杯焉则胶，水浅而舟大也。<strong>风之积也不厚，则其负大翼也无力。</strong>故九万里，则风斯在下矣，而后乃今培风；背负青天，而莫之夭阏者，而后乃今将图南。蜩与学鸠笑之曰：“我决起而飞，抢榆枋而止，时则不至，而控于地而已矣，奚以之九万里而南为？”<strong>适莽苍者，三餐而反，腹犹果然；适百里者，宿舂粮；适千里者，三月聚粮。</strong>之二虫又何知！小知不及大知，小年不及大年。奚以知其然也？朝菌不知晦朔，蟪蛄不知春秋，此小年也。楚之南有冥灵者，以五百岁为春，五百岁为秋；上古有大椿者，以八千岁为春，八千岁为秋。此大年也。而彭祖乃今以久特闻，众人匹之，不亦悲乎？</p>
<p>&emsp;&emsp;汤之问棘也是已：“穷发之北，有冥海者，天池也。有鱼焉，其广数千里，未有知其修者，其名为鲲。有鸟焉，其名为鹏，背若泰山，翼若垂天之云；抟扶摇羊角而上者九万里，绝云气，负青天，然后图南，且适南冥也。斥鷃笑之曰：‘彼且奚适也？我腾跃而上，不过数仞而下，翱翔蓬蒿之间，此亦飞之至也。而彼且奚适也？’”此小大之辩也。</p>
<p>&emsp;&emsp;故夫知效一官、行比一乡、德合一君、而征一国者，<strong>其自视也，亦若此矣。</strong>而宋荣子犹然笑之。<strong>且举世誉之而不加劝，举世非之而不加沮，定乎内外之分，辩乎荣辱之境，斯已矣。</strong>彼其于世，未数数然也。虽然，犹有未树也。夫列子御风而行，泠然善也，旬有五日而后反。彼于致福者，未数数然也。此虽免乎行，犹有所待者也。若夫乘天地之正，而御六气之辩，以游无穷者，彼且恶乎待哉？故曰：<strong>至人无己，神人无功，圣人无名</strong>。</p>
<p>&emsp;&emsp;尧让天下于许由，曰：“日月出矣，而爝火不息；其于光也，不亦难乎？时雨降矣，而犹浸灌；其于泽也，不亦劳乎？夫子立而天下治，而我犹尸之；吾自视缺然，请致天下。”许由曰：“子治天下，天下既已治也；而我犹代子，吾将为名乎？名者，实之宾也；吾将为宾乎？鹪鹩巢于深林，不过一枝；偃鼠饮河，不过满腹。归休乎君，予无所用天下为！庖人虽不治庖，尸祝不越樽俎而代之矣！”</p>
<p>&emsp;&emsp;肩吾问于连叔曰：“吾闻言于接舆，大而无当，往而不反。吾惊怖其言。犹河汉而无极也；大有径庭，不近人情焉。”连叔曰：“其言谓何哉？”曰：“藐姑射之山，有神人居焉。肌肤若冰雪，淖约若处子，不食五谷，吸风饮露，乘云气，御飞龙，而游乎四海之外；其神凝，使物不疵疠而年谷熟。吾以是狂而不信也。”连叔曰：“然。瞽者无以与乎文章之观，聋者无以与乎钟鼓之声。岂唯形骸有聋盲哉？夫知亦有之！是其言也犹时女也。之人也，之德也，将旁礴万物以为一，世蕲乎乱，孰弊弊焉以天下为事！之人也，物莫之伤：大浸稽天而不溺，大旱金石流，土山焦而不热。是其尘垢秕糠将犹陶铸尧舜者也，孰肯以物为事？”宋人资章甫而适诸越，越人断发文身，无所用之。尧治天下之民，平海内之政，往见四子藐姑射之山，汾水之阳，窅然丧其天下焉。</p>
<p>&emsp;&emsp;惠子谓庄子曰：“魏王贻我大瓠之种，我树之成，而实五石。以盛水浆，其坚不能自举也。剖之以为瓢，则瓠落无所容。非不呺然大也，吾为其无用而掊之。”庄子曰：“夫子固拙于用大矣。宋人有善为不龟手之药者，世世以洴澼絖为事。客闻之，请买其方百金。聚族而谋曰：‘我世世为洴澼絖，不过数金，今一朝而鬻技百金，请与之。’客得之，以说吴王。越有难，吴王使之将，冬，与越人水战，大败越人。裂地而封之。能不龟手一也，或以封，或不免于洴澼絖，则所用之异也。今子有五石之瓠，何不虑以为大樽，而浮于江湖，而忧其瓠落无所容？则夫子犹有蓬之心也夫！”</p>
<p>&emsp;&emsp;惠子谓庄子曰：“吾有大树，人谓之樗。其大本拥肿而不中绳墨，其小枝卷曲而不中规矩，立之涂，匠者不顾。今子之言大而无用，众所同去也。”庄子曰：“子独不见狸狌乎？卑身而伏，以候敖者；东西跳梁，不辟高下；中于机辟，死于罔罟。今夫斄牛，其大若垂天之云。此能为大矣，而不能执鼠。今子有大树，患其无用，何不树之于无何有之乡，广莫之野，彷徨乎无为其侧，逍遥乎寝卧其下。不夭斤斧，物无害者，无所可用，安所困苦哉！”</p>
<h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>&emsp;&emsp;北方的大海里有一条鱼，它的名字叫鲲。鲲的体积，不知道大到有几千里。变化成为鸟，它的名字就叫做鹏。鹏的脊背，真不知道长到有几千里；当它奋起而飞的时候，那展开的翅膀就好像天边的云。这只鹏鸟，大风吹动海水的时候就要迁徙到南方的大海去了。南方的大海是一个天然的大池子。《齐谐》是一部专门记载怪异事情的书。这本书上记载：“鹏往南方的大海迁徙的时候，翅膀拍打水面，能激起三千里的浪涛，环绕着旋风飞上了九万里的高空，乘着六月的风离开了北海。”山野中的雾气，飘飘扬扬的尘埃，都是活动着的生物的气息相互吹拂所致。天空苍苍茫茫的，难道就是它本来的颜色吗？它的辽阔高远也是没有尽头的吗？鹏往下看的时候，看见的应该也是这个样子。如果聚集的水不深，那么它就没有负载一艘大船的力量了。在堂前低洼的地方倒上一杯水，一棵小草就能被当作是一艘船，放一个杯子在上面就会被粘住，这是水浅而船却大的原因。如果聚集的风不够强大的话，那么负载一个巨大的翅膀也就没有力量了。因此，鹏在九万里的高空飞行，风就在它的身下了，凭借着风力，背负着青天毫无阻挡，然后才开始朝南飞。蝉和小斑鸠讥笑鹏说：“我们奋力而飞，碰到榆树和檀树就停止，有时飞不上去，落在地上就是了。何必要飞九万里到南海去呢？”要去近郊的人，吃饱饭往返，回来时肚子仍是饱的；到百里外的人，要用一整夜时间舂米准备干粮；到千里外的人，要聚积三个月的粮食。蝉和小斑鸠这两只小虫、鸟又知道什么呢。小智比不上大智，短命比不上长寿。怎么知道是这样的呢？早晨出生的菌类不到黑夜就死去，因而不知黑夜与黎明；寒蝉春生夏死或夏生秋死，因而不知春天与秋天。楚国的南方有一种大树叫做灵龟，它把五百年当作一个春季，五百年当作一个秋季。上古时代有一种树叫做大椿，它把八千年当作一个春季，八千年当作一个秋季，这就是长寿。可是彭祖到如今还是以年寿长久而闻名于世，人们与他攀比，岂不可悲可叹！</p>
<p>&emsp;&emsp;商汤问棘的话也是这样的：“在草木不生的极远的北方，有个很深的大海，那就是天池。里面有条鱼，它的身子有几千里宽，没有人知道它有多长，它的名字叫做鲲。有一只鸟，它的名字叫做鹏。鹏的背像泰山，翅膀像天边的云；借着旋风盘旋而上九万里，超越云层，背负青天，然后向南飞翔，将要飞到南海去。小泽里的麻雀讥笑鹏说：‘它要飞到哪里去呢？我一跳就飞起来，不过数丈高就落下来，在蓬蒿丛中盘旋，这也是极好的飞行了。而它还要飞到哪里去呢？’”这就是小和大的不同了。</p>
<p>&emsp;&emsp;所以，那些才智能胜任一官的职守，行为能够庇护一乡百姓的，德行能投合一个君王的心意的，能力能够取得全国信任的，他们看待自己，也像上面说的那只小鸟一样。而宋荣子对这种人加以嘲笑。宋荣子这个人，世上所有的人都称赞他，他并不因此就特别奋勉，世上所有的人都诽谤他，他也并不因此就感到沮丧。他认定了对自己和对外物的分寸，分辨清楚荣辱的界限，就觉得不过如此罢了。他对待人世间的一切，都没有拼命去追求。即使如此，他还是有未达到的境界。列子乘风而行，飘然自得，驾轻就熟。十五天以后返回；他对于求福的事，没有拼命去追求。这样虽然免了步行，还是有所凭借的。倘若顺应天地万物的本性，驾驭着六气的变化，遨游于无穷的境地，他还要凭借什么呢？所以说：修养最高的人能任顺自然、忘掉自己，修养达到神化不测境界的人无意于求功，有道德学问的圣人无意于求名。</p>
<p>&emsp;&emsp;尧要把天下让给许由，说：“太阳月亮出来了，而小火把还不熄灭，它的亮度，要和日月相比不是太难了吗！及时雨降下了，还要灌溉田地，对于滋润禾苗，不是徒劳吗！你如果成了君王，天下一定大治，而我还徒居其位，我自己感到惭愧极了，请允许我把天下交给你。”许由说：“你治理天下，天下已经治理好了，而我再接替你，我岂不是为名而来吗？名，是依附于实的客体，我难道要做有名无实的客体吗？鹪鹩在深林中筑巢，只要一根树枝；鼹鼠饮河水，只要肚子喝饱。请你回去吧，天下对于我没有什么用！厨子虽然不下厨，主祭的人却不应该超越权限而代行厨子的职事。”</p>
<p>&emsp;&emsp;肩吾向连叔求教：“我从接舆那里听到谈话，大话连篇没有边际，一说下去就回不到原来的话题上。我十分惊恐他的言谈，就好像天上的银河没有边际，跟一般人的言谈差异甚远，确实是太不近情理了。”连叔问：“他说的是些什么呢？”肩吾转述道：“‘在遥远的姑射山上，住着一位神人，皮肤润白像冰雪，体态柔美如处女，不食五谷，吸清风饮甘露，乘云气驾飞龙，遨游于四海之外。他的神情那么专注，使得世间万物不受病害，年年五谷丰登。’我认为这全是虚妄之言，一点也不可信。”连叔听后说：“是呀！对于瞎子没法同他们欣赏花纹和色彩，对于聋子没法同他们聆听钟鼓的乐声。难道只是形骸上有聋与瞎吗？思想上也有聋和瞎啊！这话似乎就是说你肩吾的呀。那位神人，他的德行，与万事万物混同一起，以此求得整个天下的治理，谁还会忙忙碌碌把管理天下当成回事！那样的人哪，外物没有什么能伤害他，滔天的大水不能淹没他，天下大旱使金石熔化、土山焦裂，他也不感到灼热。他所留下的尘埃以及瘪谷糠麸之类的废物，也可造就出尧舜那样的圣贤仁君来，他怎么会把忙着管理万物当作己任呢！北方的宋国有人贩卖帽子到南方的越国，越国人不蓄头发满身刺着花纹，没什么地方用得着帽子。尧治理好天下的百姓，安定了海内的政局，到姑射山上、汾水北面，去拜见四位得道的高士，不禁怅然若失，忘记了自己居于治理天下的地位。”</p>
<p>&emsp;&emsp;惠子对庄子说：“魏王送给我大葫芦的种子，我种下后结出的葫芦大得可以容纳五石。用它来盛水，它却因质地太脆无法提举。切开它当瓠，又大而平浅无法容纳东西。我不是嫌它不大，只是因为它无用，我把它砸了。”庄子说：“你真不善于使用大的物件。宋国有个人善于制作防止手冻裂的药，他家世世代代都以漂洗丝絮为职业。有个客人听说了，请求用一百金来买他的药方。这个宋国人召集全家商量说：‘我家世世代代靠这种药从事漂洗丝絮，一年所得不过数金；现在一旦卖掉这个药方马上可得百金，请大家答应我卖掉它。’这个客人买到药方，就去游说吴王。那时正逢越国入侵吴国，吴王就命他为将，在冬天跟越国人展开水战，大败越人，吴王就割地封侯来奖赏他。同样是一帖防止手冻裂的药方，有人靠它得到封赏，有人却只会用于漂洗丝絮，这是因为使用方法不同啊。现在你有可容五石东西的大葫芦，为什么不把它系在身上作为腰舟而浮游于江湖呢？却担忧它大而无处可容纳，可见你的心地过于浅陋狭隘了！”</p>
<p>&emsp;&emsp;惠子对庄子说：“我有一棵大树，人家把它叫做臭椿；它那树干上有许多赘瘤，不合绳墨，它那枝权弯弯曲曲，不合规矩。它长在路边，木匠都不看它一眼。现在你说的那段话，大而没有用，大家都不相信。”庄子说：“你难道没见过野猫和黄鼠狼吗？屈身伏在那里，等待捕捉来来往往的小动物；它捉小动物时东跳西跃，不避高下；但是一踏中捕兽的机关陷阱，就死在网中。再看那牦牛，它大如天边的云；这可以说够大的了，但是却不能捕鼠。现在你有一棵大树，担忧它没有用处，为什么不把它种在虚无之乡，广阔无边的原野，随意地徘徊在它的旁边，逍遥自在地躺在它的下面；这样大树就不会遭到斧头的砍伐，也没有什么东西会伤害它。它没有什么用处，又哪里会有什么困苦呢？”</p>
<h2 id="内容来源"><a href="#内容来源" class="headerlink" title="内容来源"></a>内容来源</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zby5ndXNoaXdlbi5jbi9zaGl3ZW52XzViZmVjYmU2MDYyMC5hc3B4">古诗文网 - 逍遥游<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>逍遥游</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-Dart基于 Dio 的 HTTP 请求工具类</title>
    <url>/xhttp_dart/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>Flutter 基于 Dio 封装的一个 HTTP 请求工具类(XHttp)，使用单例方便全局请求管理与使用。<br>包括请求拦截、响应拦截、错误拦截、请求 Hooks、日志输出、取消请求、取消重复请求、设置白名单、权限管控、基础请求等等功能。</p>
</div>
<span id="more"></span>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>话不多说，直接上代码，欢迎大佬指导。（此处工具类我全部写在一起哦，当然也可以自己手动分开。）</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ignore_for_file: unnecessary_this</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_easyloading/flutter_easyloading.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">全局网络请求 dio 实例 单例 XHttp</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XHttp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> PATCH = <span class="string">&quot;PATCH&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> CUSTOM_ERROR_CODE = <span class="string">&#x27;DIO_CUSTOM_ERROR&#x27;</span>; <span class="comment">// 自定义错误代码</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> REQUEST_TYPE_STR = <span class="string">&#x27;REQUEST&#x27;</span>; <span class="comment">// 请求类型字符串</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> RESPONSE_TYPE_STR = <span class="string">&#x27;RESPONSE&#x27;</span>; <span class="comment">// 响应类型字符串</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> ERROR_TYPE_STR = <span class="string">&#x27;RESPONSE_ERROR&#x27;</span>; <span class="comment">// 错误类型字符串</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> DEFAULT_LOAD_MSG = <span class="string">&#x27;请求中...&#x27;</span>; <span class="comment">// 默认请求提示文字</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> CONNECT_TIMEOUT = <span class="number">60000</span>; <span class="comment">// 连接超时时间</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> RECEIVE_TIMEOUT = <span class="number">60000</span>; <span class="comment">// 接收超时时间</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> SEND_TIMEOUT = <span class="number">60000</span>; <span class="comment">// 发送超时时间</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> DIALOG_TYPE_OTHERS = <span class="string">&#x27;OTHERS&#x27;</span>; <span class="comment">// 结果处理-其他类型</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> DIALOG_TYPE_TOAST = <span class="string">&#x27;TOAST&#x27;</span>; <span class="comment">// 结果处理-轻提示类型</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> DIALOG_TYPE_ALERT = <span class="string">&#x27;ALERT&#x27;</span>; <span class="comment">// 结果处理-弹窗类型</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> DIALOG_TYPE_CUSTOM = <span class="string">&#x27;CUSTOM&#x27;</span>; <span class="comment">// 结果处理-自定义处理</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> loadMsg = DEFAULT_LOAD_MSG; <span class="comment">// 请求提示文字</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> errorShowTitle = <span class="string">&#x27;发生错误啦&#x27;</span>; <span class="comment">// 错误提示标题</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> errorShowMsg; <span class="comment">// 错误提示文字</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> CancelToken cancelToken = CancelToken(); <span class="comment">// 取消网络请求 token，默认所有请求都可取消。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> CancelToken whiteListCancelToken = CancelToken(); <span class="comment">// 取消网络请求白名单 token，此 token 不会被取消。</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, CancelToken&gt; _pendingRequests = &#123;&#125;; <span class="comment">// 正在请求列表</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Dio dio;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> _getBaseUrl() =&gt; <span class="string">&#x27;https://xxx.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">通用全局单例，第一次使用时初始化。</span></span></span><br><span class="line">  XHttp._internal() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == dio) &#123;</span><br><span class="line">      dio = Dio(BaseOptions(</span><br><span class="line">        baseUrl: _getBaseUrl(),</span><br><span class="line">        <span class="comment">// contentType: ,</span></span><br><span class="line">        <span class="comment">// responseType: ,</span></span><br><span class="line">        headers: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;,</span><br><span class="line">        connectTimeout: CONNECT_TIMEOUT,</span><br><span class="line">        receiveTimeout: RECEIVE_TIMEOUT,</span><br><span class="line">        sendTimeout: SEND_TIMEOUT,</span><br><span class="line">        extra: &#123;<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>: <span class="keyword">true</span>&#125;, <span class="comment">// 是否取消重复请求</span></span><br><span class="line">      ));</span><br><span class="line">      _init();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">获取单例本身</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> XHttp _instance = XHttp._internal();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">取消重复的请求</span></span></span><br><span class="line">  <span class="keyword">void</span> _removePendingRequest(<span class="built_in">String</span> tokenKey) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_pendingRequests.containsKey(tokenKey)) &#123;</span><br><span class="line">      <span class="comment">// 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除。</span></span><br><span class="line">      _pendingRequests[tokenKey]?.cancel(tokenKey);</span><br><span class="line">      _pendingRequests.remove(tokenKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">初始化 dio</span></span></span><br><span class="line">  <span class="keyword">void</span> _init() &#123;</span><br><span class="line">    <span class="comment">// 添加拦截器</span></span><br><span class="line">    dio.interceptors.add(</span><br><span class="line">      InterceptorsWrapper(</span><br><span class="line">        onRequest: (RequestOptions options, handler) <span class="keyword">async</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请求之前&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] == <span class="keyword">true</span> &amp;&amp; options.cancelToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="built_in">String</span> tokenKey = [</span><br><span class="line">              options.method,</span><br><span class="line">              options.baseUrl + options.path,</span><br><span class="line">              jsonEncode(options.data ?? &#123;&#125;),</span><br><span class="line">              jsonEncode(options.queryParameters ?? &#123;&#125;)</span><br><span class="line">            ].join(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">            _removePendingRequest(tokenKey);</span><br><span class="line">            options.cancelToken = CancelToken();</span><br><span class="line">            options.extra[<span class="string">&#x27;tokenKey&#x27;</span>] = tokenKey;</span><br><span class="line">            _pendingRequests[tokenKey] = options.cancelToken;</span><br><span class="line">          &#125;</span><br><span class="line">          _handleRequest(options, handler);</span><br><span class="line">          <span class="comment">// 有 token 时，添加 token。放打印日志后面，避免泄露 token。</span></span><br><span class="line">          <span class="comment">// 也可以登录成功后掉用 XHttp.setToken() 方法设置 token，但是持久化的话还是要这样最好。</span></span><br><span class="line">          <span class="built_in">String</span> token = <span class="string">&#x27;Bearer xxxxx&#x27;</span>;</span><br><span class="line">          <span class="keyword">if</span> (token != dio.options.headers[<span class="string">&#x27;authorization&#x27;</span>]) &#123;</span><br><span class="line">            dio.options.headers[<span class="string">&#x27;authorization&#x27;</span>] = token;</span><br><span class="line">            options.headers[<span class="string">&#x27;authorization&#x27;</span>] = token; <span class="comment">// 不设置的话第一次的请求会有问题，上面的是全局设置尚未对本条请求生效。</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> handler.next(options);</span><br><span class="line">        &#125;,</span><br><span class="line">        onResponse: (Response response, ResponseInterceptorHandler handler) &#123;</span><br><span class="line">          <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;响应之前&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          _handleResponse(response, handler);</span><br><span class="line">          RequestOptions option = response.requestOptions;</span><br><span class="line">          <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] == <span class="keyword">true</span> &amp;&amp; option.cancelToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">            _removePendingRequest(option.extra[<span class="string">&#x27;tokenKey&#x27;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">String</span> code = (response?.data ?? &#123;&#125;)[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">          <span class="built_in">String</span> msg = (response?.data ?? &#123;&#125;)[<span class="string">&#x27;msg&#x27;</span>] ?? response.statusMessage;</span><br><span class="line">          <span class="comment">// 静态数据 或者 根据后台实际返回结构解析，即 code == &#x27;0&#x27; 时，data 为有效数据。</span></span><br><span class="line">          <span class="built_in">bool</span> isSuccess = option.contentType != <span class="keyword">null</span> &amp;&amp; option.contentType.contains(<span class="string">&quot;text&quot;</span>) || code == <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          response.data = Result(response.data, isSuccess, response.statusCode, msg, headers: response.headers);</span><br><span class="line">          <span class="keyword">return</span> handler.next(response);</span><br><span class="line">        &#125;,</span><br><span class="line">        onError: (DioError error, handler) &#123;</span><br><span class="line">          <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;出错之前&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          _handleError(error);</span><br><span class="line">          <span class="keyword">if</span> (!CancelToken.isCancel(error) &amp;&amp; dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] == <span class="keyword">true</span>) &#123;</span><br><span class="line">            _pendingRequests.clear(); <span class="comment">// 不可抗力错误则清空列表</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 发生错误同时也会返回一个 Result 结构，通过这个 Result 可以拿到响应状态等信息。</span></span><br><span class="line">          <span class="keyword">if</span> (error.response != <span class="keyword">null</span> &amp;&amp; error.response?.data != <span class="keyword">null</span>) &#123;</span><br><span class="line">            error.response.data = Result(</span><br><span class="line">                error.response.data, <span class="keyword">false</span>, error.response?.statusCode, errorShowMsg ?? error.response?.statusMessage,</span><br><span class="line">                headers: error.response?.headers);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> Exception(errorShowMsg);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> handler.next(error);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// print(&quot;初始化 Dio 完成\n请求超时限制：$CONNECT_TIMEOUT ms\n接收超时限制：$RECEIVE_TIMEOUT ms\n发送超时限制：$SEND_TIMEOUT ms\nDio-BaseUrl：$&#123;dio.options.baseUrl&#125;\nDio-Headers：$&#123;dio.options.headers&#125;&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">请求 request 之前统一处理</span></span></span><br><span class="line">  <span class="keyword">void</span> _handleRequest(RequestOptions options, handler) &#123;</span><br><span class="line">    Toast.<span class="keyword">hide</span>();</span><br><span class="line">    Toast.loading(loadMsg);</span><br><span class="line">    <span class="built_in">Map</span> logData = &#123;</span><br><span class="line">      <span class="string">&#x27;url&#x27;</span>: options.baseUrl + options.path,</span><br><span class="line">      <span class="string">&#x27;method&#x27;</span>: options.method,</span><br><span class="line">      <span class="string">&#x27;headers&#x27;</span>: options.headers,</span><br><span class="line">      <span class="string">&#x27;data&#x27;</span>: options.data ?? options.queryParameters, <span class="comment">// GET 请求参数可以在 url 中，也可以使用 queryParameters，所以需要增加此判断。</span></span><br><span class="line">    &#125;;</span><br><span class="line">    _dealRequestInfo(logData, REQUEST_TYPE_STR);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">响应 response 之前统一处理</span></span></span><br><span class="line">  <span class="keyword">void</span> _handleResponse(Response response, handler) &#123;</span><br><span class="line">    <span class="built_in">Map</span> logData = &#123;</span><br><span class="line">      <span class="string">&#x27;url&#x27;</span>: response.requestOptions.uri,</span><br><span class="line">      <span class="string">&#x27;method&#x27;</span>: response.requestOptions.method,</span><br><span class="line">      <span class="string">&#x27;headers&#x27;</span>: response.headers,</span><br><span class="line">      <span class="string">&#x27;data&#x27;</span>: response.data,</span><br><span class="line">      <span class="string">&#x27;statusCode&#x27;</span>: response.statusCode,</span><br><span class="line">      <span class="string">&#x27;statusMessage&#x27;</span>: response.statusMessage,</span><br><span class="line">    &#125;;</span><br><span class="line">    _dealRequestInfo(logData, RESPONSE_TYPE_STR);</span><br><span class="line">    Toast.<span class="keyword">hide</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">错误 error 统一处理</span></span></span><br><span class="line">  <span class="keyword">void</span> _handleError(DioError error) &#123;</span><br><span class="line">    <span class="comment">// 也可以在此处根据状态码并处理错误信息，例如退出登录等等。</span></span><br><span class="line">    <span class="built_in">String</span> errorTypeInfo = <span class="string">&#x27;其他错误！&#x27;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (error.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> DioErrorType.connectTimeout:</span><br><span class="line">        errorTypeInfo = <span class="string">&#x27;连接超时！&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DioErrorType.sendTimeout:</span><br><span class="line">        errorTypeInfo = <span class="string">&quot;请求超时！&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DioErrorType.receiveTimeout:</span><br><span class="line">        errorTypeInfo = <span class="string">&quot;响应超时！&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DioErrorType.response:</span><br><span class="line">        errorTypeInfo = <span class="string">&quot;服务异常！&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DioErrorType.cancel:</span><br><span class="line">        errorTypeInfo = <span class="string">&quot;请求取消！&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DioErrorType.other:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Map</span> logData = &#123;</span><br><span class="line">      <span class="string">&#x27;url&#x27;</span>: error.requestOptions.baseUrl + error.requestOptions.path,</span><br><span class="line">      <span class="string">&#x27;method&#x27;</span>: error.requestOptions.method,</span><br><span class="line">      <span class="string">&#x27;headers&#x27;</span>: error.response?.headers,</span><br><span class="line">      <span class="string">&#x27;data&#x27;</span>: error.response?.data,</span><br><span class="line">      <span class="string">&#x27;statusCode&#x27;</span>: error.response?.statusCode,</span><br><span class="line">      <span class="string">&#x27;statusMessage&#x27;</span>: error.response?.statusMessage,</span><br><span class="line">      <span class="string">&#x27;errorType&#x27;</span>: error.type,</span><br><span class="line">      <span class="string">&#x27;errorMessage&#x27;</span>: error.message,</span><br><span class="line">      <span class="string">&#x27;errorTypeInfo&#x27;</span>: errorTypeInfo,</span><br><span class="line">    &#125;;</span><br><span class="line">    _dealRequestInfo(logData, ERROR_TYPE_STR);</span><br><span class="line">    Toast.<span class="keyword">hide</span>();</span><br><span class="line">    errorShowMsg =</span><br><span class="line">        <span class="string">&quot;<span class="subst">$errorShowTitle</span> <span class="subst">$&#123;error.response?.statusCode ?? <span class="string">&#x27;unknown&#x27;</span>&#125;</span> <span class="subst">$errorTypeInfo</span> \n <span class="subst">$&#123;error.response?.statusMessage ?? <span class="string">&#x27;&#x27;</span>&#125;</span> <span class="subst">$&#123;error.message ?? <span class="string">&#x27;&#x27;</span>&#125;</span> \n <span class="subst">$&#123;error.response?.data ?? <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">合并打印请求日志 REQUEST RESPONSE RESPONSE<span class="emphasis">_ERROR</span></span></span></span><br><span class="line">  <span class="built_in">String</span> _dealRequestInfo(<span class="built_in">Map</span> logData, <span class="built_in">String</span> logType) &#123;</span><br><span class="line">    <span class="built_in">String</span> logStr = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    logStr += <span class="string">&quot;========================= <span class="subst">$logType</span> START =========================\n&quot;</span>;</span><br><span class="line">    logStr += <span class="string">&quot;- URL: <span class="subst">$&#123;logData[<span class="string">&#x27;url&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">    logStr += <span class="string">&quot;- METHOD: <span class="subst">$&#123;logData[<span class="string">&#x27;method&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">    <span class="comment">// logStr += &quot;- HEADER: \n &#123; \n&quot;;</span></span><br><span class="line">    <span class="comment">// logStr += parseData(logData[&#x27;headers&#x27;]);</span></span><br><span class="line">    <span class="comment">// logStr += &quot;\n &#125; \n&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (logData[<span class="string">&#x27;data&#x27;</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">      logStr += <span class="string">&quot;- <span class="subst">$&#123;logType&#125;</span>_BODY: \n&quot;</span>;</span><br><span class="line">      logStr += <span class="string">&quot;!!!!!----------*!*##~##~##~##*!*##~##~##~##*!*----------!!!!! \n&quot;</span>;</span><br><span class="line">      logStr += <span class="string">&quot;<span class="subst">$&#123;parseData(logData[<span class="string">&#x27;data&#x27;</span>])&#125;</span> \n&quot;</span>;</span><br><span class="line">      logStr += <span class="string">&quot;!!!!!----------*!*##~##~##~##*!*##~##~##~##*!*----------!!!!! \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logType.contains(RESPONSE_TYPE_STR)) &#123;</span><br><span class="line">      logStr += <span class="string">&quot;- STATUS_CODE: <span class="subst">$&#123;logData[<span class="string">&#x27;statusCode&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">      logStr += <span class="string">&quot;- STATUS_MSG: <span class="subst">$&#123;logData[<span class="string">&#x27;statusMessage&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logType == ERROR_TYPE_STR) &#123;</span><br><span class="line">      logStr += <span class="string">&quot;- ERROR_TYPE: <span class="subst">$&#123;logData[<span class="string">&#x27;errorType&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">      logStr += <span class="string">&quot;- ERROR_MSG: <span class="subst">$&#123;logData[<span class="string">&#x27;errorMessage&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">      logStr += <span class="string">&quot;- ERROR_TYPE_INFO: <span class="subst">$&#123;logData[<span class="string">&#x27;errorTypeInfo&#x27;</span>]&#125;</span> \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    logStr += <span class="string">&quot;========================= <span class="subst">$logType</span> E N D =========================\n&quot;</span>;</span><br><span class="line">    logWrapped(logStr);</span><br><span class="line">    <span class="keyword">return</span> logStr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">统一结果提示处理</span></span></span></span><br><span class="line">  Future _showResultDialog(Response response, resultDialogConfig) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    resultDialogConfig = resultDialogConfig ?? &#123;&#125;;</span><br><span class="line">    <span class="built_in">String</span> dialogType = resultDialogConfig[<span class="string">&#x27;type&#x27;</span>] ?? XHttp.DIALOG_TYPE_TOAST;</span><br><span class="line">    <span class="keyword">if</span> (dialogType == XHttp.DIALOG_TYPE_OTHERS) &#123;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 其他类型 OTHERS 自定义处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> isSuccess = response?.data?.success ?? <span class="keyword">false</span>;</span><br><span class="line">    <span class="built_in">String</span> msg = response?.data?.msg ?? <span class="string">&#x27;未知错误&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (dialogType == XHttp.DIALOG_TYPE_TOAST) &#123;</span><br><span class="line">      <span class="comment">// resultDialogConfig 可以有 successMsg, errorMsg</span></span><br><span class="line">      isSuccess</span><br><span class="line">          ? Toast.<span class="keyword">show</span>(resultDialogConfig[<span class="string">&#x27;successMsg&#x27;</span>] ?? msg, type: Toast.SUCCESS)</span><br><span class="line">          : Toast.<span class="keyword">show</span>(resultDialogConfig[<span class="string">&#x27;errorMsg&#x27;</span>] ?? msg, type: Toast.ERROR);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dialogType == XHttp.DIALOG_TYPE_ALERT) &#123;</span><br><span class="line">      <span class="comment">// resultDialogConfig 可以有 title, content, closeable, showCancel, cancelText, confirmText, confirmCallback, cancelCallback, closeCallback ...</span></span><br><span class="line">      <span class="comment">// Utils.showDialog(...);</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dialogType == XHttp.DIALOG_TYPE_CUSTOM) &#123;</span><br><span class="line">      <span class="comment">// resultDialogConfig 可以有 onSuceess, onError</span></span><br><span class="line">      <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultDialogConfig[<span class="string">&#x27;onSuccess&#x27;</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">          resultDialogConfig[<span class="string">&#x27;onSuccess&#x27;</span>](response.data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultDialogConfig[<span class="string">&#x27;onError&#x27;</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">          resultDialogConfig[<span class="string">&#x27;onError&#x27;</span>](response.data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">处理异常</span></span></span></span><br><span class="line">  <span class="keyword">void</span> _catchOthersError(e) &#123;</span><br><span class="line">    <span class="built_in">String</span> errMsg = <span class="string">&quot;<span class="subst">$&#123;errorShowMsg ?? e&#125;</span><span class="subst">$CUSTOM_ERROR_CODE</span>&quot;</span>.split(CUSTOM_ERROR_CODE)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">int</span> errMsgLength = errMsg.length;</span><br><span class="line">    <span class="built_in">String</span> errshowMsg = errMsgLength &gt; <span class="number">300</span> ? errMsg.substring(<span class="number">0</span>, <span class="number">150</span>) : errMsg;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">is</span> DioError) &#123;</span><br><span class="line">      <span class="keyword">if</span> (CancelToken.isCancel(e)) &#123;</span><br><span class="line">        Toast.<span class="keyword">show</span>(<span class="string">&#x27;Cancel Request Successful&#x27;</span>); <span class="comment">// 取消重复请求可能会多次弹窗</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      Toast.<span class="keyword">show</span>(errshowMsg, type: Toast.WARNING);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.<span class="keyword">show</span>(errshowMsg + <span class="string">&quot;\n......&quot;</span>, type: Toast.ERROR);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">本可以直接 XHttp.xxx 调用（添加 static 关键字给之后的 get/post 等方法），但是考虑多台服务器的情况，建议 XHttp.getInstance().xxx 调用。</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp getInstance(&#123;<span class="built_in">String</span> baseUrl, <span class="built_in">String</span> msg&#125;) &#123;</span><br><span class="line">    <span class="built_in">String</span> targetBaseUrl = baseUrl ?? _instance._getBaseUrl();</span><br><span class="line">    loadMsg = msg ?? DEFAULT_LOAD_MSG;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.baseUrl != targetBaseUrl) &#123;</span><br><span class="line">      dio.options.baseUrl = targetBaseUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">取消普通请求</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp cancelRequest() &#123;</span><br><span class="line">    Toast.<span class="keyword">hide</span>();</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] == <span class="keyword">true</span>) &#123;</span><br><span class="line">      _instance._pendingRequests.forEach((tokenKey, cancelToken) &#123;</span><br><span class="line">        cancelToken.cancel(<span class="string">&#x27;cancel request <span class="subst">$tokenKey</span>&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cancelToken.cancel(<span class="string">&#x27;cancel request&#x27;</span>);</span><br><span class="line">      cancelToken = CancelToken(); <span class="comment">// 坑！取消后必须重新创建 cancelToken 否则后面使用原来 cancelToken 的请求会无效</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">取消所有白名单 cancelToken 的请求</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp cancelWhiteListRequest() &#123;</span><br><span class="line">    Toast.<span class="keyword">hide</span>();</span><br><span class="line">    whiteListCancelToken.cancel(<span class="string">&#x27;cancel whiteList request&#x27;</span>);</span><br><span class="line">    whiteListCancelToken = CancelToken();</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取 cancelToken</span></span></span></span><br><span class="line">  <span class="keyword">static</span> CancelToken getCancelToken() &#123;</span><br><span class="line">    <span class="keyword">return</span> cancelToken;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取 whiteListCancelToken</span></span></span></span><br><span class="line">  <span class="keyword">static</span> CancelToken getWhiteListCancelToken() &#123;</span><br><span class="line">    <span class="keyword">return</span> whiteListCancelToken;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取一个新的 cancelToken</span></span></span></span><br><span class="line">  <span class="keyword">static</span> CancelToken getNewCancelToken() &#123;</span><br><span class="line">    <span class="keyword">return</span> CancelToken();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">get 请求</span></span></span></span><br><span class="line">  Future <span class="keyword">get</span>(<span class="built_in">String</span> url, [<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params, resultDialogConfig, <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 可转为使用 request 代替，简化代码。</span></span><br><span class="line">    <span class="comment">// 写中括号可以忽略参数名称，因为必须按顺序传参。</span></span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">        response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(url, queryParameters: params, cancelToken: requestToken);</span><br><span class="line">        <span class="keyword">return</span> response.data;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(url, cancelToken: requestToken);</span><br><span class="line">        <span class="keyword">return</span> response.data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _showResultDialog(response, resultDialogConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">post 请求</span></span></span></span><br><span class="line">  Future post(<span class="built_in">String</span> url, [<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data, resultDialogConfig, <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 可转为使用 request 代替，简化代码。</span></span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.post(url, data: data, cancelToken: requestToken);</span><br><span class="line">      <span class="keyword">return</span> response.data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _showResultDialog(response, resultDialogConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">put 请求</span></span></span></span><br><span class="line">  Future put(<span class="built_in">String</span> url, [<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data, resultDialogConfig, <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 可转为使用 request 代替，简化代码。</span></span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.put(url, data: data, cancelToken: requestToken);</span><br><span class="line">      <span class="keyword">return</span> response.data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _showResultDialog(response, resultDialogConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">patch 请求</span></span></span></span><br><span class="line">  Future patch(<span class="built_in">String</span> url, [<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data, resultDialogConfig, <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 可转为使用 request 代替，简化代码。</span></span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.patch(url, data: data, cancelToken: requestToken);</span><br><span class="line">      <span class="keyword">return</span> response.data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _showResultDialog(response, resultDialogConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">delete 请求</span></span></span></span><br><span class="line">  Future delete(<span class="built_in">String</span> url, [<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data, resultDialogConfig, <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 可转为使用 request 代替，简化代码。</span></span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.delete(url, data: data, cancelToken: requestToken);</span><br><span class="line">      <span class="keyword">return</span> response.data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _showResultDialog(response, resultDialogConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">request</span></span></span></span><br><span class="line">  <span class="keyword">static</span> Future request(</span><br><span class="line">    <span class="built_in">String</span> url, &#123;</span><br><span class="line">    <span class="built_in">String</span> method = XHttp.GET,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; queryParameters,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data,</span><br><span class="line">    <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>,</span><br><span class="line">    resultDialogConfig,</span><br><span class="line">    Options options,</span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">int</span>, <span class="built_in">int</span>) onSendProgress,</span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">int</span>, <span class="built_in">int</span>) onReceiveProgress,</span><br><span class="line">    <span class="built_in">String</span> msg,</span><br><span class="line">    <span class="built_in">String</span> baseUrl,</span><br><span class="line">  &#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    XHttp.getInstance(baseUrl: baseUrl, msg: msg);</span><br><span class="line">    Response response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.request(</span><br><span class="line">        url,</span><br><span class="line">        options: options ?? Options(method: method, contentType: Headers.formUrlEncodedContentType),</span><br><span class="line">        queryParameters: queryParameters,</span><br><span class="line">        data: data,</span><br><span class="line">        cancelToken: requestToken,</span><br><span class="line">        onReceiveProgress: onReceiveProgress,</span><br><span class="line">        onSendProgress: onSendProgress,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> response.data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _instance._catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _instance._showResultDialog(</span><br><span class="line">        response,</span><br><span class="line">        resultDialogConfig ?? &#123;<span class="string">&#x27;type&#x27;</span>: XHttp.DIALOG_TYPE_OTHERS&#125;,</span><br><span class="line">      ); <span class="comment">// request 请求默认都需自己处理结果</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">下载文件</span></span></span></span><br><span class="line">  Future downloadFile(urlPath, savePath, [resultDialogConfig, <span class="built_in">bool</span> isCancelWhiteList = <span class="keyword">false</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">var</span> requestToken;</span><br><span class="line">    <span class="keyword">if</span> (dio.options.extra[<span class="string">&#x27;cancelDuplicatedRequest&#x27;</span>] != <span class="keyword">true</span> || isCancelWhiteList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelWhiteList) &#123;</span><br><span class="line">        requestToken = whiteListCancelToken;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestToken = cancelToken;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> dio.download(urlPath, savePath, onReceiveProgress: (<span class="built_in">int</span> count, <span class="built_in">int</span> total) &#123;</span><br><span class="line">        <span class="comment">// 进度</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$count</span> <span class="subst">$total</span>&quot;</span>);</span><br><span class="line">      &#125;, cancelToken: requestToken);</span><br><span class="line">      <span class="keyword">return</span> response.data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _catchOthersError(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _showResultDialog(response, resultDialogConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// /// post 表单请求 【Web】</span></span><br><span class="line">  <span class="comment">// Future postForm(String url, [Map&lt;String, dynamic&gt; params, resultDialogConfig, bool isCancelWhiteList = false]) async &#123;</span></span><br><span class="line">  <span class="comment">//   Response response;</span></span><br><span class="line">  <span class="comment">//   var requestToken;</span></span><br><span class="line">  <span class="comment">//   if (dio.options.extra[&#x27;cancelDuplicatedRequest&#x27;] != true || isCancelWhiteList) &#123;</span></span><br><span class="line">  <span class="comment">//     if (isCancelWhiteList) &#123;</span></span><br><span class="line">  <span class="comment">//       requestToken = whiteListCancelToken;</span></span><br><span class="line">  <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//       requestToken = cancelToken;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   try &#123;</span></span><br><span class="line">  <span class="comment">//     response = await dio.post(url, queryParameters: params, cancelToken: requestToken);</span></span><br><span class="line">  <span class="comment">//     return response.data;</span></span><br><span class="line">  <span class="comment">//   &#125; catch (e) &#123;</span></span><br><span class="line">  <span class="comment">//     _catchOthersError(e);</span></span><br><span class="line">  <span class="comment">//   &#125; finally &#123;</span></span><br><span class="line">  <span class="comment">//     _showResultDialog(response, resultDialogConfig);</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">+++++++++++++++++++++++++ 小扩展 【待增加：retry、代理/proxy、根据状态码自动退出与重连等】 +++++++++++++++++++++++++</span></span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取当前的 baseUrl</span></span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> getBaseUrl() &#123;</span><br><span class="line">    <span class="keyword">return</span> dio.options.baseUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前的 baseUrl</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setBaseUrl(<span class="built_in">String</span> baseUrl) &#123;</span><br><span class="line">    dio.options.baseUrl = baseUrl;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取当前 headers</span></span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Map</span> getHeaders() &#123;</span><br><span class="line">    <span class="keyword">return</span> dio.options.headers;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取当前 headers 属性</span></span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dynamic</span> getHeader(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    <span class="keyword">return</span> dio.options.headers[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前 headers</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setHeaders(<span class="built_in">Map</span> headers) &#123;</span><br><span class="line">    dio.options.headers = headers;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前 headers 属性</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setHeader(<span class="built_in">String</span> key, <span class="built_in">String</span> value) &#123;</span><br><span class="line">    dio.options.headers[key] = value;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">删除当前的请求头属性</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp removeHeader(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    dio.options.headers.remove(key);</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">删除当前的所有请求头属性</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp removeAllHeaders() &#123;</span><br><span class="line">    dio.options.headers.clear();</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取当前的所有超时时间</span></span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Map</span> getRequestTimeout() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">&#x27;connectTimeout&#x27;</span>: dio.options.connectTimeout,</span><br><span class="line">      <span class="string">&#x27;receiveTimeout&#x27;</span>: dio.options.receiveTimeout,</span><br><span class="line">      <span class="string">&#x27;sendTimeout&#x27;</span>: dio.options.sendTimeout</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前的所有超时时间</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setRequestTimeout(<span class="built_in">int</span> timeout) &#123;</span><br><span class="line">    dio.options.connectTimeout = timeout;</span><br><span class="line">    dio.options.receiveTimeout = timeout;</span><br><span class="line">    dio.options.sendTimeout = timeout;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前的连接超时时间</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setConnectTimeout(<span class="built_in">int</span> timeout) &#123;</span><br><span class="line">    dio.options.connectTimeout = timeout;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前的接收超时时间</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setReceiveTimeout(<span class="built_in">int</span> timeout) &#123;</span><br><span class="line">    dio.options.receiveTimeout = timeout;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前的发送超时时间</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setSendTimeout(<span class="built_in">int</span> timeout) &#123;</span><br><span class="line">    dio.options.sendTimeout = timeout;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">获取用户数据</span></span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; getAuthUser() &#123;</span><br><span class="line">    <span class="built_in">String</span> token = dio.options.headers[<span class="string">&#x27;authorization&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == token) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析token</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;account&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;roles&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置当前 token</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setAuthToken([<span class="built_in">String</span> token]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == token) &#123;</span><br><span class="line">      dio.options.headers.remove(<span class="string">&#x27;authorization&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dio.options.headers[<span class="string">&#x27;authorization&#x27;</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">设置错误提示标题</span></span></span></span><br><span class="line">  <span class="keyword">static</span> XHttp setErrorTitle(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">    errorShowTitle = msg;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown"><span class="emphasis">判断是否是取消异常</span></span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> isCancel(e) &#123;</span><br><span class="line">    <span class="keyword">return</span> CancelToken.isCancel(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// /// 设置当前的请求数据格式</span></span><br><span class="line">  <span class="comment">// static XHttp setContentType(String contentType) &#123;</span></span><br><span class="line">  <span class="comment">//   dio.options.contentType = contentType;</span></span><br><span class="line">  <span class="comment">//   return _instance;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// /// 设置当前的请求数据格式</span></span><br><span class="line">  <span class="comment">// static XHttp setContentTypeMultipartForm() &#123;</span></span><br><span class="line">  <span class="comment">//   dio.options.contentType = &quot;multipart/form-data&quot;;</span></span><br><span class="line">  <span class="comment">//   return _instance;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// /// 设置当前的请求返回数据格式</span></span><br><span class="line">  <span class="comment">// static XHttp setDataType(ResponseType dataType) &#123;</span></span><br><span class="line">  <span class="comment">//   dio.options.responseType = dataType;</span></span><br><span class="line">  <span class="comment">//   return _instance;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// /// 设置当前的请求返回数据格式</span></span><br><span class="line">  <span class="comment">// static XHttp setDataTypeJson() &#123;</span></span><br><span class="line">  <span class="comment">//   dio.options.responseType = ResponseType.json;</span></span><br><span class="line">  <span class="comment">//   return _instance;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ----- [cookie/charset/accept/encoder/decoder] 这些都可以通过设置 headers 实现 -----</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">====================================================== 以下内容为工具方法 ======================================================</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">解析数据</span></span></span></span><br><span class="line"><span class="built_in">String</span> parseData(data) &#123;</span><br><span class="line">  <span class="built_in">String</span> responseStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (data <span class="keyword">is</span> <span class="built_in">Map</span>) &#123;</span><br><span class="line">    responseStr += data.mapToStructureString();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data <span class="keyword">is</span> FormData) &#123;</span><br><span class="line">    <span class="keyword">final</span> formDataMap = <span class="built_in">Map</span>()</span><br><span class="line">      ..addEntries(data.fields)</span><br><span class="line">      ..addEntries(data.files);</span><br><span class="line">    responseStr += formDataMap.mapToStructureString();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data <span class="keyword">is</span> <span class="built_in">List</span>) &#123;</span><br><span class="line">    responseStr += data.listToStructureString();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    responseStr += data.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> responseStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">分段 log，可以写到 log 中。</span></span></span></span><br><span class="line"><span class="keyword">void</span> logWrapped(<span class="built_in">String</span> text) &#123;</span><br><span class="line">  <span class="keyword">final</span> pattern = <span class="built_in">RegExp</span>(<span class="string">&#x27;.&#123;1,800&#125;&#x27;</span>); <span class="comment">// 800 is the size of each chunk</span></span><br><span class="line">  pattern.allMatches(text).forEach((match) =&gt; <span class="built_in">print</span>(match.group(<span class="number">0</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">Map 拓展，Map 转结构化字符串输出。</span></span></span></span><br><span class="line"><span class="keyword">extension</span> Map2StringEx <span class="keyword">on</span> <span class="built_in">Map</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> mapToStructureString(&#123;<span class="built_in">int</span> indentation = <span class="number">0</span>, <span class="built_in">String</span> space = <span class="string">&quot;  &quot;</span>&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="keyword">null</span> || <span class="keyword">this</span>.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$this</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">String</span> indentationContent = space * indentation;</span><br><span class="line">    result += <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>.forEach((key, value) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">Map</span>) &#123;</span><br><span class="line">        result += <span class="string">&quot;\n<span class="subst">$indentationContent</span>&quot;</span> + <span class="string">&quot;\&quot;<span class="subst">$key</span>\&quot;: <span class="subst">$&#123;value.mapToStructureString(indentation: indentation + <span class="number">1</span>)&#125;</span>,&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">List</span>) &#123;</span><br><span class="line">        result += <span class="string">&quot;\n<span class="subst">$indentationContent</span>&quot;</span> + <span class="string">&quot;\&quot;<span class="subst">$key</span>\&quot;: <span class="subst">$&#123;value.listToStructureString(indentation: indentation + <span class="number">1</span>)&#125;</span>,&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += <span class="string">&quot;\n<span class="subst">$indentationContent</span>&quot;</span> + <span class="string">&quot;\&quot;<span class="subst">$key</span>\&quot;: <span class="subst">$&#123;value <span class="keyword">is</span> String ? <span class="string">&quot;\&quot;<span class="subst">$value</span>\&quot;,&quot;</span> : <span class="string">&quot;<span class="subst">$value</span>,&quot;</span>&#125;</span>&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    result = result.substring(<span class="number">0</span>, result.length - <span class="number">1</span>); <span class="comment">// 去掉最后一个逗号</span></span><br><span class="line">    result += <span class="string">&quot;\n<span class="subst">$indentationContent</span>&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">List 拓展，List 转结构化字符串输出。</span></span></span></span><br><span class="line"><span class="keyword">extension</span> List2StringEx <span class="keyword">on</span> <span class="built_in">List</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> listToStructureString(&#123;<span class="built_in">int</span> indentation = <span class="number">0</span>, <span class="built_in">String</span> space = <span class="string">&quot;  &quot;</span>&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="keyword">null</span> || <span class="keyword">this</span>.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$this</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">String</span> indentationContent = space * indentation;</span><br><span class="line">    result += <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">Map</span>) &#123;</span><br><span class="line">        result +=</span><br><span class="line">            <span class="string">&quot;\n<span class="subst">$indentationContent</span>&quot;</span> + space + <span class="string">&quot;<span class="subst">$&#123;value.mapToStructureString(indentation: indentation + <span class="number">1</span>)&#125;</span>,&quot;</span>; <span class="comment">// 加空格更好看</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">List</span>) &#123;</span><br><span class="line">        result += value.listToStructureString(indentation: indentation + <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += <span class="string">&quot;\n<span class="subst">$indentationContent</span>&quot;</span> + value <span class="keyword">is</span> <span class="built_in">String</span> ? <span class="string">&quot;\&quot;<span class="subst">$value</span>\&quot;,&quot;</span> : <span class="string">&quot;<span class="subst">$value</span>,&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = result.substring(<span class="number">0</span>, result.length - <span class="number">1</span>); <span class="comment">// 去掉最后一个逗号</span></span><br><span class="line">    result += <span class="string">&quot;\n<span class="subst">$indentationContent</span>]&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">结果处理</span></span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="built_in">bool</span> success;</span><br><span class="line">  <span class="built_in">int</span> code;</span><br><span class="line">  <span class="built_in">String</span> msg;</span><br><span class="line">  <span class="keyword">var</span> headers;</span><br><span class="line">  Result(<span class="keyword">this</span>.data, <span class="keyword">this</span>.success, <span class="keyword">this</span>.code, <span class="keyword">this</span>.msg, &#123;<span class="keyword">this</span>.headers&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toast</span> </span>&#123;</span><br><span class="line">  Toast._() &#123;</span><br><span class="line">    <span class="comment">// EasyLoading 已全局初始化构建</span></span><br><span class="line">    <span class="comment">// EasyLoading.instance.loadingStyle = EasyLoadingStyle.custom;</span></span><br><span class="line">    <span class="comment">// 此处可自定义风格</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Toast _instance = Toast._();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> SUCCESS = <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> ERROR = <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> WARNING = <span class="string">&quot;WARNING&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> INFO = <span class="string">&quot;INFO&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> loading(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">    EasyLoading.<span class="keyword">show</span>(status: msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> progeress(<span class="built_in">double</span> value, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">    EasyLoading.showProgress(value, status: msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">show</span>(<span class="built_in">String</span> msg, &#123;<span class="built_in">String</span> type&#125;) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> Toast.SUCCESS:</span><br><span class="line">        EasyLoading.showSuccess(msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Toast.ERROR:</span><br><span class="line">        EasyLoading.showError(msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Toast.WARNING:</span><br><span class="line">        EasyLoading.showInfo(msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Toast.INFO:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        EasyLoading.showToast(msg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">hide</span>() &#123;</span><br><span class="line">    EasyLoading.dismiss();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /// 使用示例：若未设置多个 baseUrl，可省略 getInstance()，记得给 get、post 设置 static 关键字或者直接初始化多个 baseUrl 的实例。也可以参考 request 在 get、post 方法中设置 baseUrl。</span></span><br><span class="line"><span class="comment">//  XHttp.getInstance().post(&quot;/user/login&quot;, &#123;</span></span><br><span class="line"><span class="comment">//     &quot;username&quot;: username,</span></span><br><span class="line"><span class="comment">//     &quot;password&quot;: password</span></span><br><span class="line"><span class="comment">//   &#125;).then((res) &#123;</span></span><br><span class="line"><span class="comment">//     // DO SOMETHING</span></span><br><span class="line"><span class="comment">//   &#125;).catchError((err) &#123;</span></span><br><span class="line"><span class="comment">//     // DO SOMETHING</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br></pre></td></tr></table></figure>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvZmx1dHRlcl9kaW9feGh0dHA=">Github Dart_XHttp<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vZmx1dHRlcl9kaW9feGh0dHA=">Gitee Dart_XHttp<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
        <tag>Dio</tag>
        <tag>XHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript EventLoop</title>
    <url>/eventloop/</url>
    <content><![CDATA[<div class="note success no-icon"><p>EventLoop 即事件循环机制，是指浏览器或 Node 的一种解决 JavaScript 单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。</p>
</div>
<span id="more"></span>

<h2 id="JavaScript-运行机制"><a href="#JavaScript-运行机制" class="headerlink" title="JavaScript 运行机制"></a>JavaScript 运行机制</h2><ul>
<li>所有同步任务都在主线程上执行，形成一个<code>执行栈(Execution Context Stack)</code>。</li>
<li>主线程之外，还存在<code>任务队列(Task Queue)</code>。只要异步任务有了运行结果，就在<strong>任务队列之中放置一个事件</strong>。</li>
<li>一旦<code>执行栈</code>中的所有<strong>同步任务执行完毕</strong>，系统就会读取<code>任务队列</code>，看看里面有哪些事件。如果有那些对应的<code>异步任务</code>，于是结束等待状态，<strong>进入执行栈，开始执行。</strong></li>
<li>主线程不断重复上面的第三步</li>
<li>一个事件循环中有一个或者是多个任务队列</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/eventloop/event_loop_a.awebp"></p>
<blockquote>
<p>总结：调用栈中的同步任务都执行完毕，栈内被清空了，就代表主线程空闲了。<br>这个时候就会去任务队列中按照顺序读取一个任务放入到栈中执行。<br>每次栈内被清空，都会去读取任务队列有没有任务，有就读取执行，一直循环读取～执行的操作。</p>
</blockquote>
<h2 id="EventLoop-事件循环"><a href="#EventLoop-事件循环" class="headerlink" title="EventLoop 事件循环"></a>EventLoop 事件循环</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>主线程从“任务队列”中读取执行事件，这个过程是循环不断的，这个机制被称为事件循环。此机制具体如下：</p>
</blockquote>
<ul>
<li>JavaScript 中有两种异步任务：<code>宏任务(MacroTask)</code>、<code>微任务(MicroTask)</code>。</li>
<li>主线程会不断从任务队列中按顺序取任务执行，每执行完一个任务都会检查『微任务』队列是否为空（执行完一个任务的具体标志是函数执行栈为空），如果不为空则会一次性执行完所有『微任务』。</li>
<li>然后再进入下一个循环去任务队列中取下一个任务执行。</li>
</ul>
<h3 id="MacroTask-宏任务"><a href="#MacroTask-宏任务" class="headerlink" title="MacroTask 宏任务"></a>MacroTask 宏任务</h3><ul>
<li>script 全部代码、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>（浏览器暂时不支持，只有 IE10 支持，具体可见 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9zZXRJbW1lZGlhdGU=">MDN<i class="fa fa-external-link-alt"></i></span>。）、<code>I/O</code>、<code>UI Rendering</code>。</li>
</ul>
<h3 id="MicroTask-微任务"><a href="#MicroTask-微任务" class="headerlink" title="MicroTask 微任务"></a>MicroTask 微任务</h3><ul>
<li><code>Process.nextTick</code>（Node独有）、<code>Promise</code>、<code>Object.observe(废弃)</code>、<code>MutationObserver</code>（具体使用方式查看<span class="exturl" data-url="aHR0cDovL2phdmFzY3JpcHQucnVhbnlpZmVuZy5jb20vZG9tL211dGF0aW9ub2JzZXJ2ZXIuaHRtbA==">这里<i class="fa fa-external-link-alt"></i></span>）</li>
</ul>
<h3 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h3><p>&emsp;&emsp;JavaScript 单线程任务被分为同步任务和异步任务，同步任务会在调用栈中按照顺序等待主线程依次执行。异步任务会在异步任务有了结果后，将注册的回调函数放入任务队列中，等待主线程空闲的时候（调用栈被清空），被读取到栈内等待主线程的执行。</p>
<p><img data-src="/images/loading.gif" data-original="/eventloop/event_loop_b.awebp"></p>
<h3 id="事件循环的进程模型"><a href="#事件循环的进程模型" class="headerlink" title="事件循环的进程模型"></a>事件循环的进程模型</h3><ul>
<li>选择当前要执行的任务队列，选择任务队列中最先进入的任务，如果任务队列为空即 null，则执行跳转到微任务的执行步骤。</li>
<li>将事件循环中的任务设置为当前选择任务</li>
<li>执行任务</li>
<li>将事件循环中当前运行任务设置为 null</li>
<li>将已经运行完成的任务从任务队列中删除</li>
<li>Microtasks 检查步骤，进入微任务检查点。<ul>
<li>设置微任务检查点标志为 true。</li>
<li>当事件循环微任务执行队列不为空时：选择一个<code>最先进入的微任务队列</code>的微任务，将事件循环的微任务设置为<code>当前选择的微任务</code>。</li>
<li>运行微任务</li>
<li>将已经执行完成的微任务设置为 null</li>
<li>移除微任务队列中的当前运行完成的微任务</li>
<li>清理 IndexDB 事务</li>
<li>设置进入微任务检查点的标志为 false。</li>
</ul>
</li>
<li>更新界面渲染</li>
<li>返回第一步</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/eventloop/event_loop_model.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>执行栈在执行完 <strong>同步任务</strong> 后，查看 <strong>执行栈</strong> 是否为空，如果为空，就会去检查 <strong>微任务队列</strong> 是否为空，如果为空的话，就执行 <strong>宏任务</strong>，否则就一次性执行完 <strong>所有微任务</strong>。</li>
<li>每次单个 <strong>宏任务</strong> 执行完毕后，检查 <strong>微任务队列</strong> 是否为空，如果不为空的话，会按照<code>先入先出</code>的规则全部执行完  <strong>微任务</strong> 后，设置 <strong>微任务队列</strong> 为 null，然后再执行宏任务，如此循环。</li>
</ul>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure>

<h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><ul>
<li>第一次执行：执行同步代码，将宏任务和微任务划分到各自队列中。</li>
<li>第二次执行：执行宏任务后，检测到 <strong>微任务队列</strong> 中不为空，执行 <code>Promise1</code>，执行完成 <code>Promise1</code> 后，调用 <code>Promise2.then</code>，放入 <strong>微任务队列</strong> 中，再执行 <code>Promise2.then</code>。</li>
<li>第三次执行：当 <strong>微任务队列</strong> 中为空时，执行 <strong>宏任务</strong>，执行 <code>setTimeout callback</code>，打印日志。</li>
<li>第四次执行：清空任务队列和调用栈</li>
</ul>
<h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1&#x27;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer2&#x27;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/loading.gif" data-original="/eventloop/run_demo.awebp"></p>
<h2 id="再举个栗子"><a href="#再举个栗子" class="headerlink" title="再举个栗子"></a>再举个栗子</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">script start</span><br><span class="line">async2 end</span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line"><span class="built_in">setTimeout</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只需将 async1 的执行理解为</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async2</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<video src="./eventloop_demo.mp4" preload="metadata" controls playsinline poster>Sorry, your browser does not support the video tag.</video>

<blockquote>
<p>执行步骤如上所示</p>
</blockquote>
<ul>
<li>开始执行<ul>
<li>首先我们执行同步代码，先打印 <code>script start</code>。</li>
<li>再打印 <code>async2 end</code>，将 <strong>async2.then</strong> 放入微任务队列中。</li>
<li>继续执行，将 <strong>setTimeout</strong> 放入宏任务队列中。</li>
<li>再打印 <code>Promise</code>，将 <strong>Promise.then</strong> 放入微任务队列中。</li>
<li>最后打印 <code>script end</code></li>
</ul>
</li>
<li>执行完成后，检查微任务队列不为空，按照先进先出原则继续执行。<ul>
<li>执行 <strong>async2.then</strong> 打印 <code>async1 end</code></li>
<li>执行 <strong>Promise.then</strong> 打印 <code>promise1</code>，并将 <strong>promise1.then</strong> 放入微任务队列中。</li>
</ul>
</li>
<li>此时检查微任务队列继续不为空<ul>
<li>执行 <strong>promise1.then</strong> 打印 <code>promise2</code></li>
</ul>
</li>
<li>最后执行宏任务队列中的任务<ul>
<li>执行 <strong>setTimeout</strong>，延迟时间到后，将其回调函数放入任务队列中。</li>
</ul>
</li>
<li>执行回调函数<ul>
<li>打印 <code>setTimeout</code></li>
</ul>
</li>
</ul>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout1&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout2&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout3&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout4&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise-setTimeout&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1-setTimeout&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2-setTimeout&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><details>

<summary>先思考再查看答案哦～</summary>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async2 end</span><br><span class="line">Promise</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout3</span><br><span class="line">setTimeout4</span><br><span class="line">promise2-setTimeout</span><br><span class="line">setTimeout2</span><br><span class="line">Promise-setTimeout</span><br><span class="line">promise1-setTimeout</span><br><span class="line">setTimeout1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行步骤</p>
</blockquote>
<ul>
<li>开始执行<ul>
<li>首先我们执行同步代码，先打印 <code>script start</code>。</li>
<li>再打印 <code>async2 end</code>，将 <strong>async2.then</strong> 放入微任务队列中。</li>
<li>继续执行，将 <strong>setTimeout1</strong>、<strong>setTimeout2</strong>、<strong>setTimeout3</strong>、<strong>setTimeout4</strong> 依次放入宏任务队列中。</li>
<li>再打印 <code>Promise</code>，将 <strong>Promise.then</strong> 放入微任务队列中，将 <strong>Promise-setTimeout</strong> 放入宏任务队列中。</li>
<li>最后打印 <code>script end</code></li>
</ul>
</li>
<li>执行完成后，检查微任务队列不为空，按照先进先出原则继续执行。<ul>
<li>执行 <strong>async2.then</strong> 打印 <code>async1 end</code></li>
<li>执行 <strong>Promise.then</strong> 将 <strong>promise1-setTimeout</strong> 放入宏任务队列中，打印 <code>promise1</code>，并将 <strong>promise1.then</strong> 放入微任务队列中。</li>
</ul>
</li>
<li>此时检查微任务队列继续不为空<ul>
<li>执行 <strong>promise1.then</strong> 将 <strong>promise2-setTimeout</strong> 放入宏任务队列中，打印 <code>promise2</code>。</li>
</ul>
</li>
<li>最后执行宏任务队列中的任务<ul>
<li>依次执行【<strong>setTimeout1</strong>、<strong>setTimeout2</strong>、<strong>setTimeout3</strong>、<strong>setTimeout4</strong>、<strong>Promise-setTimeout</strong>、<strong>promise1-setTimeout</strong>、<strong>promise2-setTimeout</strong>】。</li>
<li>等待延迟时间到后，将其回调函数放入任务队列中。</li>
</ul>
</li>
<li>依次执行回调函数<ul>
<li>打印 <code>setTimeout3</code></li>
<li>打印 <code>setTimeout4</code></li>
<li>打印 <code>promise2-setTimeout</code></li>
<li>打印 <code>setTimeout2</code></li>
<li>打印 <code>Promise-setTimeout</code></li>
<li>打印 <code>promise1-setTimeout</code></li>
<li>打印 <code>setTimeout1</code></li>
</ul>
</li>
</ul>
</details>

<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9FdmVudExvb3A=">并发模型与事件循环<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l2ZXR0ZUxhdS9CbG9nL2lzc3Vlcy80">EventLoop<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzY0MjAyMDk0NjA2I2hlYWRpbmctMjU=">Node EventLoop<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MDMzNjUwMQ==">JavaScript 垃圾回收<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzEwL2V2ZW50LWxvb3AuaHRtbA==">阮一峰 EventLoop<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>EventLoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass(Scss)、Less的区别与选择 + 基本使用</title>
    <url>/sass_scss_less/</url>
    <content><![CDATA[<div class="note info no-icon"><p>Sass(Scss)、Less 都是 <strong>CSS 预处理器</strong>，他们定义了一种新的语言，其基本思想是，用一种专门的编程语言为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行 CSS 的编码工作。</p>
</div>
<span id="more"></span>

<h2 id="为什么要使用-CSS-预处理器"><a href="#为什么要使用-CSS-预处理器" class="headerlink" title="为什么要使用 CSS 预处理器"></a>为什么要使用 CSS 预处理器</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul>
<li>CSS 仅仅是一个标记语言，自定义变量的使用不够灵活。</li>
<li>语法不够强大，比如<del>无法嵌套书写</del>（最新的浏览器增加了对 CSS 原生嵌套的支持），导致模块化开发中需要书写很多重复的选择器。</li>
<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li>
</ul>
<h3 id="CSS-预处理器的好处"><a href="#CSS-预处理器的好处" class="headerlink" title="CSS 预处理器的好处"></a>CSS 预处理器的好处</h3><ul>
<li>提供 CSS 层缺失的样式层复用机制</li>
<li>减少冗余代码</li>
<li>提高样式代码的可维护性</li>
</ul>
<h3 id="CSS-预处理器的缺点"><a href="#CSS-预处理器的缺点" class="headerlink" title="CSS 预处理器的缺点"></a>CSS 预处理器的缺点</h3><ul>
<li>开发工作流中多了一个环节，调试也变得更麻烦。</li>
<li>预编译很容易造成后代选择器的滥用</li>
</ul>
<h2 id="何时使用-CSS-预处理器"><a href="#何时使用-CSS-预处理器" class="headerlink" title="何时使用 CSS 预处理器"></a>何时使用 CSS 预处理器</h2><ul>
<li>系统级框架开发或者比较大型复杂的样式设计时</li>
<li>持续维护集成时</li>
<li>复用型组件开发时</li>
</ul>
<h2 id="Sass-Scss-与-Less-对比"><a href="#Sass-Scss-与-Less-对比" class="headerlink" title="Sass/Scss 与 Less 对比"></a>Sass/Scss 与 Less 对比</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><h4 id="Sass-Scss"><a href="#Sass-Scss" class="headerlink" title="Sass/Scss"></a>Sass/Scss</h4><p>&emsp;&emsp;<span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2RvY3VtZW50YXRpb24=">Sass<i class="fa fa-external-link-alt"></i></span>（英文全称：Syntactically Awesome Stylesheets）是一个最初由 Hampton Catlin 设计并由 Natalie Weizenbaum 开发的层叠样式表语言。是一种动态样式语言，Sass 语法属于<code>缩排语法</code>，比 CSS 多出<strong>变量、嵌套、运算、混入(Mixin)、继承、颜色处理、函数</strong>等功能，更容易阅读。<br>&emsp;&emsp;在开发最初版本之后，Weizenbaum 和 Chris Eppstein 继续通过 SassScript 来继续扩充 Sass 的功能。SassScript 是一个在 Sass 文件中使用的小型脚本语言。<strong>Sass 是一个将脚本解析成 CSS 的脚本语言，即 SassScript。</strong><br>&emsp;&emsp;Sass 的<code>缩排语法</code>，对于写惯 CSS 前端的 Web 开发者来说很不直观，也不能将 CSS 代码加入到 Sass 里面，因此 Sass 语法进行了改良，Sass3 就变成了 <strong>Scss(Sassy CSS)</strong> 。与原来的语法兼容，只是用 <code>&#123;&#125;</code> 取代了原来的缩进。所以 Sass 包括两套语法，通常情况下，这两套语法通过 <code>.sass</code> 和 <code>.scss</code> 两个文件扩展名区分开。</p>
<h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><p>&emsp;&emsp;<span class="exturl" data-url="aHR0cHM6Ly9sZXNzY3NzLm9yZy8=">Less<i class="fa fa-external-link-alt"></i></span> 是 CSS 预处理器，也是一种动态样式语言，它为 CSS 增加了<strong>变量、嵌套、运算、混入(Mixin)、函数</strong>等功能，让 CSS 更易维护、方便制作主题与扩充。Less <strong>可以运行在 Node.js、浏览器(支持 IE6+、Webkit、Firefox)和 Rhino 平台上</strong>，网上有很多第三方工具帮助你编译 Less 源码。<br>&emsp;&emsp;本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。Less 并<code>没有丢掉 CSS 原有的语法与特性</code>，更不是用来取代 CSS 的，而是在现有 CSS 语法的基础上，<code>为 CSS 加入动态语言的特性</code>。<br>&emsp;&emsp;Less 以 CSS 语法为基础，又借用了很多我们熟知编程式语言的特性，这对于我们开发人员来讲学习成本几乎可以忽略，它在保留 CSS 语法的基础上扩展了更多实用的功能，为我们提供了一种新的编写样式表的方法，我们可以根据我们的项目特性选择使用 Less 的部分特性，我们只需用很少的成本就可以换了很大的回报。<br>&emsp;&emsp;一句话说就是 Less is more，借助 Less 可以更便捷的进行 Web 开发，Write more！</p>
<h3 id="相同之处"><a href="#相同之处" class="headerlink" title="相同之处"></a>相同之处</h3><ul>
<li>都属于 CSS 预处理器</li>
<li>目的是使得 CSS 开发更灵活和更强大</li>
<li>扩展的 CSS 功能特性基本相同</li>
</ul>
<h3 id="区别之处"><a href="#区别之处" class="headerlink" title="区别之处"></a>区别之处</h3><ul>
<li>Sass 是在服务端处理的，以前是 <strong>Ruby</strong>，现在是 <strong>Dart-Sass</strong> 或 <strong>Node-Sass</strong>，而 Less 是在客户端处理的，需要引入 <code>less.js</code> 来处理 Less 代码输出 CSS 到浏览器，也可以在开发服务器将 Less 语法编译成 CSS 文件，输出 CSS 文件到生产包目录，有 <code>npm less、Less.app、SimpleLess、CodeKit.app</code> 这样的工具，也有在线编译地址。</li>
<li>变量符不一样，Less 是 <code>@</code>，而 Sass 是 <code>$</code>。</li>
<li>Sass 的功能比 Less 强大，基本可以说是一种真正的编程语言。Less 只是一套自定义的语法及一个解析器，为 CSS 加入动态语言的特性。</li>
<li>Less 相对 Sass 清晰明了，安装便捷，易于上手，对编译环境要求比较宽松，适合小型项目。Sass 更适用于复杂或大型项目。</li>
<li>输出设置，Less 没有输出设置，Sass 提供 4 种输出选项：<code>nested/compact/compressed/expanded</code>，输出样式的风格可以有 4 种选择，默认为 <code>nested</code>。</li>
<li>Sass 支持条件语句，可以使用 <code>if...else.../for...while...each循环</code>等，Less 不支持。</li>
<li>Sass 引用的外部文件命名必须以 <code>_</code> 开头，Sass 会认为以 <code>_</code> 文件是一个引用文件，不会将其编译为 CSS 文件。Less 引用外部文件和 CSS 中的 <code>@import</code> 没什么差异。</li>
<li>Less 中的变量运算可以带或不带单位，Sass 需要带单位。</li>
<li>Sass 有工具库 Compass，简单说，Sass 和 Compass 的关系有点像 Javascript 和 jQuery 的关系，Compass 是 Sass 的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了 Sass 的功能。Less 有 UI 组件库 Bootstrap，Bootstrap 是 Web 前端开发中一个比较有名的前端 UI 组件库，Bootstrap 的样式文件部分源码就是采用 Less 语法编写。</li>
</ul>
<h3 id="选择与比较"><a href="#选择与比较" class="headerlink" title="选择与比较"></a>选择与比较</h3><table>
<thead>
<tr>
<th align="center"><strong>类别</strong></th>
<th><strong>Sass/Scss</strong></th>
<th><strong>Less</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">环境</td>
<td>Dart/其他</td>
<td>JavaScript</td>
</tr>
<tr>
<td align="center">使用</td>
<td>复杂</td>
<td>简单(相对而言)</td>
</tr>
<tr>
<td align="center">功能</td>
<td>复杂</td>
<td>简单(相对而言)</td>
</tr>
<tr>
<td align="center">处理</td>
<td>服务端</td>
<td>可以在 Node.js 或浏览器(客户端)运行</td>
</tr>
<tr>
<td align="center">后缀</td>
<td><code>.sass/.scss</code></td>
<td><code>.less</code></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;目前大部分的实现都是随着前端项目一起打包构建，只在学习或演示的时候才区分使用环境，所以不用在意处理机制，以上只是单纯的对比两者本身。<br>&emsp;&emsp;Sass/Scss 与 Less 相比，两者都属于 CSS 预处理器，功能上大同小异，都是使用类似程序式语言的方式书写 CSS，都具有变量、混入、嵌套、函数等特性，最终目的都是方便 CSS 的书写及维护。Less 和 Sass/Scss 互相促进互相影响，只是相比之下 Less 更接近 CSS 语法且更容易使用上手。<br>&emsp;&emsp;因此对于我个人来说，在实际开发中更倾向于选择 Less。</p>
<h2 id="Sass-Scss、Less使用与语法"><a href="#Sass-Scss、Less使用与语法" class="headerlink" title="Sass/Scss、Less使用与语法"></a>Sass/Scss、Less使用与语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="keyword">@width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="keyword">@height</span>: @<span class="attribute">width</span> + <span class="number">10px</span>;</span><br><span class="line"><span class="keyword">@test</span>: left;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: @width;</span><br><span class="line">  <span class="attribute">height</span>: @height;</span><br><span class="line">  <span class="attribute">margin</span>-@&#123;test&#125;: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"></span><br><span class="line">// Sass (老版本 Sass 使用 !，不是 $。)</span><br><span class="line">$blue: <span class="number">#1875e7</span>;　</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$side: left;</span><br><span class="line">$my-radius: <span class="number">5px</span>;</span><br><span class="line"><span class="selector-class">.rounded</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>-#&#123;$side&#125;-radius: $my-radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line">// 所有操作数被转换成相同的单位(乘法和除法不作转换)</span><br><span class="line"><span class="keyword">@conversion-1</span>: <span class="number">5cm</span> + <span class="number">10mm</span>; // 结果是 <span class="number">6cm</span></span><br><span class="line"><span class="keyword">@conversion-2</span>: <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; // 结果是 -<span class="number">1.5cm</span></span><br><span class="line"></span><br><span class="line">// conversion is impossible</span><br><span class="line"><span class="keyword">@incompatible-units</span>: <span class="number">2</span> + <span class="number">5px</span> - <span class="number">3cm</span>; // 结果是 <span class="number">4px</span></span><br><span class="line"></span><br><span class="line">// example with variables</span><br><span class="line"><span class="keyword">@base</span>: <span class="number">5%</span>;</span><br><span class="line"><span class="keyword">@filler</span>: @base * <span class="number">2</span>; // 结果是 <span class="number">10%</span></span><br><span class="line"><span class="keyword">@other</span>: @base + @filler; // 结果是 <span class="number">15%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@base</span>: <span class="number">2cm</span> * <span class="number">3mm</span>; // 结果是 <span class="number">6cm</span></span><br><span class="line"></span><br><span class="line">// 颜色运算</span><br><span class="line"><span class="keyword">@color</span>: #<span class="number">224488</span> / <span class="number">2</span>; //结果是 <span class="selector-id">#112244</span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#112244</span> + <span class="number">#111</span>; // 结果是 <span class="selector-id">#223355</span></span><br><span class="line"></span><br><span class="line">// 为了与 CSS 保持兼容，calc() 并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</span><br><span class="line"><span class="keyword">@var</span>: <span class="number">50vh</span>/<span class="number">2</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> + (@var - <span class="number">20px</span>));  // 结果是 calc(<span class="number">50%</span> + (<span class="number">25vh</span> - <span class="number">20px</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"></span><br><span class="line">// Sass</span><br><span class="line">$<span class="selector-tag">var</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">right</span>: $var * <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-<span class="attribute">bottom</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;header-bottom.png&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"></span><br><span class="line">// Sass</span><br><span class="line">。。。跟上面大同小异。。。</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="comment">/* 一个块注释，源文件与编译后正常默认文件都保留。</span></span><br><span class="line"><span class="comment"> * style comment! </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@var</span>: red;</span><br><span class="line"></span><br><span class="line">// 这一行被注释掉了，仅保留源文件中！</span><br><span class="line"><span class="keyword">@var</span>: white;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"></span><br><span class="line">// Sass</span><br><span class="line"><span class="comment">/* 一个块注释，源文件与编译后正常默认文件都保留。</span></span><br><span class="line"><span class="comment"> * style comment! </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$<span class="selector-tag">var</span>: red;</span><br><span class="line"></span><br><span class="line">// 这一行被注释掉了，仅保留源文件中！</span><br><span class="line">$<span class="selector-tag">var</span>: white;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> 重要注释！压缩模式也会保留</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="混入-Mixin"><a href="#混入-Mixin" class="headerlink" title="混入(Mixin)"></a>混入(Mixin)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line">// <span class="selector-class">.bordered</span> 类所包含的属性就将同时出现在 <span class="selector-id">#menu</span> <span class="selector-tag">a</span> 和 <span class="selector-class">.post</span> <span class="selector-tag">a</span> 中了。</span><br><span class="line">// 注意，你也可以使用 <span class="selector-id">#ids</span> 作为 mixin 使用。</span><br><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"></span><br><span class="line">// Sass</span><br><span class="line"><span class="keyword">@mixin</span> bordered &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="keyword">@include</span> bordered;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="keyword">@include</span> bordered;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="keyword">@min768</span>: ~<span class="string">&quot;(min-width: 768px)&quot;</span>; // 从 Less <span class="number">3.5</span> 开始，可以简写为：<span class="keyword">@min768</span>: (<span class="attribute">min-width</span>: <span class="number">768px</span>);</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="keyword">@media</span> @min768 &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 编译后</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="keyword">@base</span>: #f04615;</span><br><span class="line"><span class="keyword">@width</span>: <span class="number">0.5</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">percentage</span>(@width); // returns `<span class="number">50%</span>`</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">saturate</span>(@base, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">spin</span>(<span class="built_in">lighten</span>(@base, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ui 给到的一般都是 px，可以使用此函数转换。</span><br><span class="line"><span class="selector-class">.rem</span>(<span class="keyword">@name</span>, @px) &#123;</span><br><span class="line">   @&#123;name&#125;: <span class="built_in">unit</span>(@px / <span class="number">100</span>, rem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>(<span class="keyword">@a</span>, @b) &#123;</span><br><span class="line">  <span class="keyword">@width</span>: @a + @b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@my-radius</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="selector-class">.border_radius</span>(<span class="keyword">@v</span>, @h, @<span class="attribute">radius</span>: @my-radius)&#123;</span><br><span class="line">  box-@&#123;v&#125;-@&#123;h&#125;-radius: @my-radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.good</span>&#123;</span><br><span class="line">  <span class="selector-class">.test</span>(<span class="number">20px</span>, <span class="number">30px</span>);</span><br><span class="line">  <span class="selector-class">.border_radius</span>(<span class="attribute">top</span>, <span class="attribute">left</span>);</span><br><span class="line">  <span class="selector-class">.border_radius</span>(<span class="attribute">bottom</span>, <span class="attribute">right</span>, <span class="number">5px</span>);</span><br><span class="line">  <span class="attribute">width</span>: @width; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"></span><br><span class="line">// Sass</span><br><span class="line"><span class="keyword">@function</span> double($n) &#123;</span><br><span class="line">  <span class="keyword">@return</span> $n * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">double</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优雅的动态获取元素数据"><a href="#优雅的动态获取元素数据" class="headerlink" title="优雅的动态获取元素数据"></a>优雅的动态获取元素数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 除了以下方法可使用 less 的 plugin</span></span><br><span class="line"><span class="comment">// https://lesscss.org/features/#plugin-atrules-feature</span></span><br><span class="line"><span class="comment">// less 使用 js （未测试，纯百度到的栗子而已！）</span></span><br><span class="line">.<span class="title function_">calcHeight</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 3.5+ 可省略 ~</span></span><br><span class="line">  @<span class="attr">functions</span>: ~<span class="string">`(function() &#123; </span></span><br><span class="line"><span class="string">    this.calcHeight = function() &#123;</span></span><br><span class="line"><span class="string">      return document.body.clientHeight - document.getElementById(&#x27;test&#x27;).height;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;)()`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// It is hacky way to make this function will be compiled preferentially by less</span></span><br><span class="line"><span class="comment">// resolve error: `ReferenceError: colorPalette is not defined`</span></span><br><span class="line"><span class="comment">// https://github.com/ant-design/ant-motion/issues/44</span></span><br><span class="line">.<span class="title function_">calcHeight</span>();</span><br><span class="line">.<span class="property">test</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="string">`calcHeight()`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者巧妙使用 css 的 var() 函数或者 attr() 函数</span></span><br><span class="line"><span class="comment">// var() 函数必须要获取内联属性，即必须要是在 style 中的属性，且必须要加上 -- 前缀来标明这是一个自定义属性，否则浏览器无法解析。</span></span><br><span class="line"><span class="comment">// attr() 函数需要获取的标签中的属性，也可以是自定义属性, 但是必须要是在标签中的属性。</span></span><br><span class="line"><span class="comment">// &lt;div self-property=&quot;attr-value&quot; style=&quot;--test: &#x27;var-value&#x27;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// attr(self-property) 或 var(--test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以我们就可以曲线救国，实现上面的需求。</span></span><br><span class="line"><span class="comment">// 先在 JS 代码中使用 [document.body.clientHeight - document.getElementById(&#x27;test&#x27;).height] 获取到数据，再填到页面中标签属性或 style 属性中。</span></span><br><span class="line"><span class="comment">// 在 CSS 中定义变量 $test: var(--参数名) 或 attr(参数名);</span></span><br><span class="line"><span class="comment">// 或 @test: var(--参数名) 或 attr(参数名);</span></span><br><span class="line"><span class="comment">// 最后直接使用</span></span><br><span class="line">.<span class="property">test</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: @test; <span class="comment">// Less</span></span><br><span class="line">  <span class="attr">width</span>: $test; <span class="comment">// Sass</span></span><br><span class="line">  <span class="attr">width</span>: <span class="title function_">calc</span>(<span class="number">100</span>% - #&#123;$test&#125;); <span class="comment">// Sass</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  &amp;:<span class="built_in">extend</span>(.inline);</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// OUTPUT</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span>, <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// https://lesscss.org/features/#extend-feature</span><br></pre></td></tr></table></figure>

<h3 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less (利用此特性也可变相实现继承)</span><br><span class="line"><span class="selector-id">#bundle</span>() &#123;</span><br><span class="line">  <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tab</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.citation</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="selector-id">#bundle</span><span class="selector-class">.button</span>();  // 还可以书写为 <span class="selector-id">#bundle</span> &gt; <span class="selector-class">.button</span> 形式</span><br><span class="line">&#125;</span><br><span class="line">// 注意：如果不希望它们出现在输出的 CSS 中，例如 <span class="selector-id">#bundle</span> <span class="selector-class">.tab</span>，请将 () 附加到命名空间后面（例如 <span class="selector-id">#bundle</span>()<span class="selector-class">.tab</span>）。</span><br></pre></td></tr></table></figure>

<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="selector-id">#colors</span>() &#123;</span><br><span class="line">  primary: blue;</span><br><span class="line">  secondary: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: #colors[primary];</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid #colors[secondary];</span><br><span class="line">&#125;</span><br><span class="line">// OUTPUT</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@sizes</span>: &#123;</span><br><span class="line">  mobile: <span class="number">320px</span>;</span><br><span class="line">  tablet: <span class="number">768px</span>;</span><br><span class="line">  desktop: <span class="number">1024px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: @sizes[tablet]) &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="keyword">@var</span>: red;</span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="keyword">@var</span>: white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: @var; // white</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@var</span>: red;</span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: @var; // white</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@var</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Less</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;library&quot;</span>; // <span class="selector-class">.less</span> 可以省略后缀</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test.css&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-if-else"><a href="#Sass-if-else" class="headerlink" title="Sass if-else"></a>Sass if-else</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="attribute">color</span>: red;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $color;</span><br><span class="line">  <span class="keyword">@if</span> $<span class="attribute">color</span> == red &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-for-while-each"><a href="#Sass-for-while-each" class="headerlink" title="Sass for/while/each"></a>Sass for/while/each</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> $i from <span class="number">1</span> to <span class="number">10</span> &#123;</span><br><span class="line">  <span class="selector-class">.border-</span>#&#123;$<span class="selector-tag">i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">border</span>: #&#123;$<span class="selector-tag">i</span>&#125;px solid blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> $i &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;$<span class="selector-tag">i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * $i; &#125;</span><br><span class="line">  $<span class="selector-tag">i</span>: $i - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> $member in a, b, c, d &#123;</span><br><span class="line">  .#&#123;$member&#125; &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/image/#&#123;$member&#125;.jpg&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-继承"><a href="#Sass-继承" class="headerlink" title="Sass 继承"></a>Sass 继承</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class-sub</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .class1;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">120%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wMjk3OTJmMGM5N2Q=">简书<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvc3VwcG9ydC1wbGFuP2ludml0ZV9jb2RlPWdzYzVqZHYwYWNvZw==">https://cloud.tencent.com/developer/support-plan?invite_code=gsc5jdv0acog<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Sass</tag>
        <tag>Scss</tag>
        <tag>Less</tag>
      </tags>
  </entry>
  <entry>
    <title>关于浏览器的那些事儿</title>
    <url>/browser_more/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>东拼西凑了一些浏览器内容(^-^)</p>
</div>
<span id="more"></span>

<p><img data-src="/images/loading.gif" data-original="/browser_more/geng.jpg"></p>
<h2 id="主流浏览器对比与发展"><a href="#主流浏览器对比与发展" class="headerlink" title="主流浏览器对比与发展"></a>主流浏览器对比与发展</h2><ul>
<li>推荐一个<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXg1NHkxQjdSRQ==">短视频介绍<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>浏览器/参数</strong></th>
<th align="center"><strong>厂商</strong></th>
<th align="center"><strong>内核</strong></th>
<th align="center"><strong>JS引擎</strong></th>
<th><strong>其他</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>Chrome</code></td>
<td align="center">Google</td>
<td align="center">Chromium、<br>Blink</td>
<td align="center">V8</td>
<td><code>-webkit-</code></td>
</tr>
<tr>
<td align="center"><code>Safari</code></td>
<td align="center">Apple</td>
<td align="center">Webkit</td>
<td align="center">JScore、<br>SquirrelFish(Nitro)(4.0+)</td>
<td><code>-webkit-</code></td>
</tr>
<tr>
<td align="center"><code>FireFox</code></td>
<td align="center">Mozilla</td>
<td align="center">Gecko</td>
<td align="center">SpiderMonkey(1.0-3.0)、<br>TraceMonkey(3.5-3.6)、<br>JaegerMonkey(4.0+)</td>
<td><code>-moz-</code></td>
</tr>
<tr>
<td align="center"><code>Opera</code></td>
<td align="center">OperaSoftware</td>
<td align="center">Presto、<br>Webkit、<br>Blink</td>
<td align="center">Linear A(4.0-6.1)、<br>Linear B(7.0-9.2)、<br>Futhark(9.5-10.2)、<br>Carakan(10.5-)</td>
<td><code>-o-</code></td>
</tr>
<tr>
<td align="center"><code>IE</code></td>
<td align="center">Microsoft</td>
<td align="center">Trident</td>
<td align="center">JScript(IE9-)、<br>Chakra(IE9+)</td>
<td><code>-ms-</code></td>
</tr>
<tr>
<td align="center"><code>Edge</code></td>
<td align="center">Microsoft</td>
<td align="center">EdgeHTML</td>
<td align="center">Chakra</td>
<td><code>-ms-</code></td>
</tr>
<tr>
<td align="center"><code>新Edge</code></td>
<td align="center">Microsoft</td>
<td align="center">Chromium</td>
<td align="center">V8</td>
<td><code>-webkit-</code></td>
</tr>
<tr>
<td align="center"><code>UC</code></td>
<td align="center">阿里巴巴</td>
<td align="center">U3</td>
<td align="center">U3集成?</td>
<td>同红芯浏览器一样换汤不换药</td>
</tr>
<tr>
<td align="center"><code>360/QQ/搜狗/猎豹</code>、<br><code>百度/2345/傲游/世界之窗</code></td>
<td align="center">见下文</td>
<td align="center">Trident(兼容模式)+Webkit(高速模式)双内核</td>
<td align="center">/</td>
<td>能用就行</td>
</tr>
</tbody></table>
<ol>
<li>Chrome 以前是 Chromium 内核(Chrome 内核)，在 Webkit 基础上修改，但代码可读性更高，比 Webkit 更好用。目前是使用重新升级换代后的 Blink 内核。谷歌还开发了自己的 JS 引擎 V8，使 JS 运行速度极大地提高，<strong>Node.js</strong> 也是以 V8 为底层架构封装。另外我们可以通过在地址栏输入 <code>chrome://version/</code> 来查看浏览器相关信息，通过 <code>chrome://dino</code> 玩小游戏。</li>
<li>Safari 的 Webkit 源自 KHTML，苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。苹果与谷歌冲突又研发使用 Webkit2 内核，谷歌则研发了 Chromium 内核，Webkit 也算是苹果为业界做出的最大贡献。</li>
<li>FireFox 的 Gecko 内核俗称 Firefox 内核，代码完全公开，可开发程度高，全世界的程序员都可为其编写代码，增加其功能。还有一个 JS 引擎 Rhino，也是由Mozilla基金会管理，虽然最终被废弃，但其开放源代码，完全以Java编写。</li>
<li>Opera 最早自己研发 Presto，后面用 Webkit，最后与谷歌一起发布使用 Blink，然后因用户体验下降逐渐衰落。 </li>
<li>IE 是微软和 Spyglass 合作开发，随 Windows 绑定抢占市场，并且只能在 Windows 使用也不开源。</li>
<li>Edge 原名叫斯巴达，后改名 Edge，2015 年 3 月发布第一个预览版。微软计划在 Windows 中完全淘汰 Internet Explorer 后，为 Edge 添加 “IE 模式”，该模式允许用户在 Edge 内使用 IE 内核重新加载网页。</li>
<li>新 Edge 是微软妥协下的产物，2018 年 12 月宣布新 Edge 将基于 Chromium 内核开发，正式版于 2020 年 1 月发布。可以通过 <code>edge://version/</code> 来查看浏览器版本信息，通过 <code>edge://surf/</code> 可以玩离线小游戏。</li>
<li>UC 浏览器的 U3 内核本质是基于开源内核 Webkit 开发，也有说是基于 Gecko 内核与 Trident 内核开发的。</li>
<li>众多国产浏览器的厂商分别为360安全、Tencent、搜狗信息、豹好玩科技、Baidu、二三四五、网际傲游、凤凰工作室。这些浏览器适合需要经常访问那种古老系统的用户(兼容模式)</li>
</ol>
<p><img data-src="/images/loading.gif" data-original="/browser_more/browser_history.png"></p>
<blockquote>
<p>补充：还有一个 JS 引擎 - KJS，KDE 的 ECMAScript／JavaScript 引擎，最初由哈里·波顿开发，用于 KDE 项目的 Konqueror 网页浏览器中。</p>
</blockquote>
<h2 id="浏览器的原理"><a href="#浏览器的原理" class="headerlink" title="浏览器的原理"></a>浏览器的原理</h2><h3 id="浏览器程序结构"><a href="#浏览器程序结构" class="headerlink" title="浏览器程序结构"></a>浏览器程序结构</h3><ul>
<li>用户界面(User Interface) - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口（显示页面），其他部分都属于用户界面。</li>
<li>浏览器引擎(Browser Engine) - 在用户界面和渲染引擎之间传送指令。</li>
<li>渲染引擎(Rendering Engine) - 显示（渲染）请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li>
<li>网络(NetWorking) - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。</li>
<li>JavaScript 解释器(JavaScript Interpreter)。用于解析和执行 JavaScript 代码。</li>
<li>用户界面后端(UI Backend) - 用于绘制基本的窗口小部件，比如组合框和窗口。公开了与平台无关的通用接口，在底层使用操作系统的用户界面方法。</li>
<li>数据存储(Data Persistence) - 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/browser_more/browser_a.png"></p>
<h3 id="浏览器程序结构发展"><a href="#浏览器程序结构发展" class="headerlink" title="浏览器程序结构发展"></a>浏览器程序结构发展</h3><ul>
<li>最早的浏览器上单进程结构，页面线程执行页面渲染，JS 线程执行 JS 代码等等，但是只要其中一个线程出问题，可能整个程序就崩溃了。<ul>
<li>例如：浏览器的一个标签页卡死，那么整个浏览器都无法使用，导致应用程序极其不稳定。</li>
<li>单进程是可以共享数据的，所以并不安全。</li>
<li>由于各个线程负责的任务过多，使用起来也并不流畅。</li>
</ul>
</li>
<li>为了解决这些问题，现代浏览器使用了多进程结构。可分为浏览器进程、网络进程、缓存进程、GPU 进程、渲染器进程、插件进程。<ul>
<li>浏览器进程：控制用户界面，协调其他进程工作。</li>
<li>网络进程：发起接收网络请求</li>
<li>缓存进程：控制数据缓存</li>
<li>GPU 进程：负责浏览器界面与页面的渲染</li>
<li>渲染器进程：控制 Tab 标签页的渲染，有可能会为每个标签页创建一个渲染进程(由浏览器启动模型决定)。独立每个页面一个进程可以起到进程隔离的作用，每个页面互不干扰。</li>
<li>插件进程：控制使用的插件，Flash等等，不是浏览器安装的插件。</li>
</ul>
</li>
</ul>
<h3 id="渲染主流程"><a href="#渲染主流程" class="headerlink" title="渲染主流程"></a>渲染主流程</h3><p><img data-src="/images/loading.gif" data-original="/browser_more/mainflow.png"></p>
<ol>
<li>浏览器从网络层获取请求的文档内容，然后开始渲染流程。</li>
<li>解析并开始构建 Content Tree（Element -&gt; DOM nodes），同时解析样式数据（外部 CSS 和 Style 元素）。</li>
<li>两者结合构建 Render Tree（渲染树包含带有视觉属性（如颜色和尺寸）的矩形们）。</li>
<li>在渲染树创建后进入 Layout 阶段，给渲染树的每个节点设置在屏幕上的位置信息。</li>
<li>Paint 阶段，通过 UI backend 绘制 Render tree 到屏幕。</li>
</ol>
<blockquote>
<p>注意，渲染过程是渐进式的。浏览器会尽早展示文档内容，即不会在所有 HTML 文档解析完成后才会去构建 Render tree，而是部分内容被解析和展示，并继续解析和展示剩下的。</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/browser_more/webkitflow.png" alt="Webkit"></p>
<p><img data-src="/images/loading.gif" data-original="/browser_more/geckoflow.jpg" alt="Gecko"></p>
<h2 id="浏览器的页面渲染过程"><a href="#浏览器的页面渲染过程" class="headerlink" title="浏览器的页面渲染过程"></a>浏览器的页面渲染过程</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvUGVyZm9ybWFuY2UvSG93X2Jyb3dzZXJzX3dvcms=">参考文章<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<hr>
<ul>
<li>在浏览器地址栏输入 URL</li>
</ul>
<hr>
<ul>
<li>浏览器会启动网络线程来请求 DNS 进行域名解析，最终返回一个 IP 地址。<br><img data-src="/images/loading.gif" data-original="/browser_more/dns.jpg"></li>
</ul>
<hr>
<ul>
<li>一旦获取到服务器IP地址，浏览器就会通过TCP【三次握手】与服务器建立连接。这个机制的是用来让两端尝试进行通信。浏览器和服务器在发送数据之前，通过上层协议 HTTPS 可以协商网络 TCP 套接字连接的一些参数。TCP的【三次握手】技术经常被称为【SYN-SYN-ACK】，更确切的说是 【SYN, SYN-ACK, ACK】，因为通过 TCP 首先发送了三个消息进行协商，开始一个 TCP 会话在两台电脑之间。这意味着服务器之间还要来回发送三条消息，而我们的请求目前尚未发出。<ul>
<li><img data-src="/images/loading.gif" data-original="/browser_more/net_mod.png" alt="OSI与TCP/IP模型"></li>
<li><img data-src="/images/loading.gif" data-original="/browser_more/tcp_hands.png" alt="三次握手"></li>
<li>上图我们可以这样理解，因为 TCP 是一个工作在传输层的可靠数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。<ul>
<li>面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的。</li>
<li>可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端。</li>
<li>字节流：消息是「没有边界」的，所以无论我们消息有多大都可以进行传输。并且消息是「有序的」，当「前一个」消息没有收到的时候，即使它先收到了后面的字节，那么也不能扔给应用层去处理，同时对「重复」的报文会自动丢弃。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJhbm1lbi5jb20vcG9zdHMvMzc1YjlkNGUuaHRtbA==">参考：ibanmen<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>TCP 是面向连接的协议，所以使用 TCP 前必须先建立连接，而建立连接是通过三次握手来进行的，简单解释上图可以是：<ol>
<li>我对你说：我要跟你说话。（此时服务端确认客户端的发送能力没有问题）</li>
<li>你跟我说：我知道你要跟我说话，我们开始说话吧。（此时客户端确认服务端的接收和发送能力都没有问题）</li>
<li>我跟你说：好的，我们开始说话吧。（此时服务端确认客户端的接收能力也没有问题）</li>
</ol>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>TLS/SSL 协商：为了在【HTTPS】上建立安全连接，另一种握手是必须的。更确切的说是 TLS/SSL 协商，它决定了什么密码将会被用来加密通信，验证服务器，这就意味着在进行真实的数据传输之前建立安全连接。在发送真正的请求内容之前还需要三次往返服务器。虽然建立安全连接对增加了加载页面的等待时间，对于建立一个安全的连接来说，以增加等待时间为代价是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。<br><img data-src="/images/loading.gif" data-original="/browser_more/ssl.jpg"></li>
</ul>
<hr>
<ul>
<li>经过上图 8 次往返，浏览器终于可以发出请求。一旦我们建立了到 web 服务器的连接，浏览器就代表用户发送一个初始的 HTTP GET请求，对于网站来说，这个请求通常是一个 HTML 文件。</li>
</ul>
<hr>
<ul>
<li>一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。此时网络线程会通知 UI 线程执行后续操作。<br><img data-src="/images/loading.gif" data-original="./httpflow.jpg" alt="HTTP 信息流"></li>
</ul>
<hr>
<ul>
<li>UI 线程会创建一个渲染器进程来渲染页面，浏览器进程会通过 IPC 管道将数据传递给渲染器进程。</li>
</ul>
<hr>
<ul>
<li>渲染器进程的主线程接收到数据(HTML)，开始渲染解析。</li>
</ul>
<hr>
<ul>
<li>通过标签词法解析，将内容解析为多个标记，然后构造 DOM 树，先创建 document 对象，再不断修改，向其中添加各种元素。<ul>
<li>解析引入的 css、js、img 等等，图片与 css 不会阻塞 HTML 的解析，因为不影响 DOM 树的构造。但 <code>&lt;script&gt;</code> 标签会阻塞 HTML 的解析，转而执行其中的 js 代码，因为浏览器不清楚此 js 代码是否有改变 DOM 结构，所以先行执行。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>构建 DOM 树后，主线程开始解析 css 并确定每个 DOM 节点的样式，即使我们没写样式，每个浏览器都有自己的样式表。</li>
</ul>
<hr>
<ul>
<li>构建 LayoutTree，通过 DOM 树和样式生成 LayoutTree，即确定每个节点的位置。LayoutTree 的每个节点都记录了自己的坐标与边框尺寸等。<ul>
<li>DOM 树与 Layout 树并不是对应的，设置了 <code>display:none;</code> 的节点是不会在 Layout 树中。</li>
<li>有内容显示的伪元素节点不会出现在 DOM 树中，但会出现在 Layout  树中，因为 DOM 是通过 HTML 解析的，而伪元素是通过样式产生的。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>渲染器进程的主线程遍历 LayoutTree 确定各个节点的绘制顺序，创建一个绘制记录表（Paint Record）。比如 <code>z-index</code> 值大的元素一般都是最后绘制等等。<br><img data-src="/images/loading.gif" data-original="/browser_more/mainflow.png"></li>
</ul>
<hr>
<ul>
<li>渲染器进程的主线程再遍历 LayoutTree 生成 Layer Tree。</li>
</ul>
<hr>
<ul>
<li>渲染器进程的主线程将 Layer Tree 与绘制顺序表一起传给合成器线程。<ol>
<li>合成器线程按规则进行分图层，并把图层生成更小的图块(tiles)再传递给栅格线程进行栅格化。</li>
<li>栅格化完成后返还给合成器线程 draw quads 图块信息(每图块的信息与位置等)。</li>
<li>合成器线程根据这些 draw quads 信息用 frame 合成器将合成一个合成器帧。</li>
<li>再通过 IPC 管道将此合成器帧传递给浏览器进程。</li>
<li>浏览器进程收到这帧的图像后传递给 GPU，GPU 渲染到页面上。</li>
</ol>
<ul>
<li>当你滚动页面时又会重新生成合成器帧，再次渲染到页面上。</li>
<li>当我们改变元素位置或尺寸属性时，会重新进行样式计算、布局、绘制等后面所有流程(重排-reflow)。</li>
<li>当我们只改变颜色这种属性时，不会引起重新触发布局，会触发样式计算与绘制(重绘-repaint)。</li>
<li>因为 JS 也是在主线程运行，所以尽量不要高频触发重绘重排，毕竟布局、绘制也是在占用主线程，高频触发重绘重排会导致页面掉帧。</li>
<li>所以尽量减少重绘重排，可以转而使用 CSS3 的 transform 动画来达到效果(会直接运行合成器线程)，这些是不会占用主线程的，能够避免重绘重排与 js 执行抢夺主线程导致页面卡顿掉帧的问题。</li>
<li>在移动端使用 3D 转换可以优化性能。如果设备有 3D 加速引擎 GPU 可以提高性能，2D 转换是无法调用 GPU，2D 是靠的 CPU。</li>
<li>也可以利用 <code>requestAnimationFrame()</code> API，利用浏览器的空闲时间来优化，React Fiber 就是使用此 API，他会将主线程的任务分散到每一帧的间隔，从而不影响动画的流程。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>收到全部内容之后可以选择断开(根据 Connection 请求头，若为 keep-alive 则保持。)与服务器之间的 TCP 连接。<ul>
<li>我对你说：好了，我不想跟你说话了，再见。（客户端发送关闭连接请求给服务端）</li>
<li>你对我说：好的，那我要跟你再见啦。（服务端确认客户端的请求）</li>
<li>你对我说：现在我要跟你再见了，你知道了吗。（服务端请求关闭连接）</li>
<li>我对你说：我知道了，再见！（客户端确认请求）<br><img data-src="/images/loading.gif" data-original="/browser_more/tcp_over.jfif" alt="四次挥手"></li>
</ul>
</li>
</ul>
<hr>
<h2 id="浏览器页面的优化"><a href="#浏览器页面的优化" class="headerlink" title="浏览器页面的优化"></a>浏览器页面的优化</h2><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li>减少 DNS 查找（使用 cdn 等）</li>
<li>js 延迟加载或异步加载</li>
<li>尽量使用 link，减少使用 @import，import 是最后挂载的。</li>
<li>减少 HTTP 请求（CSS Sprite、合并 css、合并 js 等等）</li>
<li>将 html/css/js/img 等文件压缩</li>
<li>开启 gzip 模块</li>
<li>善于开启并利用缓存，从缓存中读取图片与 html/css/js 等。</li>
<li>添加 Expires 头缓存<ul>
<li>页面的初次访问者会进行很多 HTTP 请求，但是通过使用一个长久的 Expires 头，可以使这些组件被缓存，下次访问的时候，就可以减少不必要的 HTPP 请求，从而提高加载速度。<ul>
<li>Web 服务器通过 Expires 头告诉客户端可以使用一个组件的当前副本，直到指定的时间为止。</li>
<li>例如：<code>Expires: Fri, 18 Mar 2016 07:41:53 GMT</code></li>
<li>Expires 缺点: 它要求服务器和客户端时钟严格同步，过期日期需要经常检查。</li>
<li>HTTP1.1 中引入 Cache-Control 来克服 Expires 头的限制，使用 max-age 指定组件被缓存多久。</li>
<li><code>Cache-Control: max-age=12345600</code></li>
<li>若同时制定 Cache-Control 和 Expires，则 max-age 将覆盖 Expires 头。</li>
</ul>
</li>
</ul>
</li>
<li>HTML 代码优化<ul>
<li>使用语义化的标签，代码清晰简洁。</li>
<li>使用 W3C 标准书写闭合小写的标签。</li>
<li>避免使用空请求，包括空的 href 链接、空 src 链接。空链接本身无法请求成功，因此会把一个 HTTP 请求拖到超时，而且空链接会阻塞页面中其他资源的下载进程，会拖慢页面加载速度。</li>
<li>根据项目大小，选择主要使用 class 还是 id。id 选择器优先级最高，访问速度最快。但是在 html 中每声明一个 id，就会在 js 底层声明一个全局变量，而全局变量的增多，将会拖慢 js 中变量遍历的效率，推荐项目小可以用 id，项目大少用 id。</li>
<li>预先设定图片与 table 大小，避免缩放。在页面加载过程中，图片最后加载，若不对图片预设大小，当图片加载完成后，将会引起大量的重排，将会浪费浏览器资源及拖慢页面加载速度。</li>
<li>尽量减少 DOM 元素的数量与层级。解析 HTML 时，标签的数量越多，标签的层级越深，浏览器解析构建 DOM 树的时间就越长，应尽可能的减少 DOM 元素的数量和层级。</li>
<li>尽量避免使用 table 标签。浏览器对 table 标签的解析是全部生成后再一次性绘制的，因此会造成表格位置较长时间的空白，推荐使用 ul 及 li 标签绘制表格。</li>
<li>使用异步加载 iframe 标签。浏览器加载 iframe 标签时，会阻塞父页面渲染树的构建及 HTTP 请求，因此尽量使用异步加载 iframe。</li>
</ul>
</li>
<li>CSS 代码优化<ul>
<li>禁止使用样式表达式，它的解析速度较慢，而且运算次数远比我们想象的要大，随意动动鼠标就能轻松达到上万次运算，会对页面性能造成影响。<ul>
<li>例如：<code>#myDiv&#123;width: expression(document.body.offsetWidth-110+&quot;px&quot;);&#125;</code>。</li>
</ul>
</li>
<li>优化关键选择器，去掉无效的父级选择器，尽量少在选择器末尾使用通配符。大多数人都认为，浏览器对 CSS 选择器的解析式从左往右进行的，但是其实是从右到左执行的。</li>
<li>减少无效代码，注意公用样式。</li>
</ul>
</li>
<li>JS 代码优化<ul>
<li>多个 js 变量声明合并。</li>
<li>不使用 eval 函数，不安全，性能消耗严重。</li>
<li>使用事件代理绑定事件，如将事件绑定到 body 上进行代理，利用冒泡原理将事件加到父级上，能够给动态增加的元素进行数据绑定。</li>
<li>避免频繁的操作 DOM 节点，使用 innerHTML 代替，从而减少重绘和重排。</li>
<li>减少全局变量，尽量使用局部变量。js 中全局变量运算速率远低于局部变量，速度差异达到上百倍，且全局变量越多，全局变量的查找速率便越慢。</li>
<li>减少 js 对 css 样式的修改从而减少重绘和重排。</li>
<li>减少 ajax 请求，常用数据存本地。</li>
</ul>
</li>
<li>LazyLoad Images</li>
</ul>
<h3 id="兼容性优化"><a href="#兼容性优化" class="headerlink" title="兼容性优化"></a>兼容性优化</h3><ul>
<li>HTML5 新的语义标签在低版本的老 IE 浏览器中存在兼容性问题，可以引入第三方解析库。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <a href="/cssmore">Reset CSS</a> 来统一浏览器样式</li>
<li>不用兼容 IE 时，直接<a href="/ietest">排除掉</a>。</li>
<li>写 CSS3 新样式属性时，加浏览器前缀兼容早期浏览器。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span></span><br><span class="line">transform</span><br><span class="line">transtion</span><br><span class="line">animation</span><br><span class="line">border-radius</span><br><span class="line">box-shadow</span><br><span class="line">flex</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>避免使用不兼容的 js 代码（时间处理问题、屏幕宽高问题、event 事件问题、DOM 节点问题、事件传播问题、阻止默认事件问题、鼠标滚轮滚动事件问题等等）。</li>
<li>鼠标指针 <code>cursor: hand;</code> 只有 IE 浏览器识别，其他浏览器不识别。统一使用 <code>cursor: pointer;</code></li>
<li>超链接访问过后 hover 样式就不出现的问题，需要注意伪类顺序 <code>link-visited-hover-active</code>。</li>
<li>css hack</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: yellow0; // <span class="number">0</span> ie8</span><br><span class="line">+<span class="attribute">background-color</span>: pink; // + ie7</span><br><span class="line">_background-<span class="attribute">color</span>: orange; // _ ie6</span><br></pre></td></tr></table></figure>

<ul>
<li>使用一个功能之前判断浏览器是否支持，比如使用 ajax 要判断是否支持 XMLHttpRequest，IE6 之前不支持。还有使用本地存储、通知弹窗等 HTML5 新特性时更须注意。</li>
</ul>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUI1JThGJUU4JUE3JTg4JUU1JTk5JUE4JUU1JUJDJTk1JUU2JTkzJThFJUU2JUFGJTk0JUU4JUJFJTgzXyhIVE1MKQ==">参考 HTML 引擎<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCVFNSVCQyU5NSVFNiU5MyU4RQ==">参考 JavaScript 引擎<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHRtbDVyb2Nrcy5jb20vemgvdHV0b3JpYWxzL2ludGVybmFscy9ob3dicm93c2Vyc3dvcmsv">参考浏览器原理<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>Web优化</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基于 Ajax 的 HTTP 请求工具封装</title>
    <url>/xhttp_js/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>Web 端基于 Ajax/Axios 封装的一个 HTTP 请求工具(XHttp)，方便全局请求管理与使用。<br>使用 <code>TypeScript + Axios + Rollup.js</code> 编写。</p>
</div>
<span id="more"></span>

<h2 id="介绍-V1-4-3"><a href="#介绍-V1-4-3" class="headerlink" title="介绍 (V1.4.3)"></a>介绍 (V1.4.3)</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteGh0dHA=">XHttp<i class="fa fa-external-link-alt"></i></span> 是一个基于 <code>axios</code> 二次封装的 HTTP 请求工具，可以让你在项目中使用 <code>http</code> 请求时更加简单，更加通用灵活，更加高效统一，且易于全局管理。</p>
</blockquote>
<hr>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>兼容 <code>axios</code></li>
<li>基础请求封装使用</li>
<li>请求、响应、错误拦截与处理</li>
<li>请求头拦截处理</li>
<li>日志输出，请求完成时的回调(无论是否成功) Hooks。</li>
<li>主动取消请求、取消重复请求、添加请求白名单</li>
<li>请求结果处理，可进行权限管控等等。</li>
<li>请求重试 <code>axios-retry</code></li>
<li>默认错误处理，也可自定义。</li>
<li>提供实例默认配置修改方法</li>
<li>提供常用请求相关方法工具类 <code>XHttpUtils</code> (单例-无需初始化-<code>1.4.0</code> 及以上版本取消-迁移至 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteHh4">js-xxx JavaScript 常用函数库<i class="fa fa-external-link-alt"></i></span>)</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install js-xhttp -S</span><br></pre></td></tr></table></figure>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">XHttp</span>, <span class="title class_">XHttpMethod</span>, <span class="title class_">XHttpUtils</span>, <span class="title class_">Axios</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;js-xhttp&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">XHttp</span>, <span class="title class_">XHttpMethod</span>, <span class="title class_">XHttpUtils</span>, <span class="title class_">Axios</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;js-xhttp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">XHttp</span> <span class="keyword">from</span> <span class="string">&#x27;js-xhttp&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="初始化实例"><a href="#初始化实例" class="headerlink" title="初始化实例"></a>初始化实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">XHttp</span> <span class="keyword">from</span> <span class="string">&quot;js-xhttp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; message, notification &#125; <span class="keyword">from</span> <span class="string">&quot;@/plugins/antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接使用 XHttp，也可以全局初始化一个实例即可，所有配置如下，均为可选参数。也可以直接 XHttp.create(); 初始化。</span></span><br><span class="line"><span class="keyword">const</span> $http = <span class="title class_">XHttp</span>.<span class="title function_">create</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span>, <span class="comment">// 超时时间 default: 30000</span></span><br><span class="line">    <span class="attr">cancelDuplicatedRequest</span>: <span class="literal">true</span>, <span class="comment">// 是否取消重复请求 default: true</span></span><br><span class="line">    <span class="attr">retryConfig</span>: &#123;</span><br><span class="line">      <span class="comment">// 重试配置</span></span><br><span class="line">      <span class="attr">retry</span>: <span class="number">3</span>, <span class="comment">// 次数</span></span><br><span class="line">      <span class="attr">delay</span>: <span class="number">1000</span>, <span class="comment">// 每次重试的基础延迟时间</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">requestHandler</span>: <span class="function">(<span class="params">config: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;requestHandler&quot;</span>, config); <span class="comment">// 请求前的拦截处理 可自行打印日志log</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(config?.<span class="property">cancelRequest</span>); <span class="comment">// 请求取消函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">responseHandler</span>: <span class="function">(<span class="params">response: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 可在此处统一处理返回数据提示</span></span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        message.<span class="title function_">error</span>(response.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">errorHandler</span>: <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 统一错误处理</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">XHttp</span>.<span class="title function_">isCancel</span>(error) &amp;&amp; !error.<span class="property">message</span>?.<span class="title function_">includes</span>(<span class="string">&quot;custom-error&quot;</span>)) &#123;</span><br><span class="line">        notification.<span class="title function_">error</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;error.status&#125;</span>-<span class="subst">$&#123;error.statusText&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">description</span>: <span class="string">`发生错误了 <span class="subst">$&#123;error.data?.msg ?? error?.data?.message ?? <span class="string">&quot;未知错误&quot;</span>&#125;</span>`</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// return Promise.reject(error); // 是否传递错误到外层 不传递则可以免去每次请求去自定义错误处理</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;errorHandler&quot;</span>, error); <span class="comment">// 错误处理 可自行打印日志log</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">setRequestHeaders</span>: <span class="function">(<span class="params">config: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 设置请求头 可以添加 token 等，也可以通过 $http.setAuthToken 来处理</span></span><br><span class="line">      <span class="keyword">return</span> config; <span class="comment">// 返回配置对象，可修改请求头。必须返回一个请求头对象，否则会抛出错误。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">requestFinally</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;requestFinally Hooks&quot;</span>); <span class="comment">// 请求完成时的回调，无论结果如何。</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// axios 配置</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_REQUEST_BASE_URL</span>, <span class="comment">// 根据环境添加 baseURL</span></span><br><span class="line">    <span class="attr">validateStatus</span>: <span class="function">(<span class="params">status: number</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// XHttp 默认的 status 校验规则是全部返回 true</span></span><br><span class="line">      <span class="comment">// 返回 true 则表示成功(resolve)，否则表示失败(reject)。 可以根据 status 自定义</span></span><br><span class="line">      <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $http;</span><br><span class="line"><span class="comment">// 也可直接导出常用的方法 get post put patch delete request 等，也可以导出原 axios 对象、工具类等等。</span></span><br></pre></td></tr></table></figure>

<h3 id="基础请求"><a href="#基础请求" class="headerlink" title="基础请求"></a>基础请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">get</span>(<span class="string">&#x27;/tests&#x27;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">count</span>: <span class="number">20</span> &#125;, &#123;&#125;);</span><br><span class="line"><span class="title class_">XHttp</span></span><br><span class="line">  .<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;test&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;&#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally TEST&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">get</span>(<span class="string">&#x27;/test&#x27;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">count</span>: <span class="number">20</span> &#125;, &#123;&#125;, <span class="literal">true</span>); </span><br><span class="line"><span class="comment">// 白名单不可取消 除非调用 cancelWhiteListRequest()</span></span><br><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">request</span>(<span class="title class_">XHttpMethod</span>.<span class="property">GET</span>, <span class="string">&#x27;/tests&#x27;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">count</span>: <span class="number">20</span> &#125;, &#123;&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">$http.<span class="title function_">get</span>(<span class="string">&#x27;/tests&#x27;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">count</span>: <span class="number">20</span> &#125;, &#123;&#125;);</span><br><span class="line">$http</span><br><span class="line">  .<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;test&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;&#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally TEST&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">$http.<span class="title function_">get</span>(<span class="string">&#x27;/test&#x27;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">count</span>: <span class="number">20</span> &#125;, &#123;&#125;, <span class="literal">true</span>); </span><br><span class="line"><span class="comment">// 白名单不可取消 除非调用 cancelWhiteListRequest()</span></span><br><span class="line">$http.<span class="title function_">request</span>(<span class="title class_">XHttpMethod</span>.<span class="property">GET</span>, <span class="string">&#x27;/tests&#x27;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">count</span>: <span class="number">20</span> &#125;, &#123;&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$http.<span class="title function_">setAuthToken</span>(<span class="string">&#x27;test token&#x27;</span>);</span><br><span class="line">$http.<span class="title function_">setBaseURL</span>(<span class="string">&#x27;http://localhost:666&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($http.<span class="title function_">getInstance</span>().<span class="property">defaults</span>.<span class="property">headers</span>);</span><br><span class="line">$http.<span class="title function_">cancelRequest</span>(<span class="string">&#x27;all&#x27;</span>);</span><br><span class="line">$http.<span class="title function_">cancelWhiteListRequest</span>(<span class="string">&#x27;all white list&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">setAuthToken</span>(<span class="string">&#x27;test token&#x27;</span>);</span><br><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">setBaseURL</span>(<span class="string">&#x27;http://localhost:666&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">XHttp</span>.<span class="title function_">getInstance</span>().<span class="property">defaults</span>.<span class="property">headers</span>);</span><br><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">cancelRequest</span>(<span class="string">&#x27;all&#x27;</span>);</span><br><span class="line"><span class="title class_">XHttp</span>.<span class="title function_">cancelWhiteListRequest</span>(<span class="string">&#x27;all white list&#x27;</span>);</span><br><span class="line"><span class="comment">/* ...... */</span></span><br></pre></td></tr></table></figure>

<h3 id="工具类方法"><a href="#工具类方法" class="headerlink" title="工具类方法"></a>工具类方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">XHttpUtils</span>.<span class="title function_">typeof</span>(&#123;&#125;); <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="comment">/* ...... */</span></span><br></pre></td></tr></table></figure>

<h3 id="XHttpMethod"><a href="#XHttpMethod" class="headerlink" title="XHttpMethod"></a>XHttpMethod</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">XHttpMethod</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   GET: &#x27;GET&#x27;,</span></span><br><span class="line"><span class="comment">//   POST: &#x27;POST&#x27;,</span></span><br><span class="line"><span class="comment">//   PUT: &#x27;PUT&#x27;,</span></span><br><span class="line"><span class="comment">//   DELETE: &#x27;DELETE&#x27;,</span></span><br><span class="line"><span class="comment">//   PATCH: &#x27;PATCH&#x27;,</span></span><br><span class="line"><span class="comment">//   OPTIONS: &#x27;OPTIONS&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="原始-Axios-使用"><a href="#原始-Axios-使用" class="headerlink" title="原始 Axios 使用"></a>原始 Axios 使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;/axios&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="comment">/* ...... */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXhpb3MtaHR0cC5jbi9kb2NzL2ludHJv">Axios 参考文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z">Axios Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="全部-API-列表"><a href="#全部-API-列表" class="headerlink" title="全部 API 列表"></a>全部 API 列表</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGh0dHAvYmxvYi9tYXN0ZXIvZG9jcy9SRUFETUUubWQ=">API Docs<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>此工具类基于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z">axios<i class="fa fa-external-link-alt"></i></span> 二次封装实现</li>
<li>问题反馈可以建 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGh0dHAvaXNzdWVz">Issue<i class="fa fa-external-link-alt"></i></span>，或者提交 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGh0dHAvcHVsbHM=">Pull Request<i class="fa fa-external-link-alt"></i></span>，邮箱：<span class="exturl" data-url="bWFpbHRvOmh4YnBhbmRhb2hAMTYzLmNvbQ==">hxbpandaoh@163.com<i class="fa fa-external-link-alt"></i></span>。</li>
<li><a href="http://a.biugle.cn/">Blog</a></li>
<li>Leo He</li>
<li>更多功能完善中…</li>
</ul>
<h2 id="英文文档"><a href="#英文文档" class="headerlink" title="英文文档"></a>英文文档</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGh0dHAvYmxvYi9tYXN0ZXIvUkVBRE1FLmVuLm1k">README in English<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvanMteGh0dHA=">Github JavaScript_XHttp<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vanMteGh0dHA=">Gitee JavaScript_XHttp<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Web</tag>
        <tag>XHttp</tag>
        <tag>Ajax</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈一下前后端鉴权方式 ^.^</title>
    <url>/about_auth/</url>
    <content><![CDATA[<div class="note success no-icon"><p>虽然本人现在从事前端开发，但是之前一直是 PHP 全栈，所以对前后端鉴权机制也有一定的了解，就找些资料简单记录一下吧。(瞎掰扯～)</p>
</div>
<span id="more"></span>

<h2 id="常见鉴权机制"><a href="#常见鉴权机制" class="headerlink" title="常见鉴权机制"></a>常见鉴权机制</h2><blockquote>
<p>HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息。）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器，由此产生了很多种鉴权方式。</p>
</blockquote>
<ul>
<li><strong>HTTP Basic Authentication</strong></li>
<li><strong>Session-Cookie</strong></li>
<li><strong>Token</strong></li>
<li><strong>OAuth</strong></li>
</ul>
<blockquote>
<p>另外我们要注意区分 <code>Authentication</code> 与 <code>Authrization</code>，一个是<strong>认证</strong>一个是<strong>授权</strong>。<code>Authentication</code> 是为了验证你是不是本人，而 <code>Authrization</code> 是为了验证你有没有做某件事情的权限。我们分别举三个例子来说明三种情况让大家对认证和授权的关系有更好的理解。</p>
</blockquote>
<ul>
<li><strong>只认证不授权</strong><ul>
<li>只是登录应用，并不进行其他操作，这时候不需要授权只进行认证。</li>
</ul>
</li>
<li><strong>既认证又授权</strong><ul>
<li>我们使用第三方应用登录的时候，既输入了第三方应用的账号密码来认证，又授权了本应用读取第三方登录应用已经注册了的个人信息数据等。</li>
</ul>
</li>
<li><strong>不认证只授权</strong><ul>
<li>我们点开小程序时，需要获取个人信息，这种时候相当于只授权数据给小程序，并未进行认证，毕竟在应用内部使用小程序，很少有需要再登录认证这种操作。</li>
</ul>
</li>
</ul>
<h2 id="各鉴权机制流程与原理"><a href="#各鉴权机制流程与原理" class="headerlink" title="各鉴权机制流程与原理"></a>各鉴权机制流程与原理</h2><p>&emsp;&emsp;一旦涉及认证授权，必须要考虑的一个问题就是状态管理。所谓的状态管理就是说我们在进行登录之后的一段时间里，不希望每次访问它都需要重新登录。所以开发者必须要考虑怎么样保持用户的登录状态以及设置失效时间。而这个过程需要前后端通力合作来完成。</p>
<ul>
<li>下面就来简单谈一下几种常见的认证和授权方式的流程与原理，本人瞎掰扯，欢迎大佬指点。</li>
</ul>
<h3 id="HTTP-Basic-Authentication"><a href="#HTTP-Basic-Authentication" class="headerlink" title="HTTP Basic Authentication"></a>HTTP Basic Authentication</h3><p>&emsp;&emsp;这种授权方式是浏览器遵守 HTTP 协议实现的基本授权方式，HTTP 协议进行通信的过程中定义了基本认证允许 HTTP 服务器对客户端进行用户身份证的方法。</p>
<blockquote>
<p><strong>基本流程</strong></p>
</blockquote>
<ul>
<li>发送请求：客户端向服务器请求数据，请求的内容可能是一个网页或者是一个 ajax 异步请求，此时假设客户端尚未被验证(服务器验证并判断是否返回 401)，则客户端提供如下请求至服务器。</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Get /index.html HTTP/1.0 </span><br><span class="line">Host: www.google.com</span><br></pre></td></tr></table></figure>

<ul>
<li>服务器返回 401：服务器向客户端发送验证请求代码 401，<code>WWW-Authenticate: Basic realm=&quot;google.com&quot;</code> 这句话是关键，如果没有客户端不会弹出用户名和密码输入界面，服务器返回的数据大抵如下。</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">HTTP/1.0 401 Unauthorised </span><br><span class="line">Server: SokEvo/1.0 </span><br><span class="line">WWW-Authenticate: Basic realm=&quot;google.com&quot;</span><br><span class="line">Content-Type: text/html </span><br><span class="line">Content-Length: xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端弹出窗口：当符合 http1.0 或 1.1 规范的客户端收到 401 返回值时，将自动弹出一个登录窗口，要求用户输入用户名和密码。<ul>
<li>这个时候请求时属于 <code>pending</code> 状态，当用户输入用户名密码的时候客户端会再次发送请求头带 <code>Authorization</code> 的请求。</li>
</ul>
</li>
<li>用户输入用户名和密码：输入密码后，点击提交会将用户名及密码以 <code>Base64</code> 加密方式加密，并将密文放入前一条请求信息中，则客户端发送的第一条请求信息则变成如下内容。</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Get /index.html HTTP/1.0 </span><br><span class="line">Host: www.google.com</span><br><span class="line">Authorization: Basic xxxxxxx(base64 密文)</span><br><span class="line">// 加密过程是浏览器默认的行为，不需要我们人为加密，我们只需要输入用户名密码即可。</span><br></pre></td></tr></table></figure>

<ul>
<li>服务端解密：服务器收到上述请求信息后，将 <code>Authorization</code> 字段后的用户信息取出并解密，将解密后的用户名及密码与用户数据库进行比较验证，如用户名及密码正确，服务器则根据请求，将所请求资源发送给客户端。</li>
</ul>
<hr>
<p><img data-src="/images/loading.gif" data-original="./http_basic_auth.png"></p>
<blockquote>
<p>优点：简单便捷，兼容性好。</p>
</blockquote>
<blockquote>
<p>缺点：未使用 TLS/SSL 的情况下信息容易泄露，不安全；无法注销，只能关闭浏览器或标签页。</p>
</blockquote>
<h3 id="Session-Cookie"><a href="#Session-Cookie" class="headerlink" title="Session-Cookie"></a>Session-Cookie</h3><p>&emsp;&emsp;这种授权方式是利用服务端的 Session 和浏览器(客户端)的 Cookie 来实现的前后端通信认证模式。HTTP 协议是一个无状态的协议，服务器不会知道到底是哪一台浏览器访问了它，因此需要一个标识用来让服务器区分不同的浏览器。cookie 就是这个管理服务器与客户端之间状态的标识。<br>&emsp;&emsp;cookie 的原理是，浏览器第一次向服务器发送请求时，服务器在 response 头部设置 <code>Set-Cookie</code> 字段，浏览器收到响应就会设置 cookie 并存储，在下一次该浏览器向服务器发送请求时，就会在 request 头部自动带上 Cookie 字段，服务器端收到该 cookie 用以区分不同的浏览器。<br>&emsp;&emsp;当然，这个 cookie 与某个用户的对应关系应该在第一次访问时就存在服务器端，这时就需要 session 了。另外 cookie 记得设置过期时间，如果不设置过期时间关闭浏览器就会消失，设置过期时间的话会保存在本地磁盘上。服务端也记得配置 seesion，尤其是分布式服务器在鉴权机制上需要考虑 cookie 共享与 seesion 共享等问题。<br>&emsp;&emsp;session 是会话的意思，浏览器第一次访问服务端，服务端就会创建一次会话，在会话中保存标识该浏览器的信息。它与 cookie 的区别就是 session 是缓存在服务端的，cookie 则是缓存在客户端，他们都由服务端生成，是为了弥补 HTTP 协议无状态的缺陷。每当请求到达服务端时会先校验请求中的用户标识是否存在于 session 中，如果有则表示已经认证成功，否则表示认证失败。</p>
<blockquote>
<p><strong>基本流程</strong></p>
</blockquote>
<ul>
<li>服务器在接受客户端首次访问时在服务器端创建 seesion，然后保存 seesion(我们可以将 seesion 保存在内存中，也可以保存在 redis 中，推荐使用后者。)，然后给这个 session 生成一个唯一的标识字符串 <code>sessionId(sid)</code>。</li>
<li>通过秘钥(自定义)对 sid 进行签名处理，避免客户端修改 sid。(非必需步骤)生成 sid 后把 sid 和用户信息映射起来保存在服务器，最后在响应头中种下 (set-cookie) 这个唯一标识字符串。</li>
<li>浏览器中收到请求响应的时候会解析响应头，然后将 sid 保存在本地 cookie 中，浏览器在下次 http 请求的请求头中会带上该域名下的 cookie 信息。</li>
<li>服务器在之后接受客户端请求时会去解析请求头 cookie 中的 sid，然后根据这个 sid 去找服务器端保存的该客户端的 session 判断该请求是否合法。</li>
<li>在后续请求中，服务器会一直根据 sid 认证，如果验证通过，则继续处理。一旦用户登出，服务端和客户端同时销毁该会话。</li>
</ul>
<hr>
<p><img data-src="/images/loading.gif" data-original="/about_auth/session_cookie.jfif"></p>
<blockquote>
<p>优点：简单便捷，浏览器会自动带上；不需要每次都从数据库取数据比对(如果 sid 不存服务器的话)；可以方便管理用户注销与登录(删除/添加 session)。</p>
</blockquote>
<blockquote>
<p>缺点：脱离浏览器没法用，比如移动端、PC端等；session 存储在服务端，增大了服务器的开销；由于 sid 存在服务端，若被人取到 sid 容易受到跨站请求伪造(CSRF)的攻击，我们可以设置 HttpOnly(脚本无法读取保存在本地的 sid，可以防止 XSS 注入后获取 cookie 中的 sid，从而伪造攻击。)、Secure 设置为 true(使用 HTTPS)来提高安全性；在分布式服务器上，需要共享 session 等配置，会限制负载均衡和集群水平拓展的能力。</p>
</blockquote>
<ul>
<li><p>session 也依赖于 cookie 机制，除了比cookie安全点外，cookie 认证的其他缺点 session 几乎也都有。但也有一点区别，且 session cookie 的鉴权方式比单独使用 cookie 鉴权更多一点。</p>
<ul>
<li>session 比 cookie 安全，session 是存储在服务器端的，cookie 是存储在客户端的。</li>
<li>cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，session 可以存任意数据类型。</li>
<li>cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，session 一般失效时间较短，客户端关闭（默认情况下）或者 session 超时都会失效。</li>
<li>单个 cookie 保存的数据不能超过 4K，session 可存储数据远高于 cookie，但是当访问量过多，会占用过多的服务器资源。</li>
</ul>
</li>
<li><p>cookie 认证的基本流程</p>
</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/about_auth/cookie_auth.jfif"></p>
<h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><h4 id="Token-授权"><a href="#Token-授权" class="headerlink" title="Token 授权"></a>Token 授权</h4><p>&emsp;&emsp;token 又叫令牌，本质上就是一串无意义的字符串，一般放在请求头里，请求头 key 一般是 <code>Authorization</code>，当然也可以和服务端约定好自定义成其他的，只要服务端能够从请求头中拿到 token 就好了。<br>&emsp;&emsp;token 认证的出现最大的特点就是让登录认证不再依赖于 cookie 机制了，将 token 放在了请求头里，那些由于 cookie 机制导致的弊端自然就没有了。</p>
<ul>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码。</li>
<li>验证成功后，服务端会根据自定义规则签发一个 Token，再把这个 Token 发送给客户端。</li>
<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 LocalStorage 里。</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token，放在请求头 <code>Authorization</code> 中。</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据(从数据库查询签发的 Token，并查询用户数据。) ，如果不成功返回 401 错误码，鉴权失败。</li>
</ul>
<hr>
<p><img data-src="/images/loading.gif" data-original="/about_auth/token.jfif"></p>
<blockquote>
<p>优点：token 认证不局限于 cookie 且不受同源策略的影响，可以指定放在请求头某个字段中，可以给应用程序使用；不使用 cookie，攻击者无法猜到使用的 token 在哪，而且用户的 token 存在本地，只有在提交请求时才会放在请求头某个字段中供服务器读取(类似于获取 Referer 这种，脚本无法读取。)，这些就可以一定程度上规避 CSRF 攻击。</p>
</blockquote>
<blockquote>
<p>缺点：加密解密消耗使得 token 认证比 Session-Cookie 更消耗性能；token 比 sessionId 大，更占带宽；token 需要去数据库中查询用户信息，增大数据库压力。</p>
</blockquote>
<h4 id="JWT-JSON-Web-Token"><a href="#JWT-JSON-Web-Token" class="headerlink" title="JWT (JSON Web Token)"></a>JWT (JSON Web Token)</h4><p>&emsp;&emsp;由于每次请求都要用 token 去数据库中查询用户信息，数据库的压力太大了。如果 token 携带了用户信息，不就不需要每次请求都访问数据库查了嘛，可以直接从 token 中直接解析出用户信息以及用户登录状态进行校验，这就是 JWT。给浏览器返回的 token 是一串带着用户信息的加密字符串。<br>&emsp;&emsp;JWT 全称是 Json Web Token。其实就是特殊的 token，理解起来就是携带着用户信息的 token。所以 JWT 认证和 token 认证本质上是一样的。只不过 token 认证的用户信息是从数据库里查的。而 JWT 认证的用户信息是直接从 token 解析出来的。</p>
<h5 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h5><p><img data-src="/images/loading.gif" data-original="/about_auth/jwt_3_parts.jpeg"></p>
<blockquote>
<p><strong>Header</strong></p>
</blockquote>
<ul>
<li>Header 部分是一个 JSON 对象，描述 JWT 的元数据如图所示。<ul>
<li>上面代码中，alg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）。typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。</li>
<li>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>Payload</strong></p>
</blockquote>
<ul>
<li>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br><span class="line">除了官方字段，你还可以在这个部分定义私有字段，比如用户名、用户昵称、权限、部门等等。</span><br><span class="line">注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</span><br><span class="line">这个 JSON 对象也要使用 Base64URL 算法转成字符串。</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Signature</strong></p>
</blockquote>
<ul>
<li>Signature 部分是对前两部分的签名，防止数据篡改。<ul>
<li>首先，需要指定一个密钥（secret）。这个密钥（自定义）只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</li>
<li><code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></li>
<li>算出签名以后，把 <code>Header、Payload、Signature</code> 三个部分拼成一个字符串，每个部分之间用 <code>.</code> 分隔，就可以返回给用户。</li>
</ul>
</li>
</ul>
<h5 id="Base64URL-算法"><a href="#Base64URL-算法" class="headerlink" title="Base64URL 算法"></a>Base64URL 算法</h5><p>&emsp;&emsp;前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。<br>&emsp;&emsp;JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 <code>http://api.example.com/?token=xxx</code>）。<code>Base64</code> 有三个字符 <code>+</code>、<code>/</code>、<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code> 被省略、<code>+</code> 替换成 <code>-</code>，<code>/</code> 替换成 <code>_</code>。这就是 Base64URL 算法。</p>
<h5 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h5><blockquote>
<p><strong>了解以上内容后我们简单说一下流程</strong></p>
</blockquote>
<ul>
<li>基本流程与 token 一致，只是签发的 token 内容不同。</li>
<li>前面我们提到了 JWT 是保存了用户信息的，所以我们需要做的事情主要是以下几点。<ul>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码。</li>
<li>验证成功后，服务端会根据自定义密钥与用户信息签发一个 Token，再把这个 Token 发送给客户端。</li>
<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 LocalStorage 里。</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token，放在请求头 <code>Authorization</code> 中，当然你也可以放到 cookie 中，但是这样不能跨域。<ul>
<li><code>Authorization: Bearer &lt;token&gt;</code></li>
</ul>
</li>
<li>服务器收到后根据 Header 中的加密算法与自定义的密钥，对 Payload 内容进行加密，然后生成结果与 Signature 一致的话，则认证通过，否则表示认证失败。</li>
</ul>
</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/about_auth/jwt.jfif"></p>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><ul>
<li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次(前端若需要使用 token 中的相关信息，请告诉其编码规则。)。</li>
<li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li>
<li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li>
<li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑，但是也有好处，可以方便分布式服务器管理，因为密钥和解析加密逻辑都在代码里面。</li>
<li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li>
<li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li>
<li>由于 JWT 的有效期应该设置得比较短，所以就产生了登录状态信息续签问题。比如设置 token 的有效期为一个小时，那么一个小时后，如果用户仍然在这个应用上，这个时候当然不能指望用户再登录一次。目前可用的解决办法是在每次用户发出请求都返回一个新的 token，前端再用这个新的 token 来替代旧的，这样每一次请求都会刷新 token 的有效期。但是这样，需要频繁的生成 token。另外一种方案是用户每次请求时判断还有多久这个 token 会过期，在 token 快要过期时，返回一个新的 token。如果前端不想每次自己操作请求头，则可以放到 cookie 中，只需 set-cookie 并设置 http-only 与 HTTPS 即可。</li>
<li>用户主动注销时 JWT 并不支持用户主动退出登录，客户端在别处使用 token 仍然可以正常访问。为了支持注销，可以在注销时将该 token 加入到服务器的 redis 黑名单中或者设置数据库存储也可。</li>
</ul>
<h3 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h3><p>&emsp;&emsp;OAuth 协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是 OAuth 的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此 OAuth 是安全的。<br>&emsp;&emsp;同时，任何第三方都可以使用 OAuth 认证服务，任何服务提供商都可以实现自身的 OAuth 认证服务，因而 OAuth 是开放的。我们常见的提供 OAuth 认证服务的厂商有支付宝、QQ、微信、微博、Github等。<br>&emsp;&emsp;OAuth 协议又有 1.0 和 2.0 两个版本。相比较 1.0（存在严重安全漏洞已停用），2.0 版整个授权验证流程更简单更安全，也是目前最主要的用户身份验证和授权方式。</p>
<ul>
<li><strong>与 JWT 区别</strong><ul>
<li>OAuth2.0 是一种授权框架(鉴权的流程理念)，用在使用第三方账号登录的情况，比如使用 QQ 登录某个 app。</li>
<li>JWT 是一种认证协议(鉴权的方法方式)，用在前后端分离，需要简单的对后台 API 进行保护时使用。</li>
<li>无论使用哪种方式切记用 HTTPS 来保证数据的安全性</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>基本流程</strong></p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/about_auth/oauth.png" alt="OAuth2.0"></p>
<ul>
<li>请求认证（认证第三方应用是否合法）：客户端（第三方应用）向 OAuth 服务提供商请求未授权的 RequestToken。即向 <code>RequestToken URL</code> 发起请求。<ul>
<li>OAuth 服务提供商同意使用者的请求，并向其颁发未经用户授权的 <strong>oauth_token</strong> 与对应的 <strong>oauth_token_secret</strong>，并返回给使用者。</li>
</ul>
</li>
<li>用户同意（确认用户是否同意）：使用者向 OAuth 服务提供商请求用户授权的 RequestToken。即向 <code>UserAuthorization URL</code> 发起请求并在请求中携带上一步服务提供商颁发的未授权的 oauth_token 与 oauth_token_secret。<ul>
<li>OAuth 服务提供商通过网页要求用户登录并引导用户完成授权。</li>
</ul>
</li>
<li>换取 AccessToken（提供 AccessToken&amp;RefreshToken(可选) 给第三方应用）：RequestToken 授权后，使用者将向 <code>AccessToken URL</code> 发起请求，将上步授权的 <strong>RequestToken</strong> 换取成 <strong>AccessToken</strong> 与 <strong>RefreshToken</strong>。<ul>
<li>OAuth 服务提供商同意使用者的请求，并向其颁发 AccessToken 与对应的密钥，并返回给使用者。</li>
</ul>
</li>
<li>使用 AccessToken 换取资源（第三方应用通过 AccessToken 获取用户授权的相关资源）：使用者以后就可以使用上步返回的 AccessToken 访问用户授权的资源。<ul>
<li>使用 AccessToken 换取资源失败：使用 <strong>RefreshToken</strong> 换取新的 <strong>AccessToken</strong> 来重新请求资源</li>
</ul>
</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/about_auth/oauth_token.png" alt="栗子"></p>
<p><img data-src="/images/loading.gif" data-original="/about_auth/oauth_refresh_token.png" alt="token 获取与刷新"></p>
<blockquote>
<p>OAuth2.0 提供了四种授权模式，开发者可以根据自己的业务情况自由选择。</p>
</blockquote>
<ol>
<li>授权码授权模式（Authorization Code Grant）</li>
<li>隐式授权模式(简化模式)（Implicit Grant）</li>
<li>密码授权模式（Resource Owner Password Credentials Grant）</li>
<li>客户端凭证授权模式（Client Credentials Grant）</li>
</ol>
<ul>
<li>可参考阮一峰老师的介绍<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzA1L29hdXRoXzJfMC5odG1s">理解 OAuth2.0<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE5LzA0L29hdXRoLWdyYW50LXR5cGVzLmh0bWw=">四种模式<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="单点登录扩展"><a href="#单点登录扩展" class="headerlink" title="单点登录扩展"></a>单点登录扩展</h2><h3 id="JWT-单点登录流程"><a href="#JWT-单点登录流程" class="headerlink" title="JWT 单点登录流程"></a>JWT 单点登录流程</h3><p><img data-src="/images/loading.gif" data-original="/about_auth/jwt_sso.jfif"></p>
<h3 id="Session-单点登录流程"><a href="#Session-单点登录流程" class="headerlink" title="Session 单点登录流程"></a>Session 单点登录流程</h3><p><img data-src="/images/loading.gif" data-original="/about_auth/session_sso.jfif"></p>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3lhb2NoZW5neGlhbi9hcnRpY2xlL2RldGFpbHMvMTE3MTM4Nzkx">一文详解前后端鉴权<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>一般垃圾</category>
      </categories>
      <tags>
        <tag>前后端鉴权</tag>
        <tag>Auth</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈PHP8中的类型定义以及几个新特性</title>
    <url>/php8/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>随着PHP8的发布，作为动态类型语言的PHP也有了更大的进步。<br>此处浅谈一下PHP8中的类型定义以及几个新特性<br>本文仅介绍重点，详细内容可以参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cucGhwLm5ldC8=">PHP 官方<i class="fa fa-external-link-alt"></i></span>。</p>
</div>
<span id="more"></span>

<h2 id="数据类型-Data-Type"><a href="#数据类型-Data-Type" class="headerlink" title="数据类型 (Data Type)"></a>数据类型 (Data Type)</h2><p>数据类型 (Data Type) 用来表示储存的数据类型，也称为型别。</p>
<table>
<thead>
<tr>
<th align="center"><strong>数据类型</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>数据范例</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">bool</td>
<td align="center">布尔</td>
<td align="center">true, false</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">整型</td>
<td align="center">1, 0, -1, …</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">浮点数</td>
<td align="center">0.1, -0.2, …</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">字符串</td>
<td align="center">“hello world！”</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">数组</td>
<td align="center">[“hello”, “world”, 2, 0.1]</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">对象</td>
<td align="center">new Example(), (object) [‘hello’ =&gt; ‘world’]</td>
</tr>
<tr>
<td align="center">resource</td>
<td align="center">资源</td>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhwLm5ldC9tYW51YWwvemgvbGFuZ3VhZ2UudHlwZXMucmVzb3VyY2UucGhw">资源<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">空值</td>
<td align="center">null</td>
</tr>
</tbody></table>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><h3 id="语法：-PHP7-0以上"><a href="#语法：-PHP7-0以上" class="headerlink" title="语法：(PHP7.0以上)"></a>语法：(PHP7.0以上)</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FUNCTION_NAME</span>(<span class="params">VAR_TYPE <span class="variable">$VAR_NAME</span> = VAR_DEFAULT_VALUE, ...</span>): <span class="title">RETURN_TYPE</span></span>&#123;</span><br><span class="line">  <span class="comment">//do somethings</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$VAR</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>FUNCTION_NAME：函数名</li>
<li>VAR_TYPE： 自变量</li>
<li>VAR_NAME： 自变量名称</li>
<li>VAR_DEFAULT_VALUE： 自变量默认值，此自变量可以不被传入，不传入时自动采用默认值</li>
<li>RETURN_TYPE： 返回值<ul>
<li>Nullsafe operator：加上 ? 表示可能会传 null</li>
<li>另外，可以使用 |null 或者现有的 ? 表示法来表示包含 nullable 的联合体。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStrValue</span>(<span class="params"><span class="keyword">string</span>|<span class="literal">null</span> <span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span></span>): ?<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrValue</span>();<span class="comment">//hello</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrValue</span>(<span class="literal">null</span>);<span class="comment">//</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrValue</span>(<span class="string">&#x27;你好&#x27;</span>);<span class="comment">//你好</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStrConcat</span>(<span class="params">?<span class="keyword">string</span> <span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>, <span class="keyword">string</span> <span class="variable">$b</span> = <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;<span class="comment">//默认值为null亦可传null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> . <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrConcat</span>(); <span class="comment">//hello</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrConcat</span>(<span class="literal">null</span>); <span class="comment">//</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrConcat</span>(<span class="literal">null</span>, <span class="string">&#x27;world&#x27;</span>); <span class="comment">//world</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrConcat</span>(<span class="string">&#x27;你好&#x27;</span>, <span class="string">&#x27;世界&#x27;</span>); <span class="comment">//你好世界</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h3><ul>
<li>PHP 属于动态类型程序语言，允许所有变量可以不用带入数据类型，改由系统自动判别。但动态类型程序语言最令人诟病的地方就是过度方便新手开发人员 (可以不理会类型)，而苦了 Web Server (需要判别类型)，也容易造成开发人员因为类型问题产生的语意BUG。</li>
<li>开发人员预先定义好数据类型，可以有效增加程序运行效率。PHP 7.0 起，允许在 function 内约束自变量类型、返回值类型。PHP8起，允许在 function 内约束复合类型。</li>
</ul>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><ul>
<li><p>范例：没有任何自变量也不回传任何东西</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * myFirstFunc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFirstFunc</span>(<span class="params"></span>): <span class="title">void</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;hellowrold&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span>;  <span class="comment">//回传 void 时，写 return 的话，后面不可以带返回值。也可以不写 return </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myFirstFunc</span>();  <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure></li>
<li><p>范例：两字符串相加，回传字符串类型，第二个自变量预设 null，表示可以不传入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * my string concat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $a string A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $b string B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStrConcat</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$a</span>, <span class="keyword">string</span> <span class="variable">$b</span> = <span class="literal">null</span></span>): <span class="title">string</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> . <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrConcat</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);  <span class="comment">// helloworld</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">myStrConcat</span>(<span class="string">&#x27;helloworld&#x27;</span>);      <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure></li>
<li><p>范例：通过数据库，可能会拿到 null，故返回值需检查 null。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $userId user ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object|null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>): ?<span class="title">object</span></span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>范例：复合类型，PHP8后允许自变量、返回值有复合类型。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * getUsers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int|array $userIds user IDs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array|null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"><span class="keyword">int</span>|<span class="keyword">array</span> <span class="variable">$userIds</span></span>): ?<span class="title">array</span></span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>范例：<code>mixed = array|bool|callable|int|float|null|object|resource|string</code> （PHP中不写类型默认为mixed，例如：<code>function getUsers($userId)&#123;&#125;</code>。）<ul>
<li>请注意，mixed也可以用作参数或属性类型，而不仅仅是作为返回类型。</li>
<li>另请注意，由于mixed已包含null，因此不允许使其为空（nullable）。以下代码将触发错误：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fatal error: Mixed types cannot be nullable, null is already part of the mixed type.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"><span class="keyword">mixed</span> <span class="variable">$userId</span></span>): ?<span class="title">mixed</span> </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p>顺带提一下php8中比较喜欢的几个更新</p>
</blockquote>
<h3 id="Match表达式"><a href="#Match表达式" class="headerlink" title="Match表达式"></a>Match表达式</h3><p>你可以称它为switch表达式的大哥，match可以返回值，不需要break语句，可以组合条件，并且不执行任何类型的强制。<br>新的 match 类似于 switch，并具有以下功能：</p>
<ol>
<li>Match 是一个表达式，它可以储存到变量中亦可以直接返回。</li>
<li>Match 分支仅支持单行，它不需要一个 break; 语句。</li>
<li>Match 使用严格比较。<br>如下所示：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="keyword">match</span>(<span class="variable">$input</span>) &#123;</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span> =&gt; <span class="string">&quot;world&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$message</span> = <span class="keyword">match</span> (<span class="variable">$statusCode</span>) &#123;</span><br><span class="line">  <span class="number">200</span>, <span class="number">300</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">  <span class="number">404</span> =&gt; <span class="string">&#x27;not found&#x27;</span>,</span><br><span class="line">  <span class="number">500</span> =&gt; <span class="string">&#x27;server error&#x27;</span>,</span><br><span class="line">  <span class="keyword">default</span> =&gt; <span class="string">&#x27;unknow status code&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Throw表达式"><a href="#Throw表达式" class="headerlink" title="Throw表达式"></a>Throw表达式</h3><p>throw 从语句更改为表达式，从而有可能在许多新位置引发异常：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$callable</span> = <span class="function"><span class="keyword">fn</span>(<span class="params"></span>) =&gt;</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>();</span><br><span class="line"><span class="variable">$triggerError</span> = <span class="function"><span class="keyword">fn</span> (<span class="params"></span>) =&gt;</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyError</span>();</span><br><span class="line"><span class="variable">$foo</span> = <span class="variable">$bar</span>[<span class="string">&#x27;offset&#x27;</span>] ?? <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OffsetDoesNotExist</span>(<span class="string">&#x27;offset&#x27;</span>)</span><br><span class="line"><span class="variable">$condition</span> || <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;$condition must be truthy&#x27;</span>)</span><br><span class="line">  &amp;&amp; <span class="variable">$condition2</span> || <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;$condition2 must be truthy&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="用参数名传递参数而不是参数的顺序"><a href="#用参数名传递参数而不是参数的顺序" class="headerlink" title="用参数名传递参数而不是参数的顺序"></a>用参数名传递参数而不是参数的顺序</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">setcookie</span>(</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">expires</span>: <span class="title function_ invoke__">time</span>() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;expires&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span></span><br><span class="line">];</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(...<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>

<h3 id="构造器属性提升"><a href="#构造器属性提升" class="headerlink" title="构造器属性提升"></a>构造器属性提升</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PHP7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">float</span> <span class="variable">$x</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">float</span> <span class="variable">$y</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">float</span> <span class="variable">$z</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">float</span> <span class="variable">$x</span> = <span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">float</span> <span class="variable">$y</span> = <span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">float</span> <span class="variable">$z</span> = <span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;x = <span class="variable">$x</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;y = <span class="variable">$y</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;z = <span class="variable">$z</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PHP8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">float</span> <span class="variable">$x</span> = <span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">float</span> <span class="variable">$y</span> = <span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">float</span> <span class="variable">$z</span> = <span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串与数字的比较更符合逻辑"><a href="#字符串与数字的比较更符合逻辑" class="headerlink" title="字符串与数字的比较更符合逻辑"></a>字符串与数字的比较更符合逻辑</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PHP7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;foobar&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PHP8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;foobar&#x27;</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="Nullsafe-运算符"><a href="#Nullsafe-运算符" class="headerlink" title="Nullsafe 运算符"></a>Nullsafe 运算符</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PHP7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$country</span> =  <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$session</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable">$user</span> = <span class="variable">$session</span>-&gt;user;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$user</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable">$address</span> = <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">getAddress</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$address</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable">$country</span> = <span class="variable">$address</span>-&gt;country;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PHP8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$country</span> = <span class="variable">$session</span>?-&gt;user?-&gt;<span class="title function_ invoke__">getAddress</span>()?-&gt;country;</span><br></pre></td></tr></table></figure>

<h3 id="对象获取类名"><a href="#对象获取类名" class="headerlink" title="对象获取类名"></a>对象获取类名</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$object</span>::<span class="variable language_">class</span>); <span class="comment">// &quot;stdClass&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="static-return-type"><a href="#static-return-type" class="headerlink" title="static return type"></a>static return type</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withWhatever</span>(<span class="params"><span class="variable">$whatever</span></span>): <span class="title">static</span> </span>&#123;</span><br><span class="line">        <span class="variable">$clone</span> = <span class="keyword">clone</span> <span class="variable language_">$this</span>;</span><br><span class="line">        <span class="variable">$clone</span>-&gt;whatever = <span class="variable">$whatever</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$clone</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP8</tag>
      </tags>
  </entry>
  <entry>
    <title>小玩意分享(源码已上传GitHub/Gitee)</title>
    <url>/github_share/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>&emsp;&emsp;闲暇时间写的一些小玩意分享，我的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gv">Github<i class="fa fa-external-link-alt"></i></span>/<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0v">Gitee<i class="fa fa-external-link-alt"></i></span>。</p>
</div>
<span id="more"></span>

<h2 id="随机格言"><a href="#随机格言" class="headerlink" title="随机格言"></a>随机格言</h2><blockquote>
<p>通过 php 与文件读取实现的随机格言功能，这种小玩意我们就不用数据库啦！</p>
</blockquote>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>首先我们准备一个 txt 文件，用于后续读取。</p>
</blockquote>
<ul>
<li>例如</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">人闲桂花落，夜静春山空。</span><br><span class="line">不如意事常八九，可与言者无二三。</span><br><span class="line">人间有味是清欢</span><br><span class="line">君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">南朝四百八十寺，多少楼台烟雨中。</span><br><span class="line">玲珑骰子安红豆，入骨相思知不知。</span><br><span class="line">枯藤老树昏鸦，小桥流水人家，古道西风瘦马。夕阳西下，断肠人在天涯。</span><br><span class="line">苟利国家生死以，岂因祸福避趋之。</span><br><span class="line">人生自古谁无死，留取丹心照汗青。</span><br><span class="line">我自横刀向天笑，去留肝胆两昆仑。</span><br><span class="line">朱门酒肉臭，路有冻死骨。</span><br><span class="line">星垂平野阔，月涌大江流。</span><br><span class="line">十年生死两茫茫，不思量，自难忘。</span><br><span class="line">桃李春风一杯酒，江湖夜雨十年灯。</span><br><span class="line">飞雪连天射白鹿，笑书神侠倚碧鸳。</span><br><span class="line">从此山水不相逢，莫道彼此长和短。</span><br><span class="line">江南无所有，聊赠一枝春。</span><br><span class="line">茕茕白兔，东走西顾，衣不如新，人不如故。</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><blockquote>
<p>将准备的 txt 文件与以下 php 代码放到我们的服务器上，就可以拥有自己的随机格言啦，至于如何使用就看自己的需求咯！</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 设置一下跨域</span></span><br><span class="line"><span class="variable">$origin</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_ORIGIN&#x27;</span>) ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$allow_origin</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;http://a.biugle.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://a.biugle.cn&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$origin</span>, <span class="variable">$allow_origin</span>)) &#123;</span><br><span class="line"> <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin: &#x27;</span> . <span class="variable">$origin</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果需要允许其他所有域名访问：header(&quot;Access-Control-Allow-Origin: *&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应 methods 类型</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods: GET&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置 content-type</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/plain; charset=UTF-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机从我们准备的 txt 文本文件中读取一行出来</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;./lib/words.txt&quot;</span>; <span class="comment">// 我们的 txt 文件位置</span></span><br><span class="line"><span class="comment">// 判断文件是否存在</span></span><br><span class="line"><span class="variable">$saying</span> = <span class="string">&quot;biugle.cn&quot;</span>; <span class="comment">// 默认输出</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="title function_ invoke__">file</span>(<span class="variable">$file</span>); <span class="comment">// 将文件存放在一个数组中</span></span><br><span class="line">  <span class="variable">$rand</span> = <span class="title function_ invoke__">array_rand</span>(<span class="variable">$data</span>); <span class="comment">// 随机取一条</span></span><br><span class="line">  <span class="variable">$saying</span> = <span class="variable">$data</span>[<span class="variable">$rand</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">chop</span>(<span class="variable">$saying</span>); <span class="comment">// 返回数据，并去除空格。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvb3RoZXJzX3NoYXJlL3RyZWUvbWFpbi9yYW5kX3dvcmRz">源代码地址-Github<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vb3RoZXJzX3NoYXJlL3RyZWUvbWFpbi9yYW5kX3dvcmRz">源代码地址-Gitee<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="随机图片"><a href="#随机图片" class="headerlink" title="随机图片"></a>随机图片</h2><blockquote>
<p>技术实现跟第一个随机格言类似</p>
</blockquote>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>与第一个类似，但是我们除了需要准备 txt 文件之外，还有准备好需要展示的图片。当然你也可以使用网络图片，看自己需求。</p>
</blockquote>
<ul>
<li>txt 栗子</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">http://a.biugle.cn/images/avatar.jpg</span><br><span class="line">http://a.biugle.cn/images/xixi.png</span><br><span class="line">http://a.biugle.cn/images/jienigui.jpg</span><br><span class="line">http://a.biugle.cn/images/yunnan.jpg</span><br><span class="line">http://a.biugle.cn/images/baoerjie.jpg</span><br><span class="line">http://a.biugle.cn/images/ruikeandmodi.jpg</span><br><span class="line">http://a.biugle.cn/images/biugle.png</span><br></pre></td></tr></table></figure>

<h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><ul>
<li>网络图片按星期几显示</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$origin</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_ORIGIN&#x27;</span>) ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$allow_origin</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;http://a.biugle.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://a.biugle.cn&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$origin</span>, <span class="variable">$allow_origin</span>)) &#123;</span><br><span class="line"> <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin: &#x27;</span> . <span class="variable">$origin</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;./lib/avatar.txt&quot;</span>;</span><br><span class="line"><span class="variable">$avatarUrl</span> = <span class="string">&quot;http://a.biugle.cn/images/avatar.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="title function_ invoke__">file</span>(<span class="variable">$file</span>);</span><br><span class="line">  <span class="variable">$avatarUrl</span> = <span class="variable">$data</span>[<span class="title function_ invoke__">date</span>(<span class="string">&quot;w&quot;</span>, <span class="title function_ invoke__">time</span>())]; <span class="comment">// 获取星期几</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span> . <span class="variable">$avatarUrl</span>); <span class="comment">// 非直接输出图片，重定向到图片地址，节省性能。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>本地图片随机模式</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接输出图片，稍微耗费性能。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params"><span class="variable">$imgUrl</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$imgInfo</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$imgUrl</span>);</span><br><span class="line">  <span class="variable">$imgWidth</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$imgInfo</span>);</span><br><span class="line">  <span class="variable">$imgHeight</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$imgInfo</span>);</span><br><span class="line">  <span class="variable">$simg</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="variable">$imgWidth</span>, <span class="variable">$imgHeight</span>);</span><br><span class="line">  <span class="variable">$bg</span> = <span class="title function_ invoke__">imagecolorallocatealpha</span>(<span class="variable">$simg</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">127</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagefill</span>(<span class="variable">$simg</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$bg</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagesavealpha</span>(<span class="variable">$simg</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagecopyresized</span>(<span class="variable">$simg</span>, <span class="variable">$imgInfo</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$imgWidth</span>, <span class="variable">$imgHeight</span>, <span class="variable">$imgWidth</span>, <span class="variable">$imgHeight</span>);</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: image/png&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagepng</span>(<span class="variable">$simg</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagedestroy</span>(<span class="variable">$imgInfo</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagedestroy</span>(<span class="variable">$simg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$origin</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_ORIGIN&#x27;</span>) ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$allow_origin</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;http://a.biugle.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://a.biugle.cn&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$origin</span>, <span class="variable">$allow_origin</span>)) &#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin: &#x27;</span> . <span class="variable">$origin</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">showImg</span>(<span class="string">&#x27;./images/&#x27;</span> . <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>, <span class="number">50</span>) . <span class="string">&#x27;.png&#x27;</span>); <span class="comment">// 使用本地图片，不需要 txt，准备一个文件夹存放图片即可。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvb3RoZXJzX3NoYXJlL3RyZWUvbWFpbi9yYW5kX2ltYWdlcw==">源代码地址-Github<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vb3RoZXJzX3NoYXJlL3RyZWUvbWFpbi9yYW5kX2ltYWdlcw==">源代码地址-Gitee<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="仿-MacOS-鱼眼菜单"><a href="#仿-MacOS-鱼眼菜单" class="headerlink" title="仿 MacOS 鱼眼菜单"></a>仿 MacOS 鱼眼菜单</h2><blockquote>
<p>纯 HTML + CSS + JS 实现的鱼眼菜单效果，建议配合 FontAwesome 图标库使用，效果更佳！</p>
</blockquote>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p><img data-src="/images/loading.gif" data-original="/github_share/dockmenu.gif"></p>
<h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><ul>
<li>html 源码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hans&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://a.biugle.cn/favicon.ico&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DockMenu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;dockmenu.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//unpkg.com/@fortawesome/fontawesome-free@5.15.2/css/all.min.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;margin: 300px auto;&quot;</span>&gt;</span>biugle-macos-dockmenu-menu(fisheye-menu) power by html-css-js-fontawesome<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&#x27;menu-container&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;dock-menu&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#1&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;steam&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-steam fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#2&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;unity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-unity fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#3&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title3&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;weibo&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #ef6a40;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-weibo  fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#4&#x27;</span>  <span class="attr">title</span>=<span class="string">&quot;title4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;weixin&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: green;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-weixin fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#5&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title5&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;zhihu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-zhihu fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#6&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title6&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;youtube&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-youtube fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#7&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title7&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;windows&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-windows fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#8&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title8&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;bootstrap&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #673ab7;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-bootstrap fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#9&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title9&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;php&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #2042ff;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-php fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;#10&#x27;</span> <span class="attr">title</span>=<span class="string">&quot;title10&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">item-title</span>=<span class="string">&quot;twitch&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: chocolate;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menu-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-twitch fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;dockmenu.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $dockMenu = <span class="keyword">new</span> <span class="title function_">dockMenu</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">position</span>: <span class="string">&#x27;bottom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">parent</span>: <span class="string">&#x27;#menu-container&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;.dock-menu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">item</span>: <span class="string">&#x27;.menu-item&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">grow</span>: <span class="number">1.8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">transition</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">defaultMargin</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">alignLimit</span>: <span class="number">1.8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">justifyLimit</span>: <span class="number">1.8</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      $dockMenu.<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其余代码请前往 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvd2ViLW1hY29zLWZpc2hleWUtZG9ja21lbnU=">Github-DockMenu<i class="fa fa-external-link-alt"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vd2ViLW1hY29zLWZpc2hleWUtZG9ja21lbnU=">Gitee-DockMenu<i class="fa fa-external-link-alt"></i></span> 查看。</li>
</ul>
<h2 id="聊天室"><a href="#聊天室" class="headerlink" title="聊天室"></a>聊天室</h2><blockquote>
<p>使用 php + WebSocket 实现的简易聊天室，包括私聊、群聊、弹窗通知、进入退出聊天室提示等功能…</p>
</blockquote>
<h3 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h3><p><img data-src="/images/loading.gif" data-original="/github_share/chatroom.gif"></p>
<h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><ul>
<li>由于代码比较复杂，且有 <code>swoole</code> 与 <code>原生 socket</code> 两个版本，请前往 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvY2hhdHJvb20=">Github-Chatroom<i class="fa fa-external-link-alt"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vY2hhdHJvb20=">Gitee-Chatroom<i class="fa fa-external-link-alt"></i></span> 查看。</li>
</ul>
<h2 id="在线-md-工具"><a href="#在线-md-工具" class="headerlink" title="在线 md 工具"></a>在线 md 工具</h2><blockquote>
<p>利用 <span class="exturl" data-url="aHR0cHM6Ly9wYW5kYW8uZ2l0aHViLmlvL2VkaXRvci5tZC8=">editor.md<i class="fa fa-external-link-alt"></i></span> 插件快速制作自己的在线 md 工具。虽简单，但好用，麻雀虽小，五脏俱全！<a href="./editor.md-1.5.0.zip">本站下载 editor.md</a></p>
</blockquote>
<h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hans&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=0.9&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小贺的在线编辑器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">98%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">98%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/editormd.min.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/editormd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入必要工具 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;doubleam-editormd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">AUTO_STORE_NAME</span> = <span class="string">&#x27;doubleam-md&#x27;</span>; <span class="comment">// 自动保存的 key</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> editor;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        editor = <span class="title function_">editormd</span>(<span class="string">&#x27;doubleam-editormd&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">width</span>: <span class="string">&#x27;98%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="string">&#x27;98%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">syncScrolling</span>: <span class="string">&#x27;single&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">path</span>: <span class="string">&#x27;./lib/&#x27;</span>, <span class="comment">// 插件的 lib 目录</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">emoji</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">taskList</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">tocm</span>: <span class="literal">true</span>, <span class="comment">// Using [TOCM]</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">tex</span>: <span class="literal">true</span>, <span class="comment">// 开启科学公式TeX语言支持，默认关闭。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">flowChart</span>: <span class="literal">true</span>, <span class="comment">// 开启流程图支持，默认关闭。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sequenceDiagram</span>: <span class="literal">true</span>, <span class="comment">// 开启时序/序列图支持，默认关闭。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fontSize</span>: <span class="string">&#x27;18px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">codeFold</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">saveHTMLToTextarea</span>: <span class="literal">true</span>, <span class="comment">// 保存 HTML 到 Textarea</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">searchReplace</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">onload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">fullscreen</span>(); <span class="comment">// 全屏（按ESC取消）</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">tocDropdown</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">tocTitle</span>: <span class="string">&#x27;目录&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;); <span class="comment">// TOC下拉菜单</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">setMarkdown</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">AUTO_STORE_NAME</span>) || <span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">AUTO_STORE_NAME</span>, editor.<span class="title function_">getMarkdown</span>());</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">60000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvb3RoZXJzX3NoYXJlL3RyZWUvbWFpbi9tZF9vbmxpbmU=">源代码地址-Github<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZG91YmxlYW0vb3RoZXJzX3NoYXJlL3RyZWUvbWFpbi9tZF9vbmxpbmU=">源代码地址-Gitee<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>小玩意分享</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 正则表达式</title>
    <url>/js_regexp/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>正则表达式速查与一些使用技巧讲解</p>
</div>
<span id="more"></span>

<h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><blockquote>
<p>RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p><code>/pattern/attributes</code></p>
</blockquote>
<h3 id="创建-RegExp-对象的语法"><a href="#创建-RegExp-对象的语法" class="headerlink" title="创建 RegExp 对象的语法"></a>创建 RegExp 对象的语法</h3><blockquote>
<p><code>new RegExp(_pattern_, _attributes_);</code></p>
</blockquote>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>参数 <code>_pattern_</code> 是一个字符串，指定了正则表达式的模式或其他正则表达式。</li>
<li>参数 <code>_attributes_</code> 是一个可选的字符串，包含属性<code>&quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;</code>，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 <code>m</code> 属性。如果 <code>_pattern_</code> 是正则表达式，而不是字符串，则必须省略该参数。</li>
</ul>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul>
<li>修饰符用于规定正则表达式的部分匹配规则(形式)</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>修饰符</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>i</code></td>
<td>执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td align="center"><code>g</code></td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td align="center"><code>m</code></td>
<td>执行多行匹配。</td>
</tr>
</tbody></table>
<h2 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h2><ul>
<li>方括号用于查找某个范围内的字符</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>表达式</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>[abc]</code></td>
<td>查找方括号之间的任何字符。</td>
</tr>
<tr>
<td align="center"><code>[^abc]</code></td>
<td>查找任何不在方括号之间的字符。</td>
</tr>
<tr>
<td align="center"><code>[0-9]</code></td>
<td>查找任何从 0 至 9 的数字。</td>
</tr>
<tr>
<td align="center"><code>[a-z]</code></td>
<td>查找任何从小写 a 到小写 z 的字符。</td>
</tr>
<tr>
<td align="center"><code>[A-Z]</code></td>
<td>查找任何从大写 A 到大写 Z 的字符。</td>
</tr>
<tr>
<td align="center"><code>[A-z]</code></td>
<td>查找任何从大写 A 到小写 z 的字符。</td>
</tr>
<tr>
<td align="center"><code>[abcd]</code></td>
<td>查找给定集合内的任何字符。</td>
</tr>
<tr>
<td align="center"><code>[^abcd]</code></td>
<td>查找给定集合外的任何字符。</td>
</tr>
<tr>
<td align="center"><code>(red|blue|green)</code></td>
<td>查找任何指定的选项。</td>
</tr>
</tbody></table>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><ul>
<li>元字符（Metacharacter）是拥有特殊含义的字符</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>元字符</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.</code></td>
<td>查找单个字符，除了换行和行结束符。</td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td>查找单词字符。</td>
</tr>
<tr>
<td align="center"><code>\W</code></td>
<td>查找非单词字符。</td>
</tr>
<tr>
<td align="center"><code>\d</code></td>
<td>查找数字。</td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td>查找非数字字符。</td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td>查找空白字符。</td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td>查找非空白字符。</td>
</tr>
<tr>
<td align="center"><code>\b</code></td>
<td>匹配单词边界。</td>
</tr>
<tr>
<td align="center"><code>\B</code></td>
<td>匹配非单词边界。</td>
</tr>
<tr>
<td align="center"><code>\0</code></td>
<td>查找 NUL 字符。</td>
</tr>
<tr>
<td align="center"><code>\n</code></td>
<td>查找换行符。</td>
</tr>
<tr>
<td align="center"><code>\f</code></td>
<td>查找换页符。</td>
</tr>
<tr>
<td align="center"><code>\r</code></td>
<td>查找回车符。</td>
</tr>
<tr>
<td align="center"><code>\t</code></td>
<td>查找制表符。</td>
</tr>
<tr>
<td align="center"><code>\v</code></td>
<td>查找垂直制表符。</td>
</tr>
<tr>
<td align="center"><code>\xxx</code></td>
<td>查找以八进制数 xxx 规定的字符。</td>
</tr>
<tr>
<td align="center"><code>\xdd</code></td>
<td>查找以十六进制数 dd 规定的字符。</td>
</tr>
<tr>
<td align="center"><code>\uxxxx</code></td>
<td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td>
</tr>
</tbody></table>
<h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><ul>
<li>量词用于规定某段内容出现的数量/次数</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>量词</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>n+</code></td>
<td>匹配任何包含<code>至少一个</code> n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>n*</code></td>
<td>匹配任何包含<code>零个或多个</code> n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>n?</code></td>
<td>匹配任何包含<code>零个或一个</code> n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>n&#123;X&#125;</code></td>
<td>匹配包含 X 个 n 的序列的字符串。</td>
</tr>
<tr>
<td align="center"><code>n&#123;X,Y&#125;</code></td>
<td>匹配包含 X 至 Y 个 n 的序列的字符串。</td>
</tr>
<tr>
<td align="center"><code>n&#123;X,&#125;</code></td>
<td>匹配包含至少 X 个 n 的序列的字符串。</td>
</tr>
<tr>
<td align="center"><code>n$</code></td>
<td>匹配任何结尾为 n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>^n</code></td>
<td>匹配任何开头为 n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>hxb(?=n)</code></td>
<td>匹配 hxb 其后紧接指定字符串 n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>hxb(?!n)</code></td>
<td>匹配 hxb 其后没有紧接指定字符串 n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>(?&lt;=n)hxb</code></td>
<td>匹配 hxb 其前有指定字符串 n 的字符串。</td>
</tr>
<tr>
<td align="center"><code>(?&lt;!n)hxb</code></td>
<td>匹配 hxb 其前没有指定字符串 n 的字符串。</td>
</tr>
</tbody></table>
<h2 id="RegExp-对象属性"><a href="#RegExp-对象属性" class="headerlink" title="RegExp 对象属性"></a>RegExp 对象属性</h2><table>
<thead>
<tr>
<th align="center"><strong>属性</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3JlZ2V4cF9nbG9iYWwuYXNw">global<i class="fa fa-external-link-alt"></i></span></td>
<td>RegExp 对象是否具有标志 g。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3JlZ2V4cF9pZ25vcmVjYXNlLmFzcA==">ignoreCase<i class="fa fa-external-link-alt"></i></span></td>
<td>RegExp 对象是否具有标志 i。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX2xhc3RpbmRleF9yZWdleHAuYXNw">lastIndex<i class="fa fa-external-link-alt"></i></span></td>
<td>一个整数，标示开始下一次匹配的字符位置。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX211bHRpbGluZV9yZWdleHAuYXNw">multiline<i class="fa fa-external-link-alt"></i></span></td>
<td>RegExp 对象是否具有标志 m。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3NvdXJjZV9yZWdleHAuYXNw">source<i class="fa fa-external-link-alt"></i></span></td>
<td>正则表达式的源文本。</td>
</tr>
</tbody></table>
<h2 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h2><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3JlZ2V4cF9jb21waWxlLmFzcA==">compile<i class="fa fa-external-link-alt"></i></span></td>
<td>编译正则表达式。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX2V4ZWNfcmVnZXhwLmFzcA==">exec<i class="fa fa-external-link-alt"></i></span></td>
<td>检索字符串中指定的值。返回找到的值，并确定其位置。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3Rlc3RfcmVnZXhwLmFzcA==">test<i class="fa fa-external-link-alt"></i></span></td>
<td>检索字符串中指定的值。返回 true 或 false。</td>
</tr>
</tbody></table>
<h2 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h2><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3NlYXJjaC5hc3A=">search<i class="fa fa-external-link-alt"></i></span></td>
<td>检索与正则表达式相匹配的值。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX21hdGNoLmFzcA==">match<i class="fa fa-external-link-alt"></i></span></td>
<td>找到一个或多个正则表达式的匹配。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3JlcGxhY2UuYXNw">replace<i class="fa fa-external-link-alt"></i></span></td>
<td>替换与正则表达式匹配的子串。</td>
</tr>
<tr>
<td align="center"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3NwbGl0LmFzcA==">split<i class="fa fa-external-link-alt"></i></span></td>
<td>把字符串分割为字符串数组。</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>谈谈 <code>?=</code>、<code>?!</code>、<code>?&lt;=</code>、<code>?&lt;!</code> 量词</li>
</ul>
<blockquote>
<p>前面我们有提到此量词，那么详细说一下他们的使用吧，前面的两个一般是<code>向后匹配</code>，而后面两个是<code>向前匹配</code>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设一种应用场景：我们需要去除一个字符串中的空格，但是如果是字符串中间的空格，我们需要保留，那么我们可以使用此量词来实现。</span></span><br><span class="line"><span class="string">&#x27; 前空格   中间有三个空格保留一个 后空格   &#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)|(\s*$)|\s(?=\s)/g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// &#x27;前空格 中间有三个空格保留一个 后空格&#x27;; </span></span><br><span class="line"><span class="comment">// 其中 \s(?=\s) 表示空格后面还有空格的我们才替换掉。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在看一下第二个量词，表示不等于。</span></span><br><span class="line"><span class="string">&#x27;helloworld helloothers&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/hello(?!world)/</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// &#x27;helloworld others&#x27;; 找到后面不是 world 的 hello 替换掉。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三个与第四个恰恰相反</span></span><br><span class="line"><span class="string">&#x27;helloworld testworld&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(?&lt;=test)world/</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// &#x27;helloworld test&#x27;; 找到前面是 test 的 world 替换掉。</span></span><br><span class="line"><span class="string">&#x27;helloworld testworld&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(?&lt;!hello)world/</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// &#x27;helloworld test&#x27;; 找到前面不是 hello 的 world 替换掉。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>replace</code> 的使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;123@456@789&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/\d+/g</span>, <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="comment">// 没有组的时候，a 为每次匹配的内容，b 为每次匹配到的字符位置，c 为原始字符串。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; a, b, c &#125;);</span><br><span class="line">  <span class="comment">// &#123;a: &#x27;123&#x27;, b: 0, c: &#x27;123@456@789&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// &#123;a: &#x27;456&#x27;, b: 4, c: &#x27;123@456@789&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// &#123;a: &#x27;789&#x27;, b: 8, c: &#x27;123@456@789&#x27;&#125;</span></span><br><span class="line">  <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;test1&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;test2&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;789&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;test3&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">&#125;); <span class="comment">// test1@test2@test3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;123@456@789&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\d+)/g</span>, <span class="keyword">function</span> (<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果我们写成组的时候，a 为每次匹配的内容，b 为每次组的内容，c 为每次匹配到的字符位置，最后 d 为原始字符串。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; a, b, c, d &#125;);</span><br><span class="line">  <span class="comment">// &#123;a: &#x27;123&#x27;, b: &#x27;123&#x27;, c: 0, d: &#x27;123@456@789&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// &#123;a: &#x27;456&#x27;, b: &#x27;456&#x27;, c: 4, d: &#x27;123@456@789&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// &#123;a: &#x27;789&#x27;, b: &#x27;789&#x27;, c: 8, d: &#x27;123@456@789&#x27;&#125;</span></span><br><span class="line">  <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;test1&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;test2&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;789&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;test3&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">&#125;); <span class="comment">// test1@test2@test3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ 分割线 ------------------------------ */</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;123456@qq.com&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/^([\dA-Za-z]\w*)@(qq\.com)$/</span>, <span class="keyword">function</span> (<span class="params">a, b, c, d, e</span>) &#123;</span><br><span class="line">  <span class="comment">// 当有组的时候，a 为匹配字符串，b 为第一个组的内容，c 为第二个组的内容，以此类推。</span></span><br><span class="line">  <span class="comment">// 最后的两个分别为匹配到字符的位置、原始字符串(此处为 d e)。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; a, b, c, d, e &#125;);</span><br><span class="line">  <span class="comment">// &#123;a: &#x27;123456@qq.com&#x27;, b: &#x27;123456&#x27;, c: &#x27;qq.com&#x27;, d: 0, e: &#x27;123456@qq.com&#x27;&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`qq:<span class="subst">$&#123;b&#125;</span>;domain:<span class="subst">$&#123;c&#125;</span>`</span>;</span><br><span class="line">&#125;); <span class="comment">// qq:123456;domain:qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;123456@qq.com&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/^(?&lt;qq&gt;[\dA-Za-z]\w*)@(?&lt;domain&gt;qq\.com)$/</span>, <span class="keyword">function</span> (<span class="params">a, b, c, d, e, f</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果我们给组命名了，那么 a 为匹配字符串，b 为第一个组的内容，c 为第二个组的内容，以此类推。</span></span><br><span class="line">  <span class="comment">// 最后的三个分别为匹配到字符的位置、原始字符串(此处为 d e)、以组名为 key 的对象(此处为 f)。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; a, b, c, d, e, f &#125;);</span><br><span class="line">  <span class="comment">// &#123;a: &#x27;123456@qq.com&#x27;, b: &#x27;123456&#x27;, c: &#x27;qq.com&#x27;, d: 0, e: &#x27;123456@qq.com&#x27;, f: &#123;qq: &#x27;123456&#x27;, domain: &#x27;qq.com&#x27;&#125;&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`qq:<span class="subst">$&#123;b&#125;</span>;domain:<span class="subst">$&#123;c&#125;</span>`</span>;</span><br><span class="line">&#125;); <span class="comment">// qq:123456;domain:qq.com</span></span><br></pre></td></tr></table></figure>


<h2 id="多说一点"><a href="#多说一点" class="headerlink" title="多说一点"></a>多说一点</h2><ul>
<li><code>组</code>的使用</li>
</ul>
<blockquote>
<p>当我们小括号时，每个小括号里面的内容标识一个<code>组</code>，我们可以对<code>组</code>进行命名，甚至引用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设我们匹配一个邮箱号，我们在正则中添加两组小括号。</span></span><br><span class="line"><span class="string">&#x27;123456@qq.com&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/^([\dA-Za-z]\w*)@(qq\.com)$/</span>);</span><br><span class="line"><span class="comment">// 那么对应 组1 的内容则是我们匹配的 qq 部分，组2 则是域名部分。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>); <span class="comment">// 123456; 为啥此处组是从 1 开始而不是从 0 呢？因为若从 0 开始，\0 与 NUL 表示符有冲突，且 0 其实就代表字符串本身，没有意义。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">$2</span>); <span class="comment">// qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们甚至可以这样做，进行组的引用或替换。</span></span><br><span class="line"><span class="string">&#x27;XiongBiao He&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\w+) (\w+)/</span>, <span class="string">&#x27;$2$1&#x27;</span>); <span class="comment">// HeXiongBiao</span></span><br><span class="line"><span class="regexp">/(helloworld) \1/</span>.<span class="title function_">test</span>(<span class="string">&#x27;helloworld helloworld&#x27;</span>); <span class="comment">// true </span></span><br><span class="line"><span class="comment">// \1 代表 组1 的内容，所以以下匹配是错误的。</span></span><br><span class="line"><span class="regexp">/(helloworld) \1/</span>.<span class="title function_">test</span>(<span class="string">&#x27;helloworld helloothers&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们迫不得已写了好几个组，但是只需其中一个，那么我们可以使用 ?: 来表示对该组不记录。</span></span><br><span class="line"><span class="regexp">/^(?:red|green|blue) (#[\w\d]&#123;3,6&#125;)$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;red #F00&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>); <span class="comment">// #F00，本来此处应该是 red，但是因为我们使用了 ?: 操作符来拒绝记录，所以此处变成了 #F00。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们还可以对组进行命名，适用于我们组特别多且难以分辨计算的情况，也方便理解。</span></span><br><span class="line"><span class="string">&#x27;123456@qq.com&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/^(?&lt;qq&gt;[\dA-Za-z]\w*)@(?&lt;domain&gt;qq\.com)$/</span>);</span><br><span class="line"><span class="comment">// 当然组名也可以进行引用，但是需要使用 \k 符号。</span></span><br><span class="line"><span class="regexp">/(?&lt;groupName&gt;helloworld) \k&lt;groupName&gt;/</span>.<span class="title function_">test</span>(<span class="string">&#x27;helloworld helloworld&#x27;</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/loading.gif" data-original="/js_regexp/match_groups.png"></p>
<ul>
<li>使用正则进行 <code>Unicode</code> 转化</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">escape</span>(<span class="string">&#x27;转码&#x27;</span>).<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/%u/gi</span>, <span class="string">&#x27;\\u&#x27;</span>);</span><br><span class="line"><span class="built_in">unescape</span>(<span class="string">&#x27;\u8f6c\u7801&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/\\u/gi</span>, <span class="string">&#x27;%u&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT标签同步与使用SourceTree配置SSH</title>
    <url>/sourcetreessh/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文主要介绍GIT标签同步脚本设置与使用SourceTree更方便的配置SSH<br>基本配置可以参考之前的<a href="http://a.biugle.cn/hexobuild#NO-5">Hexo搭建第5节</a>。</p>
</div>
<span id="more"></span>

<h2 id="GIT标签同步"><a href="#GIT标签同步" class="headerlink" title="GIT标签同步"></a>GIT标签同步</h2><h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li>将 Git 操作脚本建立成 <strong>bat 文件</strong></li>
<li>开启SourceTree，选择<strong>Tools→Options</strong></li>
<li>点选<strong>Add</strong>，新增一个<strong>Custom Action</strong></li>
<li>输入名称，选择刚刚 bat 文件位置</li>
<li>选择要带入的参数 <strong>$REPO</strong></li>
<li>点击 Actions → Custom Actions → 选择自定义的操作</li>
</ol>
<h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><ul>
<li><p>复制下面的代码写成 .bat 文件</p>
</li>
<li><p>勾选（run command silently）</p>
</li>
<li><p>带入参数$REPO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git fetch --prune origin</span><br><span class="line"></span><br><span class="line">git pull --rebase</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> %1</span><br><span class="line"></span><br><span class="line">FOR /F %%i <span class="keyword">in</span> (<span class="string">&#x27;git tag -l&#x27;</span>) DO git tag -d %%i</span><br><span class="line"></span><br><span class="line">git fetch --tags origin</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> %1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Remove all local tags&#x27;</span></span><br><span class="line"></span><br><span class="line">FOR /F %%i <span class="keyword">in</span> (<span class="string">&#x27;git tag -l&#x27;</span>) DO git tag -d %%i</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Fetch tags from origin&#x27;</span></span><br><span class="line"></span><br><span class="line">git fetch --tags origin</span><br></pre></td></tr></table></figure></li>
<li><p>git 同步原生标签命令 SyncTags 可参考<a href="http://a.biugle.cn/git">git指令</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag | xargs git tag -d</span><br><span class="line">git fetch --tags</span><br></pre></td></tr></table></figure>

<ul>
<li>清空本地 stash 自定义指令 ClearStashes</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> %1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Clear all stashes&#x27;</span></span><br><span class="line"></span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<ul>
<li>回退上一次提交 ResetPrevCommit 自定义指令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> %1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Reset previous commit&#x27;</span></span><br><span class="line"></span><br><span class="line">git reset HEAD~</span><br></pre></td></tr></table></figure>

<h3 id="循环更新子模块"><a href="#循环更新子模块" class="headerlink" title="循环更新子模块"></a>循环更新子模块</h3><ul>
<li>此操作可以递归更新每个子模块，但不一定会 rebase 到子模块的最新 master (可能是 git 的 bug)</li>
<li>勾选（run command silently）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update --recursive --remote --rebase</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用SourceTree配置SSH"><a href="#使用SourceTree配置SSH" class="headerlink" title="使用SourceTree配置SSH"></a>使用SourceTree配置SSH</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul>
<li>git使用https协议，每次pull, push都要输入密码，相当的麻烦，使用ssh密钥可以省去每次输密码的步骤。</li>
<li>通过 SSH 联机，压缩传输的数据，可以大幅加快联机传输速度。</li>
<li>把所有传输的数据进行加密,有效防止远程管理过程中的信息泄露问题。</li>
</ul>
<h3 id="设定方法"><a href="#设定方法" class="headerlink" title="设定方法"></a>设定方法</h3><h4 id="产生个人的公钥与私钥"><a href="#产生个人的公钥与私钥" class="headerlink" title="产生个人的公钥与私钥"></a>产生个人的公钥与私钥</h4><p>使用 SourceTree 内建的软件 PuTTY Key Generator 来产生一对密钥（PuTTY Key Generator在安装SourceTree 时一并安装，此处无需另外安装。）</p>
<ul>
<li>打开 SourceTree，点击菜单栏中的 <strong>Tools</strong> ，选取 <strong>Create or Import SSH Keys</strong> 打开 PuTTY Key Generator。</li>
<li>点击 <strong>Generate</strong> 按钮</li>
<li>在key<strong>方框内随机移动鼠标</strong>，直到方框内出现的进度条达到满格状态，此时密钥产生完成。</li>
<li>密钥产生完成后，填写窗口中其他选项。<ul>
<li>Key comment：批注（密钥产生时自动填充）</li>
<li>Key passphrase： 私钥密码，选填项，可不填。</li>
<li>Confirm passphrase： 再次输入密码确认</li>
</ul>
</li>
<li>保存，public key 和 private key 都要保存。<ul>
<li>Save public key： 储存公钥，用于GitHub/Gitee配置。</li>
<li>Save private key： 储存私钥，用于本机连接远程仓库。<ul>
<li>储存时记得档名要连扩展名 <span style="color:red;">.ppk</span> 一并输入，否则不会有扩展名。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="GitHub-Gitee-设定公钥"><a href="#GitHub-Gitee-设定公钥" class="headerlink" title="GitHub/Gitee 设定公钥"></a>GitHub/Gitee 设定公钥</h4><ul>
<li>登入 GitHub/Gitee，进入设置页面。</li>
<li>SSH/GPG 密钥切换页面，再点选管理 SSH密钥的增加密钥按钮。</li>
<li>密钥名称可以自定义也可输入PuTTY Key Generator产生的 Key comment对应的内容，密钥内容处贴上产生出来的公钥内容。</li>
<li>增加密钥按钮进行添加，成功后就可以在屏幕上看到新增的密钥。</li>
</ul>
<h4 id="本机设定私钥"><a href="#本机设定私钥" class="headerlink" title="本机设定私钥"></a>本机设定私钥</h4><ul>
<li>在计算机右下角右击Putty Authentication Agent，选择 <strong>View Keys</strong> 。</li>
<li>在 Pagent Key List 窗口中，再点选 <strong>Add Key</strong> 按钮。</li>
<li>将刚刚产生的私钥添加进来（如果在产生密钥时有输入密码，则此时会要求输入密码。）</li>
<li>添加成功后，会显示刚添加进来的私钥。</li>
</ul>
<h3 id="使用-SourceTree-通过-SSH-联机-GitHub-Gitee"><a href="#使用-SourceTree-通过-SSH-联机-GitHub-Gitee" class="headerlink" title="使用 SourceTree 通过 SSH 联机 GitHub/Gitee"></a>使用 SourceTree 通过 SSH 联机 GitHub/Gitee</h3><ul>
<li>登入GitHub/Gitee，点开一项目，复制要连接的 GitHub/Gitee 上的仓库的 SSH 位置。</li>
<li>执行 SourceTree，在上方工具栏中点选 Clone。</li>
<li>将刚刚找到的仓库位置粘贴，SourceTree 就会自动进行识别连接。</li>
<li>此时会弹出是否要接受的提示框，选 YES。</li>
<li>连接成功后，点击最下面的 Clone 按钮把文件下载下来，就开始使用啦！</li>
</ul>
<h2 id="使用OpenSSH"><a href="#使用OpenSSH" class="headerlink" title="使用OpenSSH"></a>使用OpenSSH</h2><p>此方法可以解决 SourceTree Terminal 无法使用 SSH 的问题</p>
<p>亦可参考之前的<a href="http://a.biugle.cn/hexobuild#NO-5">Hexo搭建第5节</a></p>
<h3 id="建立一对密钥"><a href="#建立一对密钥" class="headerlink" title="建立一对密钥"></a>建立一对密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C [这边可以打mail或者空着也行，这里将按照你提供的邮箱地址，创建一对密钥。]</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (~/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure>
<h3 id="检查用户目录是否已经产生公钥与私钥"><a href="#检查用户目录是否已经产生公钥与私钥" class="headerlink" title="检查用户目录是否已经产生公钥与私钥"></a>检查用户目录是否已经产生公钥与私钥</h3><blockquote>
<p>进入.ssh目录查看是否有密钥文件即可</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~\.ssh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<ol>
<li>打开 .pub 公钥文件，将内容导入到 Gitee/Github SSH设置中。</li>
<li>无 .pub 后缀为私钥文件，保存在本机即可。</li>
<li>在用户目录建立 config 文件，放入.ssh目录。(可略)</li>
</ol>
<blockquote>
<p>config内容</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github/gitee ip</span><br><span class="line">HostName github domain</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">User pandaoh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>确认是否可连接成功,可以输入下面的命令<code>ssh -T git@github.com</code>看看设置是否成功</p>
</blockquote>
<p>如果是下面的反馈：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:<span class="built_in">df</span>:a6:48.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (<span class="built_in">yes</span>/no)?</span><br></pre></td></tr></table></figure>
<p>不要紧张，输入yes就好，然后会显示成功(successful)。</p>
<h3 id="将-Source-Tree-改用-OpenSSH-验证"><a href="#将-Source-Tree-改用-OpenSSH-验证" class="headerlink" title="将 Source Tree 改用 OpenSSH 验证"></a>将 Source Tree 改用 OpenSSH 验证</h3><ol>
<li>Tools→Options→SSH Client Configuration</li>
<li>将 SSH Client 改用 OpenSSH 其他不需调整</li>
</ol>
<h2 id="SourceTree-待办"><a href="#SourceTree-待办" class="headerlink" title="SourceTree 待办"></a>SourceTree 待办</h2><h3 id="跳过登录方法"><a href="#跳过登录方法" class="headerlink" title="跳过登录方法"></a>跳过登录方法</h3><blockquote>
<p>将文件 <code>accounts.json</code>放入 <code>%LocalAppData%\Atlassian\SourceTree\</code>。</p>
</blockquote>
<ul>
<li>accounts.json 内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;<span class="variable">$id</span>&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;<span class="variable">$type</span>&quot;</span>: <span class="string">&quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Authenticate&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;HostInstance&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;<span class="variable">$id</span>&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;<span class="variable">$type</span>&quot;</span>: <span class="string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Host&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;<span class="variable">$id</span>&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;<span class="variable">$type</span>&quot;</span>: <span class="string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;atlassian account&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;BaseUrl&quot;</span>: <span class="string">&quot;https://id.atlassian.com/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;Credentials&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;<span class="variable">$id</span>&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">      <span class="string">&quot;<span class="variable">$type</span>&quot;</span>: <span class="string">&quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Username&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Email&quot;</span>: null</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;IsDefault&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>

<h3 id="配置-SSH（参考以上内容）"><a href="#配置-SSH（参考以上内容）" class="headerlink" title="配置 SSH（参考以上内容）"></a>配置 SSH（参考以上内容）</h3><h3 id="配置自定义-bat（参考以上内容）"><a href="#配置自定义-bat（参考以上内容）" class="headerlink" title="配置自定义 bat（参考以上内容）"></a>配置自定义 bat（参考以上内容）</h3><h3 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_update.png"></p>
<h3 id="设置英文"><a href="#设置英文" class="headerlink" title="设置英文"></a>设置英文</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_lang.png"></p>
<h3 id="取消-Pull-时快速合并"><a href="#取消-Pull-时快速合并" class="headerlink" title="取消 Pull 时快速合并"></a>取消 Pull 时快速合并</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_pull_merge.png"></p>
<h3 id="开启-Force-Push"><a href="#开启-Force-Push" class="headerlink" title="开启 Force-Push"></a>开启 Force-Push</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_force_push.png"></p>
<h3 id="配置个人信息与个性化设置"><a href="#配置个人信息与个性化设置" class="headerlink" title="配置个人信息与个性化设置"></a>配置个人信息与个性化设置</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_user_ssh_setting.png"></p>
<h3 id="Stash-使用教程"><a href="#Stash-使用教程" class="headerlink" title="Stash 使用教程"></a>Stash 使用教程</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_stash_1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_stash_2.png"></p>
<h3 id="使用另一用户信息提交教程"><a href="#使用另一用户信息提交教程" class="headerlink" title="使用另一用户信息提交教程"></a>使用另一用户信息提交教程</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_userinfo_1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_userinfo_2.png"></p>
<h3 id="修改提交信息教程"><a href="#修改提交信息教程" class="headerlink" title="修改提交信息教程"></a>修改提交信息教程</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_edit_msg_1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_edit_msg_2.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_edit_msg_3.png"></p>
<p>&emsp;&emsp;修改完成后，Force Push 到远端即可。</p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_push_onepiece.png"></p>
<h3 id="合并上一条提交教程"><a href="#合并上一条提交教程" class="headerlink" title="合并上一条提交教程"></a>合并上一条提交教程</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_amend_last_commit.png"></p>
<p>&emsp;&emsp;修改完成后，Force Push 到远端即可。</p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_push_onepiece.png"></p>
<h3 id="合并多条-commit"><a href="#合并多条-commit" class="headerlink" title="合并多条 commit"></a>合并多条 commit</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/merge-commit-1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/merge-commit-2.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/merge-commit-3.png"></p>
<p>&emsp;&emsp;修改完成后，Force Push 到远端即可。</p>
<h3 id="SourceTree-解决-rebase-冲突（Git）"><a href="#SourceTree-解决-rebase-冲突（Git）" class="headerlink" title="SourceTree 解决 rebase 冲突（Git）"></a>SourceTree 解决 rebase 冲突（Git）</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_2.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_3.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_4-1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_4-2.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_4-3.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_4-4.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_5.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/rebase_6.png"></p>
<ul>
<li>同理，若 rebase 冲突太多，可以 merge，然后回退上一次版本，重新填写准确的 commit-msg，最后提交所有处理冲突后的文件。</li>
<li>目标分支 rebase 本分支之前，应该先让本分支领先且包含目标分支内容，否则目标分支 rebase 本分支大概率有很多冲突。</li>
</ul>
<h3 id="push-时远端已经更新冲突解决"><a href="#push-时远端已经更新冲突解决" class="headerlink" title="push 时远端已经更新冲突解决"></a>push 时远端已经更新冲突解决</h3><blockquote>
<p>fetch 一下本分支远端的更新，将远端已经更新的代码 rebase 到本地需要 push 的分支即可。</p>
</blockquote>
<h3 id="仓库设置-用户信息无法修改或提交时报-xxx-lock-错误"><a href="#仓库设置-用户信息无法修改或提交时报-xxx-lock-错误" class="headerlink" title="仓库设置-用户信息无法修改或提交时报 xxx.lock 错误"></a>仓库设置-用户信息无法修改或提交时报 <code>xxx.lock</code> 错误</h3><blockquote>
<p>找到当前仓库的 <code>.git</code> 目录，删除所有带 <code>.lock</code> 后缀的文件，重新操作即可。</p>
</blockquote>
<h3 id="跳过-commit-hooks"><a href="#跳过-commit-hooks" class="headerlink" title="跳过 commit hooks"></a>跳过 commit hooks</h3><blockquote>
<p>commit 时加上 <code>--no-verify</code> 或者使用 SourceTree 进行如下操作</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_ignore_hooks.png"></p>
<h3 id="回退版本教程"><a href="#回退版本教程" class="headerlink" title="回退版本教程"></a>回退版本教程</h3><p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_reset.png"></p>
<p>&emsp;&emsp;修改完成后，Force Push 到远端即可。</p>
<p><img data-src="/images/loading.gif" data-original="/sourcetreessh/sourcetree_push_onepiece.png"></p>
<blockquote>
<p>以上教程均为 SourceTree 操作，其中修改过去的或者已提交的 commit 信息，原理基本都是修改了本地仓库的信息，再 Force Push 到远程。至于详细命令可参考 <a href="/git">Git 教程</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于缓存</title>
    <url>/cache/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>缓存的一些知识收集</p>
</div>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>前端缓存一般是指一个资源（如 html、css、js、images 等）存在于服务器和客户端（浏览器）之间的<strong>副本</strong>。</p>
</blockquote>
<p>&emsp;&emsp;缓存会根据进来的请求保存输出内容的副本，当下一个请求来到的时候，如果是<strong>相同的 URL</strong>，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。<br>&emsp;&emsp;比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识<strong>资源已经更新</strong>，浏览器才会再次下载网页。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>减少网络带宽与流量消耗</li>
<li>降低服务器压力</li>
<li>减少网络延迟与请求，提升页面渲染速度。</li>
</ul>
<h2 id="分类与原理"><a href="#分类与原理" class="headerlink" title="分类与原理"></a>分类与原理</h2><h3 id="缓存位置分类"><a href="#缓存位置分类" class="headerlink" title="缓存位置分类"></a>缓存位置分类</h3><ul>
<li>我们可以在 <strong>Chrome 的开发者工具中，通过 Network 中的 Size 列</strong> 看到一个请求最终的处理方式。<ul>
<li>如果显示的是文件大小，就表示是通过网络请求取得。</li>
<li>如果是 <code>from memory cache、from disk cache 或 from ServiceWorker</code>，这些说明是在缓存中读取的。</li>
</ul>
</li>
<li>缓存读取优先级是由上到下寻找，找到即返回，找不到则继续。<ol>
<li>Service Worker</li>
<li>Memory Cache</li>
<li>Disk Cache</li>
<li>网络请求</li>
</ol>
</li>
</ul>
<h4 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h4><blockquote>
<p>Memory Cache 是内存中的缓存，与之相对 Disk Cache 就是硬盘上的缓存。按照操作系统的常理：先读内存，再读硬盘。Disk Cache 因为它的优先级更低一些，将在后面介绍。</p>
</blockquote>
<p>&emsp;&emsp;几乎所有的网络请求资源都会被浏览器自动加入到 Memory Cache 中。但是也正因为数量很大但是浏览器占用的内存不能无限扩大这样两个因素，Memory Cache 注定只能是个“短期存储”。<br>&emsp;&emsp;常规情况下，浏览器的<strong>标签页</strong>关闭后该次浏览的 Memory Cache 便失效，给其他<strong>标签页</strong>腾出位置。而如果极端情况下，例如一个页面的缓存就占用了超级多的内存，那可能在<strong>标签页</strong>没关闭之前，排在前面的缓存就已经失效了。</p>
<blockquote>
<p>Memory Cache 细分一下主要有两块</p>
</blockquote>
<ul>
<li><code>preloader</code></li>
</ul>
<p>&emsp;&emsp;在浏览器打开网页的过程中，会先请求 HTML 然后解析。之后如果浏览器发现了 js、css 等需要解析和执行的资源时，它会使用 CPU 资源对它们进行解析和执行。<br>&emsp;&emsp;在古老的年代(大约 2007 年以前)，<code>(请求 js/css - 解析执行 - 请求下一个 js/css - 解析执行下一个 js/css)</code> 这样的“串行”操作模式在每次打开页面之前进行着。<br>&emsp;&emsp;很明显在解析执行的时候，网络请求是空闲的，这就有了发挥的空间：<strong>我们能不能一边解析执行 js/css，一边去请求下一个(或下一批)资源呢？</strong><br>&emsp;&emsp;这就是 <code>preloader</code> 要做的事情。不过 <code>preloader</code> 没有一个官方标准，所以每个浏览器的处理都略有区别。例如有些浏览器还会下载 css 中的 <code>@import</code> 内容或者 <code>&lt;video&gt;</code> 的 <code>poster</code> 等。<br>&emsp;&emsp;而这些被 <code>preloader</code> 请求过来的资源就会被放入 Memory Cache 中，供之后的解析执行操作使用。</p>
<ul>
<li><code>preload</code></li>
</ul>
<p>&emsp;&emsp;虽然看上去和刚才的 <code>preloader</code> 就差了俩字母，实际上这个大家应该更加熟悉一些，例如 <code>&lt;link rel=&quot;preload&quot;&gt;</code>。这些显式指定的预加载资源，也会被放入 Memory Cache 中。<br>&emsp;&emsp;Memory Cache 机制保证了一个页面中如果有两个相同的请求，例如<code>两个 src 相同的 &lt;img&gt;</code>或<code>两个 href 相同的 &lt;link&gt;</code>这些实际只会被请求一次，避免了浪费。<br>&emsp;&emsp;不过在匹配缓存时，除了匹配完全相同的 URL 之外，还会比对他们的类型、CORS 中的域名规则等。<br>&emsp;&emsp;因此一个作为脚本(script)类型被缓存的资源是不能用在图片(image)类型的请求中的，即便他们src相等。<br>&emsp;&emsp;在从 Memory Cache 获取缓存内容时，浏览器会忽视例如 <code>max-age=0/no-cache</code> 等头部配置。例如页面上存在几个相同 src 的图片，即便它们可能被设置为不缓存，但依然会从 Memory Cache 中读取。<br>&emsp;&emsp;这是因为 Memory Cache 只是短期使用，大部分情况生命周期只有一次浏览而已。而 <code>max-age=0</code> 在语义上普遍被解读为<strong>不要在下次浏览时使用</strong>，所以和 Memory Cache 并不冲突。<br>&emsp;&emsp;那么如果不想让一个资源进入缓存，就连短期也不行。就需要使用 <code>no-store</code>。存在这个头部配置的话，即便是 Memory Cache 也不会存储，自然也不会从中读取。</p>
<h4 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h4><blockquote>
<p>Disk Cache 也叫 HTTP Cache，是存储在硬盘上的缓存，因此它是持久存储的，是实际存在于文件系统中的。而且它允许相同的资源在跨会话，甚至跨站点的情况下使用，例如两个站点都使用了同一张图片。</p>
</blockquote>
<p>&emsp;&emsp;Disk Cache 会严格根据 HTTP 头信息中的各类字段来判定哪些资源可以缓存，哪些资源不可以缓存，哪些资源是仍然可用的，哪些资源是过时需要重新请求的。<br>&emsp;&emsp;当命中缓存之后，浏览器会从硬盘中读取资源，虽然比起从内存中读取慢了一些，但比起网络请求还是快了不少的。一般前端绝大部分的缓存都来自 Disk Cache。<br>&emsp;&emsp;凡是持久性存储都会面临容量增长的问题，Disk Cache 也不例外，在浏览器自动清理时，会使用算法去把<strong>最老的</strong>或者<strong>最可能过时的</strong>资源删除，因此是一个一个删除的。<br>&emsp;&emsp;不过每个浏览器识别<strong>最老的</strong>或者<strong>最可能过时的</strong>资源的算法不尽相同，可能也是它们差异性的体现。</p>
<h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><blockquote>
<p>上述的缓存策略以及缓存/读取/失效的动作都是由浏览器内部判断进行的，我们只能设置响应头的某些字段来告诉浏览器，而不能自己操作。而 Service Worker 可以让我们自己去定义缓存哪些文件，什么情况下取出文件。</p>
</blockquote>
<p>&emsp;&emsp;Service Worker 能够操作的缓存是有别于浏览器内部的 Memory Cache 或者 Disk Cache。<br>&emsp;&emsp;我们可以在 <strong>Chrome 的开发者工具 -&gt; Application -&gt; Cache Storage</strong> 找到这个缓存区。除了位置不同之外，这个缓存是永久性的，即关闭标签页或者浏览器，下次打开依然还在。<br>&emsp;&emsp;有两种情况会导致这个缓存中的资源被清除：手动调用 API <code>cache.delete(resource)</code> 或者容量超过限制，被浏览器全部清空。<br>&emsp;&emsp;如果 Service Worker 没能命中缓存，一般情况会使用 <code>fetch()</code> 方法继续获取资源。这时候，浏览器就去 Memory Cache 或者 Disk Cache 进行下一次找缓存的工作了。<br>&emsp;&emsp;注意：经过 Service Worker 的 <code>fetch()</code> 方法获取的资源，即便它并没有命中 Service Worker 缓存，甚至实际走了网络请求，也会标注为 <code>from ServiceWorker</code>。</p>
<h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><blockquote>
<p>如果一个请求在上述 3 个位置都没有找到缓存，那么浏览器会正式发送网络请求去获取内容。</p>
</blockquote>
<ul>
<li>之后容易想到，为了提升之后请求的缓存命中率，自然要把这个资源添加到缓存中去。</li>
<li>根据 Service Worker 中的 <code>handler</code> 决定是否存入 Cache Storage。</li>
<li>根据 HTTP 头部的相关字段 <code>(Cache-Control/Pragma等)</code> 决定是否存入 Disk Cache。</li>
<li>Memory Cache 保存一份资源的引用，以备下次使用。</li>
</ul>
<h3 id="失效策略分类"><a href="#失效策略分类" class="headerlink" title="失效策略分类"></a>失效策略分类</h3><p><img data-src="/images/loading.gif" data-original="/cache/web_cache.webp"></p>
<ul>
<li>Memory Cache 是浏览器为了加快读取缓存速度而进行的自身的优化行为，不受开发者控制，也不受 HTTP 协议头的约束，算是一个黑盒。</li>
<li>Service Worker 是由开发者编写的额外的脚本，且缓存位置独立，出现也较晚，使用还不算太广泛。</li>
<li>所以我们平时最为熟悉的其实是 Disk Cache，也叫 HTTP Cache，因为不像 Memory Cache，它遵守 HTTP 协议头中的字段。<ul>
<li>平时所说的强制缓存，协商缓存，以及 Cache-Control 等，也都归于此类。</li>
</ul>
</li>
</ul>
<h4 id="强制缓存-强缓存"><a href="#强制缓存-强缓存" class="headerlink" title="强制缓存 (强缓存)"></a>强制缓存 (强缓存)</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><blockquote>
<p>强制缓存的含义是，当客户端请求后，会先访问缓存数据库看缓存是否存在，如果存在则直接返回，不存在则请求服务器，响应后再写入缓存数据库。</p>
</blockquote>
<p>&emsp;&emsp;强制缓存直接减少请求数，是提升最大的缓存策略。它的优化覆盖了文章开头提到过的请求数据的全部三个步骤。如果考虑使用缓存来优化网页性能的话，强制缓存应该是首先被考虑的。</p>
<ul>
<li>常用强制缓存的字段是 <code>Cache-Control</code> 和 <code>Expires</code>。</li>
</ul>
<h5 id="常用字段与实现原理"><a href="#常用字段与实现原理" class="headerlink" title="常用字段与实现原理"></a>常用字段与实现原理</h5><blockquote>
<p><strong>Expires</strong></p>
</blockquote>
<ul>
<li><code>Expires</code> 是一个绝对时间，是缓存过期时间。用以表达在这个时间点之前发起请求可以直接从浏览器中读取数据，而无需重新发起请求。</li>
<li><code>Expires</code> 是一个绝对的时间(当前时间+缓存时间)<ul>
<li>例如：<code>Expires: Thu, 10 Nov 2020 08:45:11 GMT</code>。</li>
</ul>
</li>
<li>由于受限于本地时间，如果修改了本地时间，或其他原因导致服务器时间和客户端时间不一致，可能会造成缓存失效等问题。</li>
<li>写法太复杂了，表示时间的字符串如果多个空格，少个字母，都会导致非法属性从而设置失效。</li>
</ul>
<blockquote>
<p><strong>Cache-Control</strong></p>
</blockquote>
<ul>
<li><code>Cache-control</code> 的优先级比 <code>Expires</code> 的优先级高</li>
<li><code>Cache-control</code> 表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求。</li>
<li><code>Cache-control</code> 是相对时间，表示在 <code>2592000s</code> 内再次请求这条数据，都会直接获取缓存数据库中的数据，直接使用。<ul>
<li>例如：<code>Cache-control: max-age=2592000</code></li>
</ul>
</li>
<li><code>Cache-control</code> 常用值(可混用)：<ul>
<li><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存，默认值。</li>
<li><code>public</code>：所有的内容都可以被缓存，包括客户端和代理服务器，如 CDN。</li>
<li><code>max-age</code>：即最大有效时间，在上面的例子中我们可以看到。</li>
<li><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</li>
<li><code>no-cache</code>：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。</li>
<li><code>no-store</code>: 真正意义上的“不存”。所有内容都不走缓存，包括强制和对比。</li>
</ul>
</li>
<li><code>max-age=0</code> 和 <code>no-cache</code> 等价吗？从规范的字面意思来说，<code>max-age</code> 到期是 <strong>应该(SHOULD)</strong> 重新验证，而 <code>no-cache</code> 是 <strong>必须(MUST)</strong> 重新验证。但实际情况以浏览器实现为准，大部分情况他们俩的行为还是一致的。（如果是 <code>max-age=0, must-revalidate</code> 就和 <code>no-cache</code> 等价了。）</li>
</ul>
<blockquote>
<p>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行协商缓存策略。<code>Cache-Control</code> 的优先级虽然高于 <code>Expires</code>，但是为了兼容 <code>HTTP/1.0</code> 和 <code>HTTP/1.1</code>，实际项目中两个字段都会设置。</p>
</blockquote>
<h4 id="协商缓存-对比缓存"><a href="#协商缓存-对比缓存" class="headerlink" title="协商缓存 (对比缓存)"></a>协商缓存 (对比缓存)</h4><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h5><blockquote>
<p>当强制缓存失效(超过规定时间)时，就需要使用协商缓存，由服务器决定缓存内容是否失效。</p>
</blockquote>
<p>&emsp;&emsp;流程上说，浏览器先请求缓存数据库，返回一个缓存标识。之后浏览器拿这个标识和服务器通讯，如果缓存未失效，则返回 HTTP 状态码 <code>304</code> 表示继续使用，于是客户端继续使用缓存；如果失效，则返回新的数据和缓存规则，浏览器响应数据后，再把规则写入到缓存数据库。<br>&emsp;&emsp;<strong>协商缓存在请求数上和没有缓存是一致的</strong>，但如果是 <code>304</code> 的话，返回的仅仅是一个<code>状态码</code>而已，并没有<code>实际的文件内容</code>，因此 <strong>在响应体体积上的节省是它的优化点</strong>。它的优化通过减少响应体体积，来缩短网络传输时间。所以和强制缓存相比提升幅度较小，但总比没有缓存好。</p>
<h5 id="常用字段与实现原理-1"><a href="#常用字段与实现原理-1" class="headerlink" title="常用字段与实现原理"></a>常用字段与实现原理</h5><ul>
<li>协商缓存有 2 组字段(不是两个)</li>
</ul>
<blockquote>
<p><strong>Last-Modified &amp; If-Modified-Since</strong></p>
</blockquote>
<ul>
<li>比较步骤</li>
</ul>
<ol>
<li>服务器通过 <code>Last-Modified</code> 字段告知客户端，资源最后一次被修改的时间。<ul>
<li>例如：<code>Last-Modified: Mon, 10 Nov 2020 09:10:11 GMT</code>。</li>
</ul>
</li>
<li>浏览器将这个值和内容一起记录在缓存数据库中</li>
<li>下一次请求相同资源时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 <code>Last-Modified</code> 的值写入到请求头的 <code>If-Modified-Since</code> 字段。</li>
<li>服务器会将 <code>If-Modified-Since</code> 的值与此资源最新的 <code>Last-Modified</code> 字段进行对比。如果相等，则表示未修改，响应 <code>304</code>；反之，则表示修改了，响应 <code>200</code> 状态码，并返回数据。</li>
</ol>
<ul>
<li>但是他还是有一定缺陷的：<ul>
<li>如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。</li>
<li>如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>Etag &amp; If-None-Match</strong></p>
</blockquote>
<ul>
<li><code>Etag</code> 的优先级高于 <code>Last-Modified</code></li>
<li>为了解决上述问题，出现了一组新的字段 <code>Etag 和 If-None-Match</code>。</li>
<li><code>Etag</code> 存储的是<code>文件的特殊标识(一般都是 hash 生成的)</code>，服务器存储着文件的 <code>Etag</code> 字段。</li>
<li>之后的流程和 <code>Last-Modified</code> 一致，只是 <code>Last-Modified</code> 字段和它所表示的更新时间改变成了 <code>Etag</code> 字段和它所表示的文件 hash，把 <code>If-Modified-Since</code> 变成了 <code>If-None-Match</code>。</li>
<li>服务器同样进行比较，命中返回 <code>304</code>，不命中返回新资源和 <code>200</code>。</li>
<li>因此上面 <code>Last-Modified 和 If-Modified-Since</code> 的缺陷就弥补了，就算是动态生成的文件，只要我们决定 <code>Etag</code> 不变，那么就可以达到缓存的效果。</li>
</ul>
<blockquote>
<p>对于协商缓存，将缓存信息中的 <code>Etag和Last-Modified</code> 通过请求发送给服务器，由服务器校验，返回 <code>304</code> 状态码时，浏览器直接使用缓存。</p>
</blockquote>
<blockquote>
<p>协商缓存是可以和强制缓存一起使用的，作为在强制缓存失效后的一种后备方案。实际项目中他们也的确经常一同出现。</p>
</blockquote>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="常见协议头相关字段"><a href="#常见协议头相关字段" class="headerlink" title="常见协议头相关字段"></a>常见协议头相关字段</h5><p><img data-src="/images/loading.gif" data-original="/cache/cache_tag.png"></p>
<h5 id="请求资源"><a href="#请求资源" class="headerlink" title="请求资源"></a>请求资源</h5><ul>
<li>调用 Service Worker 的 <code>fetch</code> 事件响应</li>
<li>查看 Memory Cache</li>
<li>查看 Disk Cache。这里又细分：<ul>
<li>如果有强制缓存且未失效，则使用强制缓存，不请求服务器，这时的状态码全部是 <code>200</code>。</li>
<li>如果有强制缓存但已失效，使用协商缓存，比较后确定 <code>304</code> 还是 <code>200</code>。</li>
</ul>
</li>
</ul>
<h5 id="缓存资源"><a href="#缓存资源" class="headerlink" title="缓存资源"></a>缓存资源</h5><ul>
<li>发送网络请求，等待网络响应。</li>
<li>把响应内容存入 Disk Cache (如果 HTTP 头信息配置可以存的话)。</li>
<li>把响应内容的引用存入 Memory Cache (无视 HTTP 头信息的配置)。</li>
<li>把响应内容存入 Service Worker 的 Cache Storage (如果 Service Worker 的脚本调用了 <code>cache.put()</code>)。</li>
</ul>
<h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p><img data-src="/images/loading.gif" data-original="/cache/cache_flow.png"></p>
<h5 id="缓存是否有效情况"><a href="#缓存是否有效情况" class="headerlink" title="缓存是否有效情况"></a>缓存是否有效情况</h5><p><img data-src="/images/loading.gif" data-original="/cache/cache_is_active.png"></p>
<h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul>
<li>强缓存情况下，只要缓存还没过期，就会直接从缓存中取数据，就算服务器端有数据变化，也不会从服务器端获取了，这样就无法获取到修改后的数据。<ul>
<li>解决的办法有：在修改后的资源加上随机数或者版本号、时间戳，确保不会从缓存中取。</li>
</ul>
</li>
<li>尽量减少 <code>304</code> 的请求，因为我们知道，协商缓存每次都会与后台服务器进行交互，所以性能上不是很好。从性能上来看尽量多使用强缓存。</li>
<li>在 Firefox 浏览器下，使用 <code>Cache-control: no-cache</code> 是不生效的，其识别的是 <code>no-store</code>。这样能达到其他浏览器使用 <code>Cache-control: no-cache</code> 的效果。所以为了兼容 <code>Firefox</code> 浏览器，经常会写成 <code>Cache-control: no-cache, no-store</code>。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="CDN-缓存"><a href="#CDN-缓存" class="headerlink" title="CDN 缓存"></a>CDN 缓存</h3><blockquote>
<p>CDN 可以理解为分布在每个县城的火车票代售点，用户在浏览网站的时候，CDN 会选择一个离用户最近的 CDN 边缘节点来响应用户的请求，这样海南移动用户的请求就不会千里迢迢跑到北京电信机房的服务器（假设源站部署在北京电信机房）上了。</p>
</blockquote>
<ul>
<li>CDN的优势很明显：<ul>
<li>CDN 节点解决了跨运营商和跨地域访问的问题，访问延时大大降低。</li>
<li>大部分请求在 CDN 边缘节点完成，CDN 起到了分流作用，减轻了源站的负载。</li>
</ul>
</li>
<li>浏览器本地缓存失效后，浏览器会向CDN边缘节点发起请求。类似浏览器缓存，CDN边缘节点也存在着一套缓存机制。</li>
<li>CDN 的分流作用不仅减少了用户的访问延时，也减少的源站的负载。</li>
<li>CDN 缓存的缺点 <ul>
<li>当网站更新时，如果 CDN 节点上数据没有及时更新，即便用户在浏览器使用 Ctrl +F5 的方式使浏览器端的缓存失效，也会因为 CDN 边缘节点没有同步最新数据而导致用户访问异常。</li>
</ul>
</li>
</ul>
<blockquote>
<p>CDN 边缘节点缓存策略因服务商不同而不同，但一般都会遵循 HTTP 标准协议，通过 HTTP 响应头中的 <code>Cache-Control</code> 的 <code>max-age</code> 的字段来设置 CDN 边缘节点数据缓存时间。</p>
</blockquote>
<ul>
<li>当客户端向 CDN 节点请求数据时，CDN 节点会判断缓存数据是否过期，若缓存数据并没有过期，则直接将缓存数据返回给客户端。否则，CDN 节点就会向源站发出回源请求，从源站拉取最新数据，更新本地缓存，并将最新数据返回给客户端。</li>
<li>CDN 服务商一般会提供基于文件后缀、目录多个维度来指定 CDN 缓存时间，为用户提供更精细化的缓存管理。</li>
<li>CDN 缓存时间会对“回源率”产生直接的影响。若 CDN 缓存时间较短，CDN 边缘节点上的数据会经常失效，导致频繁回源，增加了源站的负载，同时也增大的访问延时。若 CDN 缓存时间太长，会带来数据更新时间慢的问题。开发者需要增对特定的业务，来做特定的数据缓存时间管理。</li>
<li>CDN 边缘节点对开发者是透明的，相比于浏览器 Ctrl+F5 的强制刷新来使浏览器本地缓存失效，开发者可以通过 CDN 服务商提供的“刷新缓存”接口来达到清理 CDN 边缘节点缓存的目的。这样开发者在更新数据后，可以使用“刷新缓存”功能来强制 CDN 节点上的数据缓存过期，保证客户端在访问时，拉取到最新的数据。</li>
</ul>
<h3 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h3><blockquote>
<p>数据库的缓存一般由数据库提供，可以对表建立高速缓存。</p>
</blockquote>
<ul>
<li>数据库中，用户可能多次执行相同的查询语句，为了提高查询效率，数据库会在内存划分一个专门的区域，用来存放用户最近执行的查询，这块区域就是缓存。</li>
<li>数据库缓存的使用必须在一定的应用环境下：查询的数据库表不会经常变动、有大量相同的查询(如订单信息查询、查询字典、用户信息)。</li>
<li>这个缓存策略也可以用在前端，比如某些信息不变的情况下，可以在前端设置一个对象，保存请求的地址、参数、结果，第一次请求时会保存请求的地址、参数和结果，再次请求时，如果请求的地址、参数一样，则查询该对象直接返回请求的结果。（可以通过请求拦截实现并设置间隔多久更新一次缓存）</li>
</ul>
<h3 id="缓存雪崩、击穿、穿透"><a href="#缓存雪崩、击穿、穿透" class="headerlink" title="缓存雪崩、击穿、穿透"></a>缓存雪崩、击穿、穿透</h3><table>
<thead>
<tr>
<th align="center">名词简介</th>
<th><code>缓存穿透</code></th>
<th><code>缓存雪崩</code></th>
<th><code>缓存击穿</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>触发条件</strong></td>
<td>访问一个不存在的 key，缓存不起作用，请求会穿透到 DB，流量大时 DB 就挂掉了。</td>
<td>大量的 key 设置了相同的过期时间，导致缓存同一时刻全部失效，这时候 DB 压力过大挂掉。</td>
<td>一个存在的 key，在缓存过期的那一刻，同时出现大量的请求(热点 key)，这些请求会击穿到 DB，导致 DB 瞬时需求过大挂掉。</td>
</tr>
<tr>
<td align="center"><strong>举个栗子</strong></td>
<td>各种方式故意攻击的情况</td>
<td>整点秒杀</td>
<td>微博热搜</td>
</tr>
<tr>
<td align="center"><strong>解决方案</strong></td>
<td>过滤不存在的 key，不相信任何人丢来的数据。<br>不存在的 key，将空值写入缓存，设置较短的过期时间。<br>使用布隆过滤器存储所有可能访问的 key，不存在的 key 直接被过滤，存在的 key 则再进一步查询缓存和数据库。<br>运维大大进行服务器配置，限制 ip 等措施。</td>
<td>给缓存过期时间设置一个随机时间，将缓存的过期时间分散开。<br><code>【击穿/雪崩通用方案】</code></td>
<td><code>【击穿/雪崩通用方案】</code></td>
</tr>
</tbody></table>
<blockquote>
<p><code>【击穿/雪崩通用方案】</code></p>
</blockquote>
<ul>
<li>可以将热点数据设置永不过期(极端场景)，要着重考虑刷新的时间间隔和数据异常如何处理的情况。</li>
<li>加互斥锁：在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存。在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存。</li>
<li>访问某个热点 key 之前，如果不存在此 key，查询数据库有结果，设置他为一个短期的 key，访问结束后后再删除该短期 key。</li>
</ul>
<h3 id="缓存的同步、复制与分发"><a href="#缓存的同步、复制与分发" class="headerlink" title="缓存的同步、复制与分发"></a>缓存的同步、复制与分发</h3><blockquote>
<p>缓存的同步指的是写命中缓存的时候，如何保持缓存与磁盘上数据一致性的问题。</p>
</blockquote>
<ul>
<li><p>一般有两种方式</p>
<ul>
<li><code>直写式 WT(Write Through)</code>：当 CPU 要将数据写入内存时，除了更新缓冲内存上的数据外，也将数据写在磁盘中以维持主存与缓冲内存的一致性，当要写入内存的数据多起来的话，速度自然就慢了下来。</li>
<li><code>回写式 WB(Write Back)</code>：当 CPU 要将数据写入内存时，只会先更新缓冲内存上的数据，随后再让缓冲内存在总线不塞车的时候才把数据写回磁盘，所以速度会快得多。</li>
</ul>
</li>
<li><p>两种方式各有利弊，直写缓存方法利用了高速缓存中的数据始终与主存储器中数据匹配的特点。但是，需要的总线周期却非常耗时，从而降低性能。回写缓存可以维持性能，因为写入始终是在“爆发”中进行的，因而运行所需的总线周期将大大减少。</p>
</li>
<li><p>两个 CPU，或者 CPU 与 DMA 同时共享一块物理内存时，writer 在写完后，要 write back，这样另一个 reader 才能看到它写入的数据；在 writer 变为 reader 的时候，需要 invalidate，否则看不到另一个 writer 写入的数据。</p>
</li>
<li><p>所以在共享的时候，需要同时做 write back 和 invalidate。</p>
</li>
</ul>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NDc4OTAwNQ==">一文读懂前端缓存<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>缓存</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 JavaScript 数据双向绑定[Proxy/defineProperty]</title>
    <url>/js_vm_bind/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>从 JavaScript 的数据双向绑定(defineProperty、Proxy)开始，谈谈 Vue2 中的数组监听问题。</p>
</div>
<span id="more"></span>

<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>&emsp;&emsp;Vue3 中，响应式数据部分弃用了 <code>Object.defineProperty</code>，使用 <code>Proxy</code> 来代替它。本文将介绍这两种数据监听的方式区别，并通过以下方面来分析为什么 Vue3 选择弃用<code>Object.defineProperty</code>。</p>
<ul>
<li><code>Object.defineProperty</code> 和 <code>Proxy</code> 基础使用。</li>
<li><code>Object.defineProperty</code> 能否监测数组下标的变化。</li>
<li>分析 Vue2 中对数组 <code>Observe</code> 部分源码。</li>
<li>对比 <code>Object.defineProperty</code> 和 <code>Proxy</code>。</li>
</ul>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;hxb&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;newName&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get...&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = newValue;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set...&#x27;</span>, newValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">newName</span>); <span class="comment">// get...，hxb</span></span><br><span class="line">person.<span class="property">newName</span> = <span class="string">&#x27;oqm&#x27;</span>; <span class="comment">// set...，oqm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">newName</span>); <span class="comment">// get...，oqm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// oqm</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = obj[key] || <span class="string">&#x27;没有初始值&#x27;</span>; <span class="comment">// 采用闭包保存数据，且保持独立。</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get...&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">      value = newValue;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set...&#x27;</span>, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">defineReactive</span>(person, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// get...，&#x27;hxb&#x27;</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;oqm&#x27;</span>; <span class="comment">// set... &#x27;oqm&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//  get...，&#x27;oqm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ 分割线 ------------------------------ */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;hxb&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> proxyObj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get...&#x27;</span>, target, key);</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target ? target[key] : <span class="string">&#x27;not found&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set...&#x27;</span>, target, key, value);</span><br><span class="line">    target[key] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyObj.<span class="property">a</span>); <span class="comment">// get... &#123;name: &#x27;hxb&#x27;, age: 21&#125; a，not found</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyObj.<span class="property">name</span>); <span class="comment">// get... &#123;name: &#x27;hxb&#x27;, age: 21&#125; name，hxb</span></span><br><span class="line">proxyObj.<span class="property">name</span> = <span class="string">&#x27;oqm&#x27;</span>; <span class="comment">// set... &#123;name: &#x27;hxb&#x27;, age: 21&#125; name，oqm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyObj); <span class="comment">// Proxy &#123;name: &#x27;oqm&#x27;, age: 21&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;oqm&#x27;, age: 21&#125;</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>; <span class="comment">// 不会触发 set</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyObj); <span class="comment">// Proxy &#123;name: &#x27;test&#x27;, age: 21&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;test&#x27;, age: 21&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="能否监测数组下标的变化"><a href="#能否监测数组下标的变化" class="headerlink" title="能否监测数组下标的变化"></a>能否监测数组下标的变化</h2><h3 id="测试内容与代码"><a href="#测试内容与代码" class="headerlink" title="测试内容与代码"></a>测试内容与代码</h3><p>&emsp;&emsp;在一些技术博客上看到过这样一种说法，认为 <code>Object.defineProperty</code> 有一个缺陷是无法监听数组变化。</p>
<blockquote>
<p>无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应。所以 Vue 才设置了7个变异数组（<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code>）的 <code>hack</code> 方法来解决问题。</p>
</blockquote>
<p>&emsp;&emsp;<code>Object.defineProperty</code> 的第一个缺陷，无法监听数组变化。然而 Vue 的文档提到了 Vue 是可以检测到数组变化的，但是只有八种方法可以检测，<code>vm.items[indexOfItem] = newValue</code> 这种是无法检测的。</p>
<p>&emsp;&emsp;这种说法是有问题的，事实上，<code>Object.defineProperty</code> 本身是可以监控到数组下标的变化的，只是在 Vue 的实现中，从性能/体验的性价比考虑，放弃了这个特性。</p>
<ul>
<li>下面我们通过一个例子来为 <code>Object.defineProperty</code> 正名。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">data, key, value</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get key: <span class="subst">$&#123;key&#125;</span> value: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`set key: <span class="subst">$&#123;key&#125;</span> value: <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">      value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(data, key, data[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="title function_">observe</span>(testArr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面代码对数组 <code>testArr</code> 的每个属性通过 <code>Object.defineProperty</code> 进行劫持，下面我们对数组 <code>testArr</code> 进行操作，看看哪些行为会触发数组的 <code>getter</code> 和 <code>setter</code> 方法。</p>
</blockquote>
<h3 id="通过下标获取某个元素和修改某个元素的值"><a href="#通过下标获取某个元素和修改某个元素的值" class="headerlink" title="通过下标获取某个元素和修改某个元素的值"></a>通过下标获取某个元素和修改某个元素的值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">testArr[<span class="number">0</span>]; <span class="comment">// get key: 0 value: 1</span></span><br><span class="line">testArr[<span class="number">0</span>] = <span class="number">100</span>; <span class="comment">// set key: 0 value: 100</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到，通过下标获取某个元素会触发 <code>getter</code> 方法，设置某个值会触发 <code>setter</code> 方法。</p>
</blockquote>
<h3 id="数组的-push-方法"><a href="#数组的-push-方法" class="headerlink" title="数组的 push 方法"></a>数组的 push 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">testArr.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 4</span></span><br><span class="line">testArr; <span class="comment">// [(...), (...), (...), 4]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>push</code> 并未触发 <code>setter</code> 和 <code>getter</code> 方法，数组的下标可以看做是对象中的 <code>key</code> ，这里 <code>push</code> 之后相当于增加了下索引为 <code>3</code> 的元素，但是并未对新的下标进行 <code>observe</code> ，所以不会触发。</p>
</blockquote>
<h3 id="数组的-unshift-方法"><a href="#数组的-unshift-方法" class="headerlink" title="数组的 unshift 方法"></a>数组的 unshift 方法</h3><p><img data-src="/images/loading.gif" data-original="/js_vm_bind/unshift.png"></p>
<p>我擦，发生了什么？</p>
<p><code>unshift</code> 操作会导致原来索引为 <code>0，1，2，3</code> 的值发生变化，这就需要将原来索引为 <code>0，1，2，3</code> 的值取出来，然后重新赋值，所以取值的过程触发了 <code>getter</code> ，赋值时触发了 <code>setter</code> 。</p>
<p>下面我们看一下原来的值</p>
<p><img data-src="/images/loading.gif" data-original="/js_vm_bind/unshift_after.png"></p>
<p>只有索引为 <code>0，1，2</code> 的属性才会触发 <code>getter</code> 。</p>
<p>这里我们可以对比对象来看，<code>testArr</code> 数组初始值为 <code>[100, 2, 3, 4]</code>，即只对索引为 <code>0，1，2</code> 执行了 <code>observe</code> 方法，所以无论后来数组的长度发生怎样的变化，依然只有索引为 <code>0，1，2</code> 的元素发生变化才会触发，其他的新增索引，就相当于对象中新增的属性，需要再手动 <code>observe</code> 才可以。</p>
<h3 id="数组的-pop-方法"><a href="#数组的-pop-方法" class="headerlink" title="数组的 pop 方法"></a>数组的 pop 方法</h3><p><img data-src="/images/loading.gif" data-original="/js_vm_bind/pop.png"></p>
<p>当移除的元素为引用为 <code>2</code> 的元素时，会触发 <code>getter</code>。</p>
<p>删除了索引为 <code>2</code>的元素后，再去修改或获取它的值时，不会再触发 <code>setter</code> 和 <code>getter</code> 。</p>
<p>这和对象的处理是同样的，数组的索引被删除后，就相当于对象的属性被删除一样，不会再去触发 <code>observe</code>。</p>
<h3 id="到这里，我们可以简单的总结一下结论。"><a href="#到这里，我们可以简单的总结一下结论。" class="headerlink" title="到这里，我们可以简单的总结一下结论。"></a>到这里，我们可以简单的总结一下结论。</h3><p><code>Object.defineProperty</code> 在数组中的表现和在对象中的表现是一致的，数组的索引就可以看做是对象中的 <code>key</code>。</p>
<ul>
<li>通过索引访问或设置对应元素的值时，<strong>可以</strong>触发 <code>getter</code> 和 <code>setter</code> 方法。</li>
<li>通过 <code>push</code> 或 <code>unshift</code> 会增加索引，对于新增加的属性，需要再手动初始化才能被 <code>observe</code>。</li>
<li>通过 <code>pop</code> 或 <code>shift</code> 删除元素，会删除并更新索引，也会触发 <code>setter</code> 和 <code>getter</code> 方法。</li>
</ul>
<blockquote>
<p>所以，<code>Object.defineProperty</code> 是有监控数组下标变化的能力的，只是 Vue2 因为性能问题放弃了这个特性。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">性能问题：</span><br><span class="line">Object.defineProperty 采用数据劫持的方式，中必须传入对应的 key 值，才能进行拦截数据，但是数组对象动态变化，则无法监听，必须每变化一次就再 observe 一次。</span><br><span class="line">而 Vue3 中使用 Proxy 直接代理对象，传入 data 即可监听里面数据的变化，所以可以监听数组对象的动态变化。</span><br></pre></td></tr></table></figure>

<h2 id="Vue-对数组的-observe-做了哪些处理"><a href="#Vue-对数组的-observe-做了哪些处理" class="headerlink" title="Vue 对数组的 observe 做了哪些处理"></a>Vue 对数组的 observe 做了哪些处理</h2><ul>
<li>Vue 的 <code>Observer</code> 类定义在 <code>core/observer/index.js</code> 中。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/js_vm_bind/vue_proxy_array_1.png"></p>
<ul>
<li>可以看到，Vue 的 <code>Observer</code> 对数组做了单独的处理。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/js_vm_bind/vue_proxy_array_2.png"></p>
<ul>
<li><code>hasProto</code> 是判断数组的实例是否有 <code>__proto__</code> 属性，如果有 <code>__proto__</code> 属性就会执行 <code>protoAugment</code> 方法，将 <code>arrayMethods</code> 重写到原型上。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/js_vm_bind/vue_proxy_array_3.png"></p>
<ul>
<li><code>arrayMethods</code> 是对数组的方法进行重写，定义在 <code>core/observer/array.js</code> 中，下面是这部分源码的分析。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; def &#125; <span class="keyword">from</span> <span class="string">&#x27;../util/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制数组构造函数的原型，Array.prototype也是一个数组。</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 创建对象，对象的__proto__指向arrayProto，所以arrayMethods的__proto__包含数组的所有方法。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayProto);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的数组是要进行重写的方法</span></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 遍历methodsToPatch数组，对其中的方法进行重写。</span></span><br><span class="line">methodsToPatch.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method];</span><br><span class="line">  <span class="comment">// def 方法定义在 lang.js 文件中，是通过 Object.defineProperty 对属性进行重新定义。</span></span><br><span class="line">  <span class="comment">// 即在 arrayMethods 中找到我们要重写的方法，对其进行重新定义。</span></span><br><span class="line">  <span class="title function_">def</span>(arrayMethods, method, <span class="keyword">function</span> <span class="title function_">mutator</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = original.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="variable language_">this</span>.<span class="property">__ob__</span>;</span><br><span class="line">    <span class="keyword">let</span> inserted;</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="comment">// 上面已经分析过，对于push，unshift会新增索引，所以需要手动observe</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">        inserted = args;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// splice方法，如果传入了第三个参数，也会有新增索引，所以也需要手动observe</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">        inserted = args.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// push，unshift，splice 三个方法触发后，在这里手动 observe，其他方法的变更会在当前的索引上进行更新，所以不需要再执行 ob.observeArray。</span></span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.<span class="title function_">observeArray</span>(inserted);</span><br><span class="line">    <span class="comment">// notify change</span></span><br><span class="line">    ob.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Object-defineProperty-Vs-Proxy"><a href="#Object-defineProperty-Vs-Proxy" class="headerlink" title="Object.defineProperty Vs Proxy"></a>Object.defineProperty Vs Proxy</h2><blockquote>
<p>上面已经知道 <code>Object.defineProperty</code> 对数组和对象的表现是一致的，那么它和 <code>Proxy</code> 对比存在哪些优缺点呢？</p>
</blockquote>
<h3 id="Object-defineProperty-只能劫持对象的属性，而Proxy是直接代理对象。"><a href="#Object-defineProperty-只能劫持对象的属性，而Proxy是直接代理对象。" class="headerlink" title="Object.defineProperty 只能劫持对象的属性，而Proxy是直接代理对象。"></a>Object.defineProperty 只能劫持对象的属性，而Proxy是直接代理对象。</h3><ul>
<li>由于 <code>Object.defineProperty</code> 只能对属性进行劫持，需要遍历对象的每个属性。而 <code>Proxy</code> 可以直接代理对象。</li>
</ul>
<h3 id="Object-defineProperty-对新增属性需要手动进行-Observe。"><a href="#Object-defineProperty-对新增属性需要手动进行-Observe。" class="headerlink" title="Object.defineProperty 对新增属性需要手动进行 Observe。"></a>Object.defineProperty 对新增属性需要手动进行 Observe。</h3><p>&emsp;&emsp;由于 <code>Object.defineProperty</code> 劫持的是对象的属性，所以新增属性时，需要重新遍历对象，对其新增属性再使用 <code>Object.defineProperty</code> 进行劫持。</p>
<p>&emsp;&emsp;也正是因为这个原因，使用 Vue 给 <code>data</code> 中的数组或对象新增属性时，需要使用 <code>vm.$set</code> 才能保证新增的属性也是响应式的。</p>
<ul>
<li>下面看一下 Vue 的 <code>set</code> 方法是如何实现的，<code>set</code> 方法定义在 <code>core/observer/index.js</code> ，下面是核心代码。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set a property on an object. Adds the new property and</span></span><br><span class="line"><span class="comment"> * triggers change notification if the property doesn&#x27;t</span></span><br><span class="line"><span class="comment"> * already exist.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target: <span class="built_in">Array</span>&lt;any&gt; | <span class="built_in">Object</span>, key: any, val: any</span>): any &#123;</span><br><span class="line">  <span class="comment">// 如果 target 是数组，且 key 是有效的数组索引，会调用数组的 splice 方法。</span></span><br><span class="line">  <span class="comment">// 我们上面说过，数组的 splice 方法会被重写，重写的方法中会手动 Observe。</span></span><br><span class="line">  <span class="comment">// 所以 Vue 的 set 方法，对于数组，就是直接调用重写 splice 方法。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isValidArrayIndex</span>(key)) &#123;</span><br><span class="line">    target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key);</span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对于对象，如果 key 本来就是对象中的属性，直接修改值就可以触发更新。</span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)) &#123;</span><br><span class="line">    target[key] = val;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Vue 的响应式对象中都会添加了 __ob__ 属性，所以可以根据是否有 __ob__ 属性判断是否为响应式对象。</span></span><br><span class="line">  <span class="keyword">const</span> ob = (<span class="attr">target</span>: any).<span class="property">__ob__</span>;</span><br><span class="line">  <span class="comment">// 如果不是响应式对象，直接赋值。</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用 defineReactive 给数据添加了 getter 和 setter，</span></span><br><span class="line">  <span class="comment">// 所以 Vue 的 set 方法，对于响应式的对象，就会调用 defineReactive 重新定义响应式对象，defineReactive 函数。</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(ob.<span class="property">value</span>, key, val);</span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在 <code>set</code> 方法中，对 <code>target</code> 是数组和对象做了分别的处理，<code>target</code> 是数组时，会调用重写过的 <code>splice</code> 方法进行手动 <code>Observe</code> 。</p>
<p>&emsp;&emsp;对于对象，如果 <code>key</code> 本来就是对象的属性，则直接修改值触发更新，否则调用 <code>defineReactive</code> 方法重新定义响应式对象。</p>
<p>&emsp;&emsp;如果采用 <code>Proxy</code> 实现，<code>Proxy</code> 通过 <code>set(target, propKey, value, receiver)</code> 拦截对象属性的设置，是可以拦截到对象的新增属性的。</p>
<p>&emsp;&emsp;不止如此，<code>Proxy</code> 对数组的方法也可以监测到，不需要像上面 Vue2 源码中那样进行 <code>hack</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">prop1</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> proxyObj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get...&#x27;</span>, target, key);</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target ? target[key] : <span class="string">&#x27;not found prop&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set...&#x27;</span>, target, key, value);</span><br><span class="line">    target[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyObj.<span class="property">prop1</span>); <span class="comment">// get... &#123;prop1: 1&#125; prop1，1</span></span><br><span class="line"><span class="comment">// 动态添加属性依旧可以监听</span></span><br><span class="line">proxyObj.<span class="property">prop2</span> = <span class="number">2</span>; <span class="comment">// set... &#123;prop1: 1&#125; prop2 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyObj.<span class="property">prop2</span>); <span class="comment">// get... &#123;prop1: 1, prop2: 2&#125; prop2，2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------ 分割线 ------------------------------ */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> proxyArr = <span class="keyword">new</span> <span class="title class_">Proxy</span>(arr, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">data, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get...&#x27;</span>, data, index);</span><br><span class="line">    <span class="keyword">return</span> data[index] || <span class="string">&#x27;not found index&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">data, index, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set...&#x27;</span>, data, index, value);</span><br><span class="line">    data[index] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyArr[<span class="number">0</span>]); <span class="comment">// get... [1, 2, 3] 0，1</span></span><br><span class="line">proxyArr.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// set... [1, 2, 3] 3，4</span></span><br><span class="line"><span class="comment">// 动态添加依旧可以监听</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyArr[<span class="number">3</span>]); <span class="comment">// get... [1, 2, 3, 4] 3，4</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Perfect！！！</p>
</blockquote>
<h3 id="Proxy-支持-13-种拦截操作，这是-defineProperty-没有的。"><a href="#Proxy-支持-13-种拦截操作，这是-defineProperty-没有的。" class="headerlink" title="Proxy 支持 13 种拦截操作，这是 defineProperty 没有的。"></a>Proxy 支持 13 种拦截操作，这是 defineProperty 没有的。</h3><table>
<thead>
<tr>
<th align="center"><strong>操作</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>get(target, propKey, receiver)</strong></td>
<td>拦截对象属性的读取，比如 <code>proxy.foo</code> 和 <code>proxy[&#39;foo&#39;]</code> 。</td>
</tr>
<tr>
<td align="center"><strong>set(target, propKey, value, receiver)</strong></td>
<td>拦截对象属性的设置，比如 <code>proxy.foo = v</code> 或 <code>proxy[&#39;foo&#39;] = v</code> ，返回一个布尔值。</td>
</tr>
<tr>
<td align="center"><strong>has(target, propKey)</strong></td>
<td>拦截 <code>propKey in proxy</code> 的操作，返回一个布尔值。</td>
</tr>
<tr>
<td align="center"><strong>deleteProperty(target, propKey)</strong></td>
<td>拦截 <code>delete proxy[propKey]</code> 的操作，返回一个布尔值。</td>
</tr>
<tr>
<td align="center"><strong>ownKeys(target)</strong></td>
<td>拦截 <code>Object.getOwnPropertyNames(proxy)</code>、 <code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code> 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 <code>Object.keys()</code> 的返回结果仅包括目标对象自身的可遍历属性。</td>
</tr>
<tr>
<td align="center"><strong>getOwnPropertyDescriptor(target, propKey)</strong></td>
<td>拦截 <code>Object.getOwnPropertyDescriptor(proxy, propKey)</code> ，返回属性的描述对象。</td>
</tr>
<tr>
<td align="center"><strong>defineProperty(target, propKey, propDesc)</strong></td>
<td>拦截 <code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</td>
</tr>
<tr>
<td align="center"><strong>preventExtensions(target)</strong></td>
<td>拦截 <code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</td>
</tr>
<tr>
<td align="center"><strong>getPrototypeOf(target)</strong></td>
<td>拦截 <code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</td>
</tr>
<tr>
<td align="center"><strong>isExtensible(target)</strong></td>
<td>拦截 <code>Object.isExtensible(proxy)</code>，返回一个布尔值。</td>
</tr>
<tr>
<td align="center"><strong>setPrototypeOf(target, proto)</strong></td>
<td>拦截 <code>Object.setPrototypeOf(proxy, proto)</code> ，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</td>
</tr>
<tr>
<td align="center"><strong>apply(target, object, args)</strong></td>
<td>拦截 <code>Proxy</code> 实例作为函数调用的操作，比如 <code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code> 。</td>
</tr>
<tr>
<td align="center"><strong>construct(target, args)</strong></td>
<td>拦截 <code>Proxy</code> 实例作为构造函数调用的操作，比如 <code>new proxy(...args)</code> 。</td>
</tr>
</tbody></table>
<h3 id="新标准性能红利"><a href="#新标准性能红利" class="headerlink" title="新标准性能红利"></a>新标准性能红利</h3><ul>
<li><code>Proxy</code> 作为新标准，长远来看，JS 引擎会继续优化 <code>Proxy</code>，但 <code>getter</code> 和 <code>setter</code> 基本不会再有针对性优化。</li>
</ul>
<h3 id="Proxy-兼容性差"><a href="#Proxy-兼容性差" class="headerlink" title="Proxy 兼容性差"></a>Proxy 兼容性差</h3><p><img data-src="/images/loading.gif" data-original="/js_vm_bind/define_support.png"></p>
<p><img data-src="/images/loading.gif" data-original="/js_vm_bind/proxy_support.png"></p>
<p>可以看到，<code>Proxy</code> 对于 IE 浏览器来说简直是灾难。</p>
<p>并且目前并没有一个完整支持 <code>Proxy</code> 所有拦截方法的 Polyfill 方案，有一个 Google 编写的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9wcm94eS1wb2x5ZmlsbA==">proxy-polyfill<i class="fa fa-external-link-alt"></i></span> 也只支持了 <code>get，set，apply，construct</code> 四种拦截，可以支持到 IE9+ 和 Safari 6+。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p><code>Object.defineProperty</code> 对数组和对象的表现一致，并非不能监控数组下标的变化，Vue2 中无法通过数组索引来实现响应式数据的自动更新是 Vue 本身的设计导致的，不是 <code>defineProperty</code> 的问题。</p>
</li>
<li><p><code>Object.defineProperty</code> 和 <code>Proxy</code> 本质差别是，<code>defineProperty</code> 只能对属性进行劫持，新增属性需要手动 <code>Observe</code> 的问题。</p>
</li>
<li><p><code>Proxy</code> 作为新标准，浏览器厂商势必会对其进行持续优化，但它的兼容性也是块硬伤，并且目前还没有完整的 polyfill 方案。</p>
</li>
</ul>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTY1MTgwNTc1NzUx">转改自掘金<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2RlZmluZVByb3BlcnR5">参考 MDN defineProperty<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=">参考 MDN Proxy<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>双向绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo自动部署】优雅的使用 Github Actions 进行 Hexo 静态博客的持续集成与部署</title>
    <url>/hexo_ci_cd/</url>
    <content><![CDATA[<div class="note info no-icon"><p>&emsp;&emsp;由于没有自己的云服务器，所以我之前选择博客工具的时候排除了Typora、Wordpress…转而选择了 Hexo，但其实相较于前者，Hexo 的云端写作体验一直很糟糕。<br>&emsp;&emsp;随着近两年 CI/CD、DevOps 这些概念的流行，很多工具都火了起来，像 Jenkins、Github的好基友Travis等等，但这些都不太适用我们的情况，Jenkins 也需要自己的服务器，而TravisCI我也测试了一下，本来是适用的，也很方便，但是官方宣布后续不再免费，只赠送 10000 积分用完即止，开通付费版则要 <code>69刀/月</code> [俺支持不起，倒不如整一个云服务器，大佬请随意！]。<br>&emsp;&emsp;但是我偶然了解到全球最大的同性交友网站丢出了一个重磅炸弹-<code>Github Actions</code>，我发现利用此功能可以完美解决 Hexo 静态博客自动部署的问题，并且免费版<code>每月赠送2000分钟的时长</code>，完美！</p>
</div>
<span id="more"></span>

<p><strong>&emsp;&emsp;本篇博文就来浅谈一下 Github Actions 的原理，以及使用他简单实现 Hexo 静态博客的自动部署(即每次我们 push 源代码后，自动生成静态文件，并上传到我们的仓库或者云存储中；Github 本身可以开启运行结果邮件通知功能，有条件的也可以设置 WebHooks 来进行通知。)，好了那么话不多说，我们直接开始，欢迎大佬批评指正。</strong></p>
<h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  &emsp;&emsp;前面我们有提到 CI/CD、DevOps 这些名词，其实就是我们一般开发完成后，需要进行测试、打包、发布等操作，这些动作其实都是可以自动完成的，之前提到的 Jenkins 就可以做到，但是需要有自己的服务器。</p>
<p>  &emsp;&emsp;而 Github Actions 服务，就是用来帮助我们完成这些动作，他既可以使用自己的服务器也可以使用 Github 的服务器（支持多种环境与语言）。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>  &emsp;&emsp;Github Actions 和其他工具一样，通过脚本文件来进行一系列复杂的操作，他也有自己的语法规则-<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucw==">官方文档<i class="fa fa-external-link-alt"></i></span>。</p>
<p>  &emsp;&emsp;由于很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNl">官方市场<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FjdGlvbnM=">github/actions 仓库<i class="fa fa-external-link-alt"></i></span>。</p>
<p>  &emsp;&emsp;其他基础使用，推荐查看<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE5LzA5L2dldHRpbmctc3RhcnRlZC13aXRoLWdpdGh1Yi1hY3Rpb25zLmh0bWw=">阮一峰老师的介绍<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="原理-个人了解"><a href="#原理-个人了解" class="headerlink" title="原理(个人了解)"></a>原理(个人了解)</h3><p>  &emsp;&emsp;其实 Github Actions 就是当我们完成触发条件后（例如：push/pull等），Github 通过我们编写的脚本文件把应该在本地运行的命令，放到他的服务器（也可以设置自己的服务器）上自动运行，大大减少我们的操作。</p>
<p>  &emsp;&emsp;经过博主的测试，Github 提供的服务器上预装了多种语言及一些常见的运行环境等，所以我们编写脚本其实很简单，只需按语法要求添加以下固定内容即可：</p>
<ul>
<li>提供脚本基本信息</li>
<li>指定运行环境、触发条件</li>
<li>编写任务、步骤、动作</li>
</ul>
<p>  &emsp;&emsp;添加这些内容后，当匹配触发条件时，Github 就会读取我们的脚本文件，在服务器上的指定环境中运行我们预先写好的任务、步骤、动作。</p>
<blockquote>
<p>好了，经过这些简单的了解后，我们开始配置 Github Actions吧。</p>
</blockquote>
<h2 id="Hexo-静态博客自动部署"><a href="#Hexo-静态博客自动部署" class="headerlink" title="Hexo 静态博客自动部署"></a>Hexo 静态博客自动部署</h2><h3 id="建立博客源代码仓库"><a href="#建立博客源代码仓库" class="headerlink" title="建立博客源代码仓库"></a>建立博客源代码仓库</h3><p> &emsp;&emsp;因为我们需要 Hexo 源代码才能生成静态文件，所以我们需要建立一个私有仓库来保存我们的源代码，当然如果你觉得麻烦也可以建立一个分支来保存，此处就不介绍了。</p>
<blockquote>
<p>Ps: 如果您还不会搭建 Hexo 博客，可以参考本站之前的 <a href="http://a.biugle.cn/hexobuild">Hexo 搭建教学</a>。</p>
</blockquote>
<ul>
<li>具体操作如图所示</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/create_repo.png"></p>
<p>  &emsp;&emsp;仓库建立后，我们可以先把自己的源代码通过 Git 提交上去，这里就不介绍了，也可以参考之前的<a href="http://a.biugle.cn/hexobuild">博客搭建教学</a>。</p>
<blockquote>
<p>Ps: 如果碰到 Github 连线失败的情况，建议禁用代理 <code>git config --global --unset http.proxy</code>，或者直接使用 open ssh 进行连线推送。</p>
</blockquote>
<h3 id="Hexo-简单配置与介绍"><a href="#Hexo-简单配置与介绍" class="headerlink" title="Hexo 简单配置与介绍"></a>Hexo 简单配置与介绍</h3><h4 id="Github-的链接形式"><a href="#Github-的链接形式" class="headerlink" title="Github 的链接形式"></a>Github 的链接形式</h4><p>&emsp;&emsp;Github 这种网站的代码仓库地址常见有三种形式，适用于不同的情况，下面简单介绍一下。</p>
<ul>
<li>普通链接，一般在使用账号密码登录后或者ssh传输时使用。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 这种地址可以直接在仓库中复制</span><br><span class="line">https://github.com/pandaoh/biugle.git</span><br><span class="line">git@github.com:pandaoh/biugle.git</span><br></pre></td></tr></table></figure>

<ul>
<li>账号密码链接，这种适用于自己调用 Github 的数据或者当 Api 使用等情形。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://&#123;username&#125;:&#123;password&#125;@github.com/pandaoh/biugle.git</span><br></pre></td></tr></table></figure>

<ul>
<li>token 链接，在 Github Settings 中生成 token 后，可以直接放到仓库地址中，这样就可以直接访问有权限的仓库，方便我们自动部署。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://&#123;token&#125;@github.com/pandaoh/biugle.git</span><br></pre></td></tr></table></figure>

<h4 id="生成-Github-Token"><a href="#生成-Github-Token" class="headerlink" title="生成 Github Token"></a>生成 Github Token</h4><p>&emsp;&emsp;了解完 Github 这些链接形式后，我们就可以开始配置了，因为我们决定使用 Token 这种链接形式来进行连线推送等操作，所以首先就是生成 <em><strong>Github Token</strong></em>。</p>
<ul>
<li>打开我们自己的 <strong>Github Settings</strong>，选择 <strong>Developer settings =&gt; Personal access tokens</strong>。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/create_token1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/create_token2.png"></p>
<ul>
<li>生成 token 后，此信息只会展示一次，我们先保存下来，因安全问题后文我统一将此 token 称为 <code>$GH_TOKEN</code>。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/create_token3.png"></p>
<h4 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 config.yml"></a>修改 config.yml</h4><p>  &emsp;&emsp;大部分人之前应该都是在本地进行博客编写，所以连接 Github 的方式应该都是使用的 ssh，那么前面我们为了方便后续自动部署，需要把 <code>config.yml</code> 文件中的 <code>deploy-&gt;repository-&gt;github</code> 值改成 <code>token url</code> 的形式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repository:</span><br><span class="line">      github: https://&#123;<span class="variable">$GH_TOKEN</span>&#125;@github.com/pandaoh/pandaoh.github.io.git,master</span><br><span class="line">      ...</span><br><span class="line">// 注意此处的 &#123;<span class="variable">$GH_TOKEN</span>&#125; 请替换成我们之前生成的 token 内容，此仓库地址是我们博客静态文件最终存放的仓库地址，即搭建教学中开通 Github Pages 服务的那个仓库地址。</span><br></pre></td></tr></table></figure>

<h3 id="添加-GitHub-Actions-脚本"><a href="#添加-GitHub-Actions-脚本" class="headerlink" title="添加 GitHub Actions 脚本"></a>添加 GitHub Actions 脚本</h3><p>  &emsp;&emsp;配置完 Hexo，我们开始编写 Github 的脚本文件，GitHub Actions 的配置文件叫做 workflow 文件，存放在源代码仓库的 <code>.github/workflows</code> 目录。<br>  &emsp;&emsp;workflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为 .yml，比如 test.yml。一个库可以有多个 workflow 文件。<br>  &emsp;&emsp;GitHub 在我们完成预设触发条件时，只要发现 <code>.github/workflows</code> 目录里面有 <code>.yml</code> 文件，就会自动读取运行该文件。</p>
<h4 id="添加步骤"><a href="#添加步骤" class="headerlink" title="添加步骤"></a>添加步骤</h4><ul>
<li>我们可以直接手动建立此文件，或者通过源代码仓库<code>点击 Actions =&gt; 选择 Setup Node</code>创建，但最终同样都需 push 到远端源代码仓库中。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/set_actions.png"></p>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/actions.png"></p>
<h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><blockquote>
<p>建议阅读完前面给出的官方文档再来进行此处的了解 ^_^</p>
</blockquote>
<ul>
<li>建立文件后，我们修改其配置如下。</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">DoubleAm&#x27;s</span> <span class="string">Blog</span> <span class="string">CI/CD</span> <span class="comment"># 脚本 workflow 名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>, <span class="string">master</span>] <span class="comment"># 当监测 main,master 的 push</span></span><br><span class="line">    <span class="attr">paths:</span> <span class="comment"># 监测所有 source 目录下的文件变动，所有 yml,json 后缀文件的变动。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;*.json&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**.yml&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/source/**&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog:</span> <span class="comment"># 任务名称</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">30</span> <span class="comment"># 设置 30 分钟超时</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 指定最新 ubuntu 系统</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># 拉取仓库代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span> <span class="comment"># 设置 node.js 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node_modules</span> <span class="comment"># 缓存 node_modules，提高编译速度，毕竟每月只有 2000 分钟。</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span> <span class="comment"># 亲测 Github 服务器编译速度比我自己电脑都快，如果每次构建按5分钟计算，我们每个月可以免费部署 400 次，Github yyds！！！</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Node.js</span> <span class="comment"># 安装源代码所需插件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          echo &quot;init node successful&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo-cli</span> <span class="comment"># 安装 Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli --save</span></span><br><span class="line"><span class="string">          echo &quot;install hexo successful&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Blog</span> <span class="comment"># 编译创建静态博客文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string">          echo &quot;build blog successful&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">DoubleAm&#x27;s</span> <span class="string">Blog</span> <span class="comment"># 设置 git 信息并推送静态博客文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;doubleam&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;admin@biugle.cn&quot;</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Deploy Successful!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h3><blockquote>
<p>Hexo 与 Github Actions 均配置完成后，我们将这两个文件变动都推送至源代码仓库中。</p>
</blockquote>
<h4 id="推送内容"><a href="#推送内容" class="headerlink" title="推送内容"></a>推送内容</h4><blockquote>
<p>完成以上操作后，我们每修改并 push 一次监测的文件，就可以触发脚本运行。</p>
</blockquote>
<h4 id="查看-Github-Actions-运行日志与结果"><a href="#查看-Github-Actions-运行日志与结果" class="headerlink" title="查看 Github Actions 运行日志与结果"></a>查看 Github Actions 运行日志与结果</h4><blockquote>
<p>触发后我们可以查看运行日志与结果，如下图所示。</p>
</blockquote>
<ul>
<li>基础日志</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/log.png"></p>
<ul>
<li>详细日志</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/hexo_ci_cd/log_more.png"></p>
<h3 id="添加-WebHooks-通知"><a href="#添加-WebHooks-通知" class="headerlink" title="添加 WebHooks 通知"></a>添加 WebHooks 通知</h3><p>&emsp;&emsp;脚本运行完成一般都有邮件通知，但如果我们需要在 push 后添加其他通知，例如<strong>钉钉机器人、QQ</strong>等，我们可以添加 <strong>WebHooks</strong> 来进行通知。</p>
<ul>
<li>可以直接在仓库添加 WebHooks，选择触发条件后，输入接口地址【POST】与 Secret (可选)，Github 会在我们完成触发条件时，<strong>携带此次操作的信息数据包请求一次这个 POST 接口</strong>，至于后面的处理就可以自定义啦。</li>
</ul>
<blockquote>
<p>如果有使用腾讯云 cos 桶托管博客，可能需要设置 CDN 缓存刷新，详细可参考文章<a href="http://a.biugle.cn/tencentcos/">COS桶托管Hexo</a>。另外从本文开始，本站后续所有内容均为自动部署哦…<code>此次分享就到这啦，干饭去！</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo自动部署</tag>
        <tag>Github Actions</tag>
        <tag>CI/CD</tag>
        <tag>Travis CI</tag>
        <tag>WebHooks</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Function</title>
    <url>/js_function/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>聊一下函数…</p>
</div>
<span id="more"></span>

<h2 id="函数声明方式"><a href="#函数声明方式" class="headerlink" title="函数声明方式"></a>函数声明方式</h2><h3 id="具名函数"><a href="#具名函数" class="headerlink" title="具名函数"></a>具名函数</h3><p>&emsp;&emsp;function 后面有函数名字的，不是直接跟括号的的就是具名函数。如果把一个具名函数赋值给一个变量，那么这个具名函数的作用域就不是 window 了(严格模式下 this 指向 undefined)，且函数调用的名字也为变量名，对象中定义同理，不管有没有函数名称，最终调用的函数名均为此变量或属性名称。<br>&emsp;&emsp;具名函数的 this 指向是当我们调用函数的时候确定的，调用方式的不同决定了 this 不同的指向，一般指向我们的调用者。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function1&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">name</span>); <span class="comment">// fun1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun1.<span class="property">name</span>); <span class="comment">// Uncaught ReferenceError: fun1 is not defined</span></span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">// function1</span></span><br><span class="line"><span class="title function_">fun1</span>(); <span class="comment">// Uncaught ReferenceError: fun1 is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">fun</span>: <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">fun</span>.<span class="property">name</span>); <span class="comment">// test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hello</span>.<span class="property">name</span>); <span class="comment">// hello</span></span><br><span class="line">obj.<span class="title function_">fun</span>(); <span class="comment">// test</span></span><br><span class="line">obj.<span class="title function_">hello</span>(); <span class="comment">// hello</span></span><br><span class="line">obj.<span class="property">fun</span>.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;hxb&#x27;</span> &#125;); <span class="comment">// hxb</span></span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// Uncaught ReferenceError: test is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><blockquote>
<p>箭头函数是 ES6 知识点，具有以下几个特点。</p>
</blockquote>
<ul>
<li>如果只有一个参数，可以省略小括号。</li>
<li>如果有至少有两个参数，必须加小括号。</li>
<li>如果函数体只有一句话可以省略花括号，并且这一句作为返回值 return。</li>
<li>如果函数体至少有两句必须加上花括号。</li>
<li>箭头函数没有自己的 this，它的 this 继承于<code>运行时的外层代码库的第一个 this，由上下文决定，所以也不能用call、apply、bind 去改变 this 的指向</code>。</li>
<li>箭头函数不能使用 arguments、super 和 new.target，也不能用作构造函数。</li>
<li>箭头函数没有 prototype 属性。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = e =&gt; e + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="number">1</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params">i, j</span>) =&gt; i + j;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun1</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span> = (<span class="params">i, j</span>) =&gt; &#123;</span><br><span class="line">  i += <span class="number">1</span>;</span><br><span class="line">  j += <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> i + j;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun2</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li>function 后面直接跟括号，中间没有函数名的就是匿名函数。由于匿名函数的执行环境具有全局性，所以匿名函数的 this 指向一般都是 window。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasNameFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fun2 = fun1;</span><br><span class="line"><span class="keyword">let</span> fun3 = hasNameFun;</span><br><span class="line"><span class="title function_">fun1</span>(); <span class="comment">// test</span></span><br><span class="line"><span class="title function_">fun2</span>(); <span class="comment">// test</span></span><br><span class="line"><span class="title function_">hasNameFun</span>(); <span class="comment">// test</span></span><br><span class="line"><span class="title function_">fun3</span>(); <span class="comment">// test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun1.<span class="property">name</span>); <span class="comment">// fun1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun2.<span class="property">name</span>); <span class="comment">// fun1，fun1 和 fun2 指向的是同一个 function。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasNameFun.<span class="property">name</span>); <span class="comment">// fun1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun3.<span class="property">name</span>); <span class="comment">// fun1，fun1 和 fun2 指向的是同一个 function。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> test = <span class="string">&#x27;has_name&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;具名函数&#x27;</span>, <span class="variable language_">this</span>.<span class="property">test</span>, test);</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> test = <span class="string">&#x27;no_name&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;匿名函数&#x27;</span>, <span class="variable language_">this</span>.<span class="property">test</span>, test);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line">testFun.<span class="title function_">call</span>(&#123; <span class="attr">test</span>: <span class="string">&#x27;改变指向的test&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 具名函数 改变指向的test has_name</span></span><br><span class="line"><span class="comment">// 匿名函数 window no_name</span></span><br></pre></td></tr></table></figure>

<h2 id="this、arguments、new-target、caller"><a href="#this、arguments、new-target、caller" class="headerlink" title="this、arguments、new.target、caller"></a>this、arguments、new.target、caller</h2><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><blockquote>
<p>在 ES5 中，函数有四种调用方式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fun</span>(arg1, arg2); <span class="comment">// 等价于 fun.call(undefined, arg1, arg2); || fun.apply(context, [arg1, arg2]);</span></span><br><span class="line">obj.<span class="title function_">fun</span>(arg1, arg2);</span><br><span class="line">fun.<span class="title function_">call</span>(context, arg1, arg2);</span><br><span class="line">fun.<span class="title function_">apply</span>(context, [arg1, arg2]);</span><br><span class="line"><span class="comment">// 第三和第四种才是正常的 js 函数调用方式，其他两种就是语法糖。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你传的 context 是 null 或者 undefined，那么 window 对象就是默认的 context (严格模式下默认 context 是 undefined)。</p>
</blockquote>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote>
<p>this 就是一个指针，指向调用函数的对象，并不是指向自身。各个函数的一般指向前面也都有介绍，下面我们来看看一些小栗子。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">fun</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun1 = obj.<span class="property">fun</span>;</span><br><span class="line">obj.<span class="title function_">fun</span>(); <span class="comment">// 打印出的 this 是 obj</span></span><br><span class="line"><span class="title function_">fun1</span>(); <span class="comment">// 打印出的 this 是 window</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在执行函数的时候，this是隐藏的一个参数，且必须是一个对象，如果不是，js 是自动把它转为对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun.<span class="title function_">call</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// Number &#123;1&#125;</span></span><br><span class="line"><span class="comment">// Arguments(2) [2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>this 的绑定有以下几种方式</li>
</ul>
<ol>
<li>默认绑定</li>
<li>隐式绑定</li>
<li>显式绑定(硬绑定)</li>
<li>new 绑定</li>
<li>箭头函数的 this</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Obj&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: sayHi</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认绑定</span></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">obj.<span class="title function_">sayHi</span>(); <span class="comment">// Hello Obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式绑定</span></span><br><span class="line"><span class="keyword">var</span> hi = obj.<span class="property">sayHi</span>;</span><br><span class="line"><span class="title function_">hi</span>(); <span class="comment">// Hello World</span></span><br><span class="line">hi.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;DoubleAm&#x27;</span> &#125;); <span class="comment">// Hello DoubleAm</span></span><br><span class="line"><span class="comment">// Ps: 如果我们将 null 或者是 undefined 作为 this 的绑定对象传入 call、apply 或者是 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。(严格模式下则不会忽略)</span></span><br><span class="line">hi.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new 绑定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newHi = <span class="keyword">new</span> <span class="title function_">sayHi</span>(<span class="string">&#x27;newName&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, newHi.<span class="property">name</span>); <span class="comment">// Hello newName</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数，我们可以看作为找外层普通函数的第一个 this。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">hi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> hi = obj.<span class="title function_">hi</span>(); <span class="comment">// 输出 obj 对象</span></span><br><span class="line"><span class="title function_">hi</span>(); <span class="comment">// 输出 obj 对象</span></span><br><span class="line"><span class="keyword">let</span> sayHi = obj.<span class="title function_">sayHi</span>();</span><br><span class="line"><span class="keyword">let</span> fun1 = <span class="title function_">sayHi</span>(); <span class="comment">//输出 window</span></span><br><span class="line"><span class="title function_">fun1</span>(); <span class="comment">// 输出 window</span></span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// 输出 window</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODYzMDAxMw==">参考 this 绑定<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>&emsp;&emsp;arguments 是传入的参数，它是伪数组它类似于 Array，但除了 length 属性和索引元素之外没有任何 Array 属性。<br>&emsp;&emsp;call 和 apply、bind 里面除了第一个参数之外的都是 arguments，如果 arguments 的个数少建议使用call，参数少时性能更高，使用 apply 也可以，如果不确定就使用 apply。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;传入参数&#x27;</span>, [...<span class="variable language_">arguments</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 传入参数 (3) [1, 2, 3]</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 传入参数 (5) [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 arguments 转为真正的数组</span></span><br><span class="line"><span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">let</span> args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>];</span><br></pre></td></tr></table></figure>

<h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><p>&emsp;&emsp;ECMAScript 中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。<br>&emsp;&emsp;ES6 新增了检测函数是否使用 <code>new</code> 关键字调用的 <code>new.target</code> 属性。如果函数是正常调用的，则 <code>new.target</code> 的值是 <code>undefined</code>；如果是使用 <code>new </code>关键字调用的，则 <code>new.target</code> 将引用被调用的构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">King</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.<span class="property">target</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;King must be instantiated using &quot;new&quot;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;King instantiated using &quot;new&quot;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">King</span>(); <span class="comment">// King instantiated using &quot;new&quot;</span></span><br><span class="line"><span class="title class_">King</span>(); <span class="comment">// Error: King must be instantiated using &quot;new&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里可以做一些延申，还有没有其他办法来判断函数是否通过 <code>new</code> 来调用的呢？</p>
</blockquote>
<ul>
<li>使用 <code>instanceof</code> 来判断。<code>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// `this instanceof Person` 也可改写为 `this instanceof arguments.callee`</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过 new 创建&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数调用&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 通过 new 创建</span></span><br><span class="line"><span class="title class_">Person</span>(); <span class="comment">// 函数调用</span></span><br></pre></td></tr></table></figure>

<h3 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h3><blockquote>
<p>这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的则为 null。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(inner.<span class="property">caller</span>);</span><br><span class="line">  <span class="comment">// 或者 console.log(arguments.callee.caller);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>(); <span class="comment">// function outer() &#123; inner(); &#125;</span></span><br><span class="line"><span class="title function_">inner</span>(); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><blockquote>
<p>虽然 <code>call、apply、bind</code> 都用于改变 this 指向，但是还是有区别的。</p>
</blockquote>
<ul>
<li>使用 <code>call/apply</code> 改变 <code>this</code> 指向后，<code>函数立即执行</code>，而 <code>bind</code> 则是<code>返回新函数</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;初始化&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> hxb = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;hxb&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hxb);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hxb.<span class="property">name</span>); <span class="comment">// hxb</span></span><br><span class="line">hxb.<span class="title function_">sayName</span>(); <span class="comment">// hxb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现 new</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">fun, ...arg</span>) &#123;</span><br><span class="line">  <span class="comment">// let obj = &#123;&#125;;</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = fun.prototype;</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fun.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  fun.<span class="title function_">call</span>(obj, ...arg);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = <span class="title function_">_new</span>(<span class="title class_">Father</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">name</span>); <span class="comment">// test</span></span><br><span class="line">test.<span class="title function_">sayName</span>(); <span class="comment">// test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">__proto__</span> = <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 继承原型上的方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 使用 call 实现继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>); <span class="comment">// child</span></span><br><span class="line">child.<span class="title function_">sayName</span>(); <span class="comment">// child</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;oqm&#x27;</span> &#125;;</span><br><span class="line">test.<span class="property">sayName</span>.<span class="title function_">call</span>(person); <span class="comment">// oqm</span></span><br><span class="line">test.<span class="property">sayName</span>.<span class="title function_">apply</span>(person); <span class="comment">// oqm</span></span><br><span class="line"><span class="keyword">let</span> newBind = test.<span class="property">sayName</span>.<span class="title function_">bind</span>(person); <span class="comment">// 返回一个函数</span></span><br><span class="line"><span class="title function_">newBind</span>(); <span class="comment">// oqm</span></span><br></pre></td></tr></table></figure>

<ul>
<li>call 和 apply 虽然第一个参数都是要改变上下文的对象，但是 call 后面的参数是以<code>参数列表</code>的形式传入，而 apply 则是以<code>数组</code>的形式传入，并且据说在参数少时，call 的性能要大于 apply。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 求数组中的最值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...testArr)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">call</span>(<span class="literal">null</span>, testArr)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, testArr)); <span class="comment">//  4，直接可以用 testArr 传递进去。</span></span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote>
<p><code>闭包</code>指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。像 Vue 中的 data、setTimeout、匿名函数、编写组件时内部数据处理等场景使用较多。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述代码中，由于 foo 函数内部的 bar 函数使用了 foo 函数内部的变量，并且 bar 函数 return 把变量 return 了出去，这样闭包就产生了，这使得我们可以在外部操作并拿到这些变量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;foo 函数在调用的时候创建了一个执行上下文，可以在此上下文中使用 <code>a，b</code> 变量，理论上说，在 foo 调用结束，函数内部的变量会 js 引擎的垃圾回收机制通过特定的标记回收。<br>&emsp;&emsp;但是在这里，由于闭包的产生，<code>a，b</code> 变量<code>并不会被回收</code>，这就导致<code>我们在全局上下文（或其他执行上下文）中可以访问到函数内部的变量。</code></p>
<blockquote>
<p>无论何时声明新函数并将其赋值给变量，都要存储函数定义和闭包，闭包包含在函数创建时作用域中的所有变量，类似于背包，函数定义附带一个小背包，它的包中存储了函数定义时作用域中的所有变量。</p>
</blockquote>
<ul>
<li>写前端组件时，也可以用于保护我们的组件内部数据，且防止垃圾回收。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Widget</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">      data[key] = value;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title class_">Widget</span>();</span><br><span class="line">test.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hxb&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// hxb</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// Uncaught ReferenceError: data is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以此引出一个经典面试题</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 怎样可以使得上述代码的输出变为 1,2,3,4,5？</span></span><br><span class="line"><span class="comment">// 我们可以把 var 换成 let 实现</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以使用闭包来实现</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, i * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;根据上面的说法，将闭包看成一个背包，<code>背包中包含定义时的变量</code>，每次循环时，将 <code>i</code> 值保存在一个闭包中，当 <code>setTimeout</code> 中定义的操作执行时，则访问对应闭包保存的 <code>i</code> 值，即可解决。</p>
<ul>
<li>one more thing…</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">n, o</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fun</span>(m, n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun</span>(<span class="number">0</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">2</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// undefined 0 0 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>).<span class="title function_">fun</span>(<span class="number">2</span>).<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// undefined 0 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">2</span>);</span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// undefined 0 1 1</span></span><br></pre></td></tr></table></figure>

<h2 id="立即调用的函数表达式-IIFE"><a href="#立即调用的函数表达式-IIFE" class="headerlink" title="立即调用的函数表达式(IIFE)"></a>立即调用的函数表达式(IIFE)</h2><blockquote>
<p>如下就是立即调用函数表达式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 IIFE 可以模拟块级作用域，即在一个函数表达式内部声明变量，然后立即调用这个函数。这样位于函数体作用域的变量就像是在块级作用域中一样。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* IIFE */</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6的块级作用域 */</span></span><br><span class="line"><span class="comment">// 内嵌块级作用域</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 抛出错误</span></span><br><span class="line"><span class="comment">// 循环的块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>IIFE 的另一个作用就是上文中的解决 setTimeout 的输出问题。</p>
</blockquote>
<h2 id="多说几句"><a href="#多说几句" class="headerlink" title="多说几句"></a>多说几句</h2><h3 id="关于-instanceof"><a href="#关于-instanceof" class="headerlink" title="关于 instanceof"></a>关于 <code>instanceof</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>为什么会这样呢？借用大佬的一张图。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/js_function/instanceof.png"></p>
<blockquote>
<p>那么由此就可以得到</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造器 Function 的构造器是它自身</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器 Object 的构造器是 Function（由此可知所有构造器的 constructor 都指向 Function）</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器 Function 的 __proto__ 是一个特殊的匿名函数 function() &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">__proto__</span>); <span class="comment">//function() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个特殊的匿名函数的 __proto__ 指向 Object 的 prototype。</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object 的 __proto__ 指向 Function 的 prototype，也就是上面中所述的特殊匿名函数。</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Function</span>.<span class="property">__proto__</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>结论</li>
</ul>
<ol>
<li>所有的构造器的 <code>constructor</code> 都指向 <code>Function</code>。</li>
<li><code>Function</code> 的 <code>prototype</code> 指向一个<code>特殊匿名函数</code>，而这个<code>特殊匿名函数</code>的 <code>_proto_</code> 指向<code>Object.prototype</code>。</li>
</ol>
<ul>
<li>顺便发一下原型链图</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/js_function/proto.jfif"></p>
<h3 id="关于复杂对象与-new-function-new-Function"><a href="#关于复杂对象与-new-function-new-Function" class="headerlink" title="关于复杂对象与 new function/new Function"></a>关于复杂对象与 <code>new function</code>/<code>new Function</code></h3><h4 id="函数的使用与复杂对象"><a href="#函数的使用与复杂对象" class="headerlink" title="函数的使用与复杂对象"></a>函数的使用与复杂对象</h4><p>&emsp;&emsp;函数是 JavaScript 中很重要的一个语言元素，并且提供了一个 <code>function</code> 关键字和内置对象 <code>Function</code>，下面是其可能的用法和它们之间的关系。</p>
<blockquote>
<p>使用方法一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> test = <span class="number">100</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">test</span> = <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">return</span> test + <span class="variable language_">this</span>.<span class="property">test</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>()); <span class="comment">// 300</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">let</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> test = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> test + <span class="variable language_">this</span>.<span class="property">test</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>()); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;最普通的 function 使用方式，定一个 JavaScript 函数。在大扩号内的变量作用域中，this 指代 func 的所有者，即window对象。</p>
<blockquote>
<p>使用方法二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">let</span> func = <span class="title function_">new</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> test = <span class="number">100</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">test</span> = <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">return</span> test + <span class="variable language_">this</span>.<span class="property">test</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test); <span class="comment">// 300</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="title function_">constructor</span>(<span class="params"></span>)); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这好像是定一个函数，但是实际上这是定一个 JavaScript 中的用户自定义复杂对象，不过这里是个匿名类。这个用法和函数本身的使用基本没有任何关系，在大扩号中会构建一个变量作用域，<code>this</code> 指代这个<code>作用域本身</code>。</p>
<blockquote>
<p>使用方法三</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;let test = 100; this.test = 200; return test + this.test;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> func); <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="title function_">constructor</span>(<span class="params"></span>)); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用系统内置函数对象来构建一个函数，这和方法一中的第一种方式在效果和初始化优先级上都完全相同，就是函数体以字符串形式给出。</p>
<h4 id="new-Function"><a href="#new-Function" class="headerlink" title="new Function"></a>new Function</h4><blockquote>
<p>这个特殊的new Function表面看起来很奇怪，但在实践中显得非常有用。</p>
</blockquote>
<p>&emsp;&emsp;创建一个函数对象的语法是 <code>let func = new Function([arg1, arg2, ...argN], functionBody);</code> 其中，该函数对象的 <strong>N</strong> 个参数放在函数主体参数 <strong>functionBody</strong> 的前面，即函数主体参数必须放在参数列表的最后，也可以无参数 <code>new Function(functionBody)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;console.log(&quot;Hello&quot;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;想象一下，我们必须从字符串创建一个函数。在编写脚本时不知道该函数的代码（这就是我们不使用常规函数的原因），但在执行过程中将会知道，因为我们可能会从服务器或其他来源收到它，这时就可以使用此语法创建函数。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qYXZhc2NyaXB0LmluZm8vbmV3LWZ1bmN0aW9u">参考 new Function<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="关于函数对象时的-this-与-prototype-区别"><a href="#关于函数对象时的-this-与-prototype-区别" class="headerlink" title="关于函数对象时的 this 与 prototype 区别"></a>关于函数对象时的 this 与 prototype 区别</h3><ul>
<li>构造函数中用 this 和 prototype 定义属性或函数方法的区别</li>
</ul>
<p>&emsp;&emsp;<code>this</code> 定义的方式，实例化之后是让每一个实例化对象都有一份属于自己的在构造函数中的对象或者函数方法，而 <code>prototype</code> 定义的方式，实例化之后每个实例化对象共同拥有一份构造函数中的对象或者函数方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* this */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = []; <span class="comment">// 实例变量</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj1 = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">newObj1.<span class="property">a</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">newObj1.<span class="property">fn</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj1.<span class="property">a</span>); <span class="comment">// [1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> newObj1.<span class="property">fn</span>); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj2 = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj2.<span class="property">a</span>); <span class="comment">// []</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> newObj2.<span class="property">fn</span>); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* prototype */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">share</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">share</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">person2.<span class="property">share</span>.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">share</span>); <span class="comment">// [1,2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">share</span>); <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;最后，一般而言，用 this 来定义构造函数的属性较多，用 prototype 定义构造函数的方法较多，因为属性较于方法来说使用频率更高。你想一想如果每次实例化对象都要执行定义的方法，那对于内存来说就是一种浪费。</p>
<ul>
<li>其他</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$newObj1 = <span class="title function_">new</span> (<span class="keyword">function</span> <span class="title function_">testNew1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  testNew1.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">prototypeVar</span> = <span class="string">&#x27;prototype&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">thisVar</span> = <span class="string">&#x27;this&#x27;</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>($newObj1)); <span class="comment">// [&#x27;this&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>($newObj1)); <span class="comment">// // &#123;prototypeVar: &#x27;prototype&#x27;, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testNew2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  testNew2.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">prototypeVar</span> = <span class="string">&#x27;prototype&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">thisVar</span> = <span class="string">&#x27;this&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$newObj2 = <span class="keyword">new</span> <span class="title function_">testNew2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($newObj2.<span class="property">__proto__</span> == testNew2.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>($newObj2)); <span class="comment">// [&#x27;this&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>($newObj2)); <span class="comment">// &#123;prototypeVar: &#x27;prototype&#x27;, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testNew3 = <span class="title function_">new</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _selfVal = <span class="string">&#x27;prototype&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">testNew3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    testNew3.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">prototypeVar</span> = _selfVal;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">thisVar</span> = <span class="string">&#x27;this&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> testNew3;</span><br><span class="line">&#125;)();</span><br><span class="line">$newObj3 = <span class="keyword">new</span> <span class="title function_">testNew3</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($newObj3.<span class="property">thisVar</span>); <span class="comment">// this</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($newObj3.<span class="property">prototypeVar</span>); <span class="comment">// prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>($newObj3)); <span class="comment">// [&#x27;this&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>($newObj3)); <span class="comment">// &#123;prototypeVar: &#x27;prototype&#x27;, constructor: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($newObj3.<span class="property">__proto__</span> == testNew3.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMzY4NjA5NA==">转改自思否<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Function</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Promise</title>
    <url>/js_promise/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>简单介绍一下 Promise 以及他的使用、异常处理、同步处理等等…</p>
</div>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;我们都知道 JavaScript 是一种同步编程语言，上一行出错就会影响下一行的执行，但是我们需要数据的时候总不能每次都等上一行执行完成，这时就可以使用回调函数让它像异步编程语言一样工作。<br>&emsp;&emsp;像 NodeJS 就是采用异步回调的方式来处理需要等待的事件，使得代码会继续往下执行不用在某个地方等待着。但是也有一个不好的地方，当我们有很多回调的时候，比如这个回调执行完需要去执行下个回调，然后接着再执行下个回调，<strong>这样就会造成层层嵌套，代码不清晰，很容易进入“回调监狱”</strong>。。。<br>&emsp;&emsp;所以 ES6 新出的 <code>Promise</code> 对象以及 ES7 的 <code>async、await</code> 都可以解决这个问题。<br>&emsp;&emsp;Promise 是用来处理异步操作的，可以让我们写异步调用的时候写起来更加优雅，更加美观便于阅读。Promise 为承诺的意思，意思是使用 Promise 之后他肯定会给我们答复，无论成功或者失败都会给我们一个答复，所以我们就不用担心他跑了哈哈。<br>&emsp;&emsp;Promise 有三种状态：<strong>pending</strong>（未决定），<strong>resolved</strong>（完成<code>fulfilled</code>），<strong>rejected</strong>（失败）。只有异步返回时才可以改变其状态，因此我们收到的 Promise 过程状态一般只有两种：<code>pending-&gt;fulfilled</code> 或者 <code>pending-&gt;rejected</code>。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><blockquote>
<p>直接上代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseTest</span>(<span class="params">boolType = <span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// do something 然后返回一个 Promise 对象</span></span><br><span class="line">    <span class="keyword">if</span> (boolType) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise 的 then 接受两个参数</span></span><br><span class="line"><span class="comment">// 第一个是成功的 resolved 的成功回调</span></span><br><span class="line"><span class="comment">// 另一个是失败的 rejected 的失败回调【可选】。</span></span><br><span class="line"><span class="comment">// 并且 then 也可以返回 Promise 对象，这样就可以实现链式调用。</span></span><br><span class="line"><span class="comment">// 栗子如下</span></span><br><span class="line"><span class="title function_">promiseTest</span>(<span class="literal">true</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span>后的处理A`</span>));</span><br><span class="line"><span class="title function_">promiseTest</span>(<span class="literal">false</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span>后的处理B`</span>),</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span>后的处理B`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="title function_">promiseTest</span>(<span class="literal">false</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span>后的处理C`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用，这种写法是不是比我们嵌套回调地狱优美多啦~</span></span><br><span class="line"><span class="title function_">promiseTest</span>(<span class="literal">false</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="title function_">promiseTest</span>(<span class="literal">true</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一次调用失败后尝试第二次成功了！&#x27;</span>));</span><br><span class="line"><span class="comment">// catch 不仅可以捕获失败和 return Promise，也可以捕获异常。</span></span><br><span class="line"><span class="title function_">promiseTest</span>(<span class="literal">true</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> value1)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br><span class="line">成功后的处理A</span><br><span class="line">失败后的处理B</span><br><span class="line">失败后的处理C</span><br><span class="line">第一次调用失败后尝试第二次成功了！</span><br><span class="line"><span class="title class_">ReferenceError</span>: value1 is not defined at ...</span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外当我们需要在方法中等待 <code>Promise</code> 返回时，需要给方法添加 <code>async</code> 修饰，并使用 <code>await</code> 等待。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunc</span>(<span class="params"></span>) &#123; <span class="comment">// 只要添加了 async 关键字，该方法的返回值就是一个 Promise。</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">123</span>), <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncFunc</span>(); <span class="comment">// Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="title function_">asyncFunc</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">asyncFunc</span>(); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h3 id="Api-方法"><a href="#Api-方法" class="headerlink" title="Api 方法"></a>Api 方法</h3><h4 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h4><blockquote>
<p>将现有对象转为 Promise 对象 resolved，Promise.resolve(‘test’) 相当于 new Promise((resolve) =&gt; resolve(‘test’));</p>
</blockquote>
<h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><blockquote>
<p>将现有对象转为 Promise 对象 rejected，Promise.rejected(‘test’) 相当于 new Promise((rejected) =&gt; rejected(‘test’));</p>
</blockquote>
<h4 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h4><blockquote>
<p>then() 方法返回一个 Promise，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promiseTest.then(onFulfilled[, onRejected]);</span></span><br><span class="line">promiseTest.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fulfillment</span></span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// rejection</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>onFulfilled 可选<ul>
<li>当 Promise 变成接受状态（fulfilled）时调用的函数。该函数有一个参数，即接受的最终结果（the fulfillment value）。</li>
<li>如果该参数不是函数，则会在内部被替换为 (x) =&gt; x，即原样返回 promise 最终结果的函数。</li>
</ul>
</li>
<li>onRejected 可选<ul>
<li>当 Promise 变成拒绝状态（rejected）时调用的函数。该函数有一个参数，即拒绝的原因（rejection reason）。</li>
<li>如果该参数不是函数，则会在内部被替换为一个 “Thrower” 函数 (it throws an error it received as argument)。</li>
</ul>
</li>
</ul>
<h4 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h4><blockquote>
<p>catch() 方法返回一个 Promise，并且处理拒绝的情况。它的行为与调用 <code>Promise.prototype.then(undefined,onRejected)</code> 相同。事实上调用 <code>obj.catch(onRejected)</code> 其实就是 <code>obj.then(undefined, onRejected)</code>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promiseTest.catch(onRejected);</span></span><br><span class="line">promiseTest.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">   <span class="comment">// 拒绝/异常处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>onRejected<ul>
<li>当 Promise 被 rejected 时，被调用的一个Function。该函数拥有一个参数：reason/rejection 的原因。</li>
<li>如果 onRejected 抛出一个错误或返回一个本身失败的 Promise，通过 catch() 返回的 Promise 被 rejected。否则，它将显示为成功（resolved）。</li>
</ul>
</li>
</ul>
<h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally"></a>Promise.prototype.finally</h4><blockquote>
<p>finally() 方法返回一个 Promise。在 Promise 结束时，<code>无论结果是 fulfilled 或者是 rejected，都会执行指定的回调函数。</code>这为在 Promise 是否成功完成后都需要执行的代码提供了一种方式。这避免了同样的语句需要在 <code>then()</code> 和 <code>catch()</code> 中 <strong>各写一次</strong> 的情况。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promiseTest.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do my things</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promiseTest.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do my things</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do my things</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h4><blockquote>
<p>该 Promise.allSettled() 方法返回一个在所有给定的 Promise <code>都已经 fulfilled 或 rejected 后的 Promise</code>，并带有一个对象数组，每个对象表示对应的 Promise 结果。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;test&#x27;</span>), <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span> results.<span class="title function_">forEach</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">status</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br><span class="line">fulfilled</span><br><span class="line">rejected</span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br></pre></td></tr></table></figure>

<h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><blockquote>
<p>Promise.all() 方法接收一个 Promise 的 iterable 类型<code>（Array，Map，Set都属于 ES6 的 iterable 类型）</code>的输入，并且只返回一个 Promise 实例，那个输入的所有 Promise 的 resolve 回调的结果是一个数组。<br>它的 <code>resolve</code> 回调执行是在所有输入的 Promise 的 resolve 回调都结束，或者输入的 iterable 里没有 Promise 了的时候。<br>它的 <code>reject</code> 回调执行是只要任何一个输入的 Promise 的 reject 回调执行或者输入不合法的 Promise 就会立即抛出错误，并且 reject 的是第一个抛出的错误信息。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 当我们需要同步执行多个 Promise 的时候，可以使用 Promise.all() 来&quot;并发请求&quot;，减少等待时间。</span></span><br><span class="line"><span class="comment">/// 举个简单的栗子：</span></span><br><span class="line"><span class="comment">/// 假设我需要三次请求获取数据，然后渲染页面。那么我们看一下使用 Promise.all 和不使用的区别。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;不使用Promise.all&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟请求第一笔数据</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟请求第一笔数据</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟请求第一笔数据</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;789&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;不使用Promise.all&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;使用Promise.all&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">all</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;789&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...(<span class="keyword">await</span> <span class="title function_">all</span>()));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;使用Promise.all&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br><span class="line"><span class="number">123</span> <span class="number">456</span> <span class="number">789</span></span><br><span class="line">不使用<span class="title class_">Promise</span>.<span class="property">all</span>: <span class="number">8569.14794921875</span> ms</span><br><span class="line"><span class="number">123</span> <span class="number">456</span> <span class="number">789</span></span><br><span class="line">使用<span class="title class_">Promise</span>.<span class="property">all</span>: <span class="number">3006.345947265625</span> ms</span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们可以看到，不使用 all 的情况下我们需要等待的时间会长很多，而使用 all 之后，我们的请求相当于并发，大大节约了时间。</li>
</ul>
<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h4><blockquote>
<p>Promise.race(iterable) 方法返回一个 Promise，一旦迭代器中的某个 Promise 解决或拒绝，返回的 Promise 就会解决或拒绝。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 这个其实就是赛道的意思，哪个 Promise 先完成，就返回哪个。</span></span><br><span class="line"><span class="comment">/// 举个简单的栗子：</span></span><br><span class="line"><span class="comment">/// 假设我们需要从三台服务器上拿取数据，那么那台先返回我们就用哪台的数据。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">race</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第一台服务器 1s</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第一台服务器 2s</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第一台服务器 3s</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;789&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;raceTime&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">race</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;raceTime&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="attr">raceTime</span>: <span class="number">1056.11083984375</span> ms</span><br><span class="line"><span class="comment">/* ---打印结果--- */</span></span><br></pre></td></tr></table></figure>

<h4 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h4><blockquote>
<p>Promise.any() 接收一个 Promise 可迭代对象，只要其中的一个 Promise 成功，就返回那个已经成功的 Promise。如果可迭代对象中没有一个 Promise 成功 <strong>（即所有的 Promise 都失败/拒绝）</strong>，就返回一个失败的 <code>Promise 和 AggregateError 类型的实例</code>，<strong>它是 Error 的一个子类，用于把单一的错误集合在一起</strong>。本质上，这个方法和 Promise.all() 是相反的。</p>
</blockquote>
<div class="note warning"><p>注意：Promise.any() 方法依然是实验性的，尚未被所有的浏览器完全支持。它当前处于 TC39 第四阶段草案。</p>
</div>

<p>&emsp;&emsp;Promise.any() 与 Promise.race() 方法不同，<code>Promise.race()</code> 方法主要关注 Promise <code>是否已解决</code>，而<code>不管其被解决(成功)还是被拒绝(失败)</code>。所以使用 Promise.any 来获取多台服务器数据时会更合理。</p>
<h2 id="优雅的进行异常处理"><a href="#优雅的进行异常处理" class="headerlink" title="优雅的进行异常处理"></a>优雅的进行异常处理</h2><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><ul>
<li>之前刷视频有看到一些小问题：<ul>
<li>使用多个 await 时，前一个出现异常，如何不影响后续执行？</li>
<li>我们每次使用 Promise 都需要处理异常吗？</li>
<li>如何统一处理异常和捕获异步异常呢？</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 我们先定义几个函数来测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>); <span class="comment">// 正常 1s 执行完毕并成功</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = abc + <span class="number">1</span>;  <span class="comment">// 出现异常的情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> y = abcabc + <span class="number">1</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(y);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不属于 Promise 内部错误，请自己包裹。&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不包裹则会冒泡到 window.onerror，若再未处理则报错到控制台。示例：test4！&#x27;</span>);</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;test3 error&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> z = abcabcabc + <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(z);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;test4 error&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先我们看第一个问题，如果我们直接这样执行，那么由于 <code>test2()</code> 出现错误，<code>test1()</code> 肯定是无法执行的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">test2</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test1</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>这时候我们需要这样写，但是这样虽然可以解决这个问题，但是如果前面的 Promise 数量一多，那么可读性就大大降低了！</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">test2</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test1</span>();</span><br><span class="line">或</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">test2</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test1</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>再结合后面两个问题，我查看了一些资料，包括 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmdyb3NzbWFuLmlvL2hvdy10by13cml0ZS1hc3luYy1hd2FpdC13aXRob3V0LXRyeS1jYXRjaC1ibG9ja3MtaW4tamF2YXNjcmlwdC8=">Dima Grossman 的 to.js<i class="fa fa-external-link-alt"></i></span>，所以我们可以采用终极方案，话不多说直接上代码。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先我参考了 to.js，扩展 Promise 原型方法，用来直接帮助执行且处理异常。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; <span class="variable">res</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; <span class="variable">rej</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">to</span> = <span class="keyword">function</span> (<span class="params">res, rej</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res &amp;&amp; <span class="title function_">res</span>(data);</span><br><span class="line">    <span class="comment">// console.log(data);</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    rej &amp;&amp; <span class="title function_">rej</span>(err); <span class="comment">//可去除此行，全局定义处理错误函数，用以解决第三个问题。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// 如果没定义前面的 rej 回调处理函数，我们可以帮助处理，例如此处可以帮我们处理 test2 的异常。</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局捕获异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; <span class="variable">message</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; <span class="variable">source</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; <span class="variable">lineno</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; <span class="variable">colno</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; <span class="variable">error</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>, &#123; message, source, lineno, colno, error &#125;);</span><br><span class="line">  <span class="comment">//do something 全局处理</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// return true 不在控制台报错</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/// 这个可以帮助我们捕获 test4 setTimeout 中的异步异常。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时我们再如此执行，均不会报错。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">test1</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test2</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test3</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test4</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前面报错不会执行&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test1</span>();</span><br><span class="line"><span class="title function_">test2</span>();</span><br><span class="line"><span class="title function_">test3</span>();</span><br><span class="line"><span class="title function_">test4</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前面报错不会执行&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test1</span>().<span class="title function_">to</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test2</span>().<span class="title function_">to</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test3</span>().<span class="title function_">to</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">test4</span>().<span class="title function_">to</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前面报错依然会执行&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test1</span>().<span class="title function_">to</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`自定义处理的<span class="subst">$&#123;x&#125;</span>`</span>)); <span class="comment">// 如果需要自定义处理也可以传入回调函数，我们的扩展 to 原型方法跟 then 一样是支持两个参数的。</span></span><br><span class="line"><span class="title function_">test2</span>().<span class="title function_">to</span>();</span><br><span class="line"><span class="title function_">test3</span>().<span class="title function_">to</span>();</span><br><span class="line"><span class="title function_">test4</span>().<span class="title function_">to</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前面报错依然会执行&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/loading.gif" data-original="/js_promise/result.png"></p>
<p><img data-src="/images/loading.gif" data-original="/js_promise/result_to.png"></p>
<h3 id="多说几句"><a href="#多说几句" class="headerlink" title="多说几句"></a>多说几句</h3><blockquote>
<p>另外补充一下，说到 Promise 的优雅处理，我们平时写的时候前往不要像下面一样嵌套使用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">request1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;result1&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request2</span>(<span class="params">need1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(need1 + <span class="string">&#x27;result2&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request3</span>(<span class="params">need2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(need2 + <span class="string">&#x27;result3&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">request1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">request2</span>(res1).<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request3</span>(res2).<span class="title function_">then</span>(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这种写法可读性太差且不好维护</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;而应该是每次调用 then 方法后，<strong>在 then 方法中 return 下一次需要用到的数据</strong>。然后 then 方法会返回一个 Promise 实例，<strong>再继续使用 then 通过 res 参数可以获取上一次 return 的数据</strong>，并在该 then 方法中发送后续的异步请求，这样就达到了我们之前说过的链式调用传递效果，<strong>而且 reject 抛出错误的时候，只需在最后 catch 一层就可以了</strong>，这样无论是哪个 then reject 了，<strong>都会在最后的 catch 这里捕获到错误</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">request1</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res1</span>) =&gt;</span> <span class="title function_">request2</span>(res1))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> <span class="title function_">request3</span>(res2))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res3</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res3))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异常处理&#x27;</span>, e));</span><br><span class="line"><span class="comment">// 没错就是这样，作为强迫症程序员，就是要优雅(*v*)！</span></span><br></pre></td></tr></table></figure>

<h3 id="实现-Promise-Retry"><a href="#实现-Promise-Retry" class="headerlink" title="实现 Promise Retry"></a>实现 Promise Retry</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">retry</span> = <span class="keyword">function</span> (<span class="params">count = <span class="number">0</span>, delay = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="title function_">async</span> (e) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 此处也可使用 setTimeout 实现</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">sleep</span>(delay);</span><br><span class="line">        --count;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;重试&#x27;</span>, count);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="title function_">retry</span>(count, delay));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;重试结束&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params">milliseconds</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, milliseconds));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;test&#x27;</span>)).<span class="title function_">retry</span>(<span class="number">3</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/loading.gif" data-original="/js_promise/retry.png"></p>
<h3 id="提一下-yield"><a href="#提一下-yield" class="headerlink" title="提一下 yield*"></a>提一下 yield*</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL3lpZWxkKg==">参考文章<i class="fa fa-external-link-alt"></i></span>，虽然与本文无关，但是记录一下。</p>
</blockquote>
<p>&emsp;&emsp;<code>yield *</code> 表达式用于委托给另一个 generator 或可迭代对象。表达式迭代操作数，并产生它返回的每个值。我们可以看成使用此关键字让方法一步步执行，他会返回一个对象包含 <code>value</code>（返回值） 和 <code>done</code>（是否完成）。</p>
<ul>
<li>栗子</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">yieldFunc</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">  <span class="keyword">yield</span>* <span class="variable language_">arguments</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印参数后的第一步&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;即将结束&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;下一步结束&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> runFuncs = <span class="title function_">yieldFunc</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// &#123;value: 4, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// &#123;value: 5, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// &#123;value: 6, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// 打印参数后的第一步，&#123;value: &quot;hello world&quot;, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// 即将结束，&#123;value: &quot;下一步结束&quot;, done: false&#125;</span></span><br><span class="line">runFuncs.<span class="title function_">next</span>(); <span class="comment">// 结束，&#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假如我们一个验证需要多步，我们可以给 next() 传参，传递的值在原函数体中会变成上步得到的结果。</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">yield</span> (a + b);</span><br><span class="line">  <span class="comment">// x 的值是我们根据第一步的结果判断后，通过 next 传递给他的。</span></span><br><span class="line">  <span class="keyword">const</span> y = <span class="keyword">yield</span> x == <span class="number">2</span>; <span class="comment">// 例如此处：xxx.next(6) 则 x = 6; xxx.next(7) 则 x = 7; 而不管我们传递的 a b 是什么。</span></span><br><span class="line">  <span class="keyword">let</span> z = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;认证成功！&#x27;</span>);</span><br><span class="line">    z = <span class="string">&#x27;已登录&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;认证失败！&#x27;</span>);</span><br><span class="line">    z = <span class="string">&#x27;未登录&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> authTest = <span class="title function_">test</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> hasNext = authTest.<span class="title function_">next</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasNext);</span><br><span class="line"><span class="keyword">while</span> (!hasNext.<span class="property">done</span>) &#123;</span><br><span class="line">  hasNext = authTest.<span class="title function_">next</span>(hasNext.<span class="property">value</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hasNext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: true, done: false&#125;</span></span><br><span class="line"><span class="comment">// 认证成功！</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;已登录&#x27;, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> authTestTrue = <span class="title function_">test</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> next = authTestTrue.<span class="title function_">next</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(next); <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line">next = authTestTrue.<span class="title function_">next</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(next); <span class="comment">// &#123;value: false, done: false&#125;</span></span><br><span class="line">next = authTestTrue.<span class="title function_">next</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 认证成功！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(next); <span class="comment">// &#123;value: &#x27;已登录&#x27;, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="经验法则"><a href="#经验法则" class="headerlink" title="经验法则"></a>经验法则</h2><ul>
<li>使用异步或阻塞代码时，请使用 Promise。</li>
<li>为了代码的可读性，<code>resolve</code> 方法对应 then, <code>reject</code> 对应 catch。</li>
<li>确保同时写入 <code>.catch</code> 和 <code>.then</code> 方法来实现所有的 Promise。</li>
<li>如果在 <strong>resolve/reject</strong> 两种情况下都需要做一些事情，请使用 <code>.finally</code>。</li>
<li>我们每次改变单个 Promise (单一原则)。</li>
<li>我们可以在一个 Promise 中添加多个处理程序。</li>
<li>Promise 对象中所有方法的返回类型，无论是静态方法还是原型方法，都是 Promise。</li>
<li>在 <code>Promise.all</code> 中，无论哪个 Promise 首先未完成，Promise 的顺序都保持在值变量中。</li>
</ul>
<blockquote>
<p>基础部分参考公众号：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3UvbWlubmFuaXRrb25n">前端小智<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript String、Array、Object、Date 常用方法小结</title>
    <url>/string_array_object_date_js/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>&emsp;&emsp;反正闲着也是闲着，稍微整理总结了一下 JavaScript 字符串、数组、对象、时间的常用方法，阿彪出品，必属精品/滑稽。</p>
</div>
<span id="more"></span>

<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回在指定位置的字符</span></span><br><span class="line"><span class="string">&quot;12345&quot;</span>.<span class="title function_">charAt</span>(<span class="number">0</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt"></a>charCodeAt</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回在指定的位置的字符的 Unicode 编码</span></span><br><span class="line"><span class="string">&quot;12345&quot;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); <span class="comment">// 49</span></span><br></pre></td></tr></table></figure>

<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接字符串</span></span><br><span class="line"><span class="string">&quot;123&quot;</span>.<span class="title function_">concat</span>(<span class="string">&quot;456&quot;</span>); <span class="comment">// &quot;123456&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf/lastIndexOf"></a>indexOf/lastIndexOf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看字符出现的位置</span></span><br><span class="line"><span class="string">&quot;123451&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;1&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="string">&quot;123451&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;1&quot;</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。</span></span><br><span class="line"><span class="string">&quot;doubleam 666 123&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/\d+/g</span>); <span class="comment">// [&quot;666&quot;, &quot;123&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，如果没有找到任何匹配的子串，则返回 -1。</span></span><br><span class="line"><span class="string">&quot;doubleam 666 123&quot;</span>.<span class="title function_">search</span>(<span class="string">&quot;6&quot;</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="string">&quot;doubleam 666 123&quot;</span>.<span class="title function_">search</span>(<span class="string">&quot;9&quot;</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</span></span><br><span class="line"><span class="string">&quot;doubleam 666&quot;</span>.<span class="title function_">replace</span>(<span class="string">&quot;666&quot;</span>, <span class="string">&quot;999&quot;</span>); <span class="comment">// &quot;doubleam 999&quot;</span></span><br><span class="line"><span class="string">&quot;doubleam 666&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(doubleam)\s(666)/g</span>, <span class="string">&quot;$2 $1&quot;</span>); <span class="comment">// 666 doubleam</span></span><br><span class="line"><span class="string">&quot;doubleam 666&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(doubleam)\s(666)/g</span>, <span class="keyword">function</span>(<span class="params">$1, $2, $3</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>($1, $2, $3);<span class="comment">//doubleam 666, doubleam, 666</span></span><br><span class="line">  <span class="keyword">return</span> $1 + $2 + $3;</span><br><span class="line">&#125;); <span class="comment">// doubleam 666doubleam666</span></span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取字符串的片断，并在新的字符串中返回被提取的部分。</span></span><br><span class="line"><span class="comment">// str.slice(start, end);</span></span><br><span class="line"><span class="comment">// start: 要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</span></span><br><span class="line"><span class="comment">// end：紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// &#x27;i&#x27;</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">slice</span>(<span class="number">2</span>); <span class="comment">// &#x27;love oqm&#x27;</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">slice</span>(-<span class="number">3</span>); <span class="comment">// &#x27;oqm&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// &#x27;i&#x27;</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">substr</span>(<span class="number">2</span>); <span class="comment">// &#x27;love oqm&#x27;</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">substr</span>(-<span class="number">3</span>); <span class="comment">// &#x27;oqm&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同上，但不支持负数，尾部开区间 [start, end)。</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// &#x27;i&#x27;</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">substring</span>(<span class="number">2</span>); <span class="comment">// &#x27;love oqm&#x27;</span></span><br><span class="line"><span class="string">&quot;i love oqm&quot;</span>.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">4</span>); <span class="comment">// &#x27;i lo&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把字符串分割为字符串数组</span></span><br><span class="line"><span class="string">&quot;1,2,3,4,5&quot;</span>.<span class="title function_">split</span>(); <span class="comment">// [&quot;1,2,3,4,5&quot;]</span></span><br><span class="line"><span class="string">&quot;1,2,3,4,5&quot;</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// [&quot;1&quot;, &quot;,&quot;, &quot;2&quot;, &quot;,&quot;, &quot;3&quot;, &quot;,&quot;, &quot;4&quot;, &quot;,&quot;, &quot;5&quot;]</span></span><br><span class="line"><span class="string">&quot;1,2,3,4,5&quot;</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>); <span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="toLocaleLowerCase-toLocaleUpperCase"><a href="#toLocaleLowerCase-toLocaleUpperCase" class="headerlink" title="toLocaleLowerCase/toLocaleUpperCase"></a>toLocaleLowerCase/toLocaleUpperCase</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把字符串转换为小/大写</span></span><br><span class="line"><span class="string">&#x27;aBc&#x27;</span>.<span class="title function_">toLocaleLowerCase</span>(); <span class="comment">// &#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;aBc&#x27;</span>.<span class="title function_">toLocaleUpperCase</span>(); <span class="comment">// &#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="toLowerCase-toUpperCase"><a href="#toLowerCase-toUpperCase" class="headerlink" title="toLowerCase/toUpperCase"></a>toLowerCase/toUpperCase</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把字符串转换为小/大写</span></span><br><span class="line"><span class="string">&#x27;aBc&#x27;</span>.<span class="title function_">toLowerCase</span>(); <span class="comment">// &#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;aBc&#x27;</span>.<span class="title function_">toUpperCase</span>(); <span class="comment">// &#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h3><blockquote>
<p>for-of 可以遍历字符串，除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</p>
</blockquote>
<h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// at方法可以识别 Unicode 编号大于 0xFFFF 的字符，返回正确的字符。</span></span><br><span class="line"><span class="string">&#x27;我爱你&#x27;</span>.<span class="title function_">at</span>(<span class="number">0</span>); <span class="comment">// &quot;我&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看指定字符是否存在与字符串中</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.<span class="title function_">includes</span>(<span class="string">&#x27;d&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="startsWith-endsWith"><a href="#startsWith-endsWith" class="headerlink" title="startsWith/endsWith"></a>startsWith/endsWith</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看指定字符是否存在与字符串开头/结尾</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;m&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// repeat 方法返回一个新字符串，表示将原字符串重复n次。</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>); <span class="comment">// &quot;doubleamdoubleamdoubleam&quot;</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">0</span>); <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart/padEnd"></a>padStart/padEnd</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串长度补全，默认使用空格补全长度。</span></span><br><span class="line"><span class="string">&quot;1.01&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// &quot;1.010&quot;</span></span><br><span class="line"><span class="comment">// 如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</span></span><br><span class="line"><span class="string">&quot;1.010&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// &quot;1.010&quot;</span></span><br><span class="line"><span class="comment">// 如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</span></span><br><span class="line"><span class="string">&#x27;09-28&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;yyyy-mm-dd&#x27;</span>); <span class="comment">// &quot;yyyy-09-28&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 去除首尾空格</span></span><br><span class="line"><span class="string">&quot; doubleam &quot;</span>.<span class="title function_">trim</span>(); <span class="comment">// &quot;doubleam&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="trimLeft-trimRight-trimStart-trimEnd"><a href="#trimLeft-trimRight-trimStart-trimEnd" class="headerlink" title="trimLeft/trimRight/trimStart/trimEnd"></a>trimLeft/trimRight/trimStart/trimEnd</h3><blockquote>
<p>字面意思</p>
</blockquote>
<h3 id="生成-DOM-string"><a href="#生成-DOM-string" class="headerlink" title="生成 DOM string"></a>生成 DOM string</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有趣</span></span><br><span class="line"><span class="string">&quot;baidu&quot;</span>.<span class="title function_">link</span>(<span class="string">&#x27;baidu.com&#x27;</span>); <span class="comment">// &quot;&lt;a href=\&quot;baidu.com\&quot;&gt;baidu&lt;/a&gt;&quot;</span></span><br><span class="line"><span class="string">&quot;baidu&quot;</span>.<span class="title function_">sub</span>(); <span class="comment">// &quot;&lt;sub&gt;baidu&lt;/sub&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h2><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 console.time(&#x27;test&#x27;); 与 console.timeEnd(&#x27;test&#x27;); 测试发现，数组遍历速度 for &gt; for-of &gt; forEach &gt; filter &gt; map &gt; for-in(可适用于对象)/reduce &gt; $.each([1, 2, 3, 4], (index, value) =&gt; console.log(value));(JQ)</span></span><br><span class="line"><span class="comment">// 以下介绍遍历方法均不可跳出，且 map 为迭代严格意义上不算循环，若想实现跳出或部分判断可使用 ES6 for-of、find或some...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce 方法有两个个参数，第一个参数是一个callback，用于针对数组项的操作(total, currentValue, currentIndex, selfArray)；第二个参数则是传入的初始值，这个初始值用于单个数组项的操作。需要注意的是，reduce方法返回值并不是数组，而是返回经过叠加处理后的结果；不改变原数组。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y); <span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> testArr = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">1</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">2</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">3</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">4</span>&#125;];</span><br><span class="line">testArr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">total, currentValue, currentIndex, selfArray</span>) &#123;</span><br><span class="line">  <span class="comment">// total 为上一次调用返回的值，或者是提供的初始值 0。 // 0,1,3,6,10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(selfArray[currentIndex].<span class="property">name</span>); <span class="comment">// a,b,c,d</span></span><br><span class="line">  <span class="keyword">return</span> total + currentValue.<span class="property">age</span>;</span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map 方法对数组的每一项都运行给定的函数，返回每次函数调用的结果组成一个新数组，不改变原数组。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">value, index, selfArray</span>) =&gt;</span> value * <span class="number">10</span>); <span class="comment">// [10,20,30,40]</span></span><br></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forEach 数组遍历</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, selfArray</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// push 方法可向数组的末尾添加一个或多个元素，并返回新的长度，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">push</span>(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pop 方法用于删除并返回数组的最后一个元素，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">pop</span>(); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure>

<h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// shift 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">shift</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [2,3,4]</span></span><br></pre></td></tr></table></figure>

<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unshift 方法可向数组的开头添加一个或更多元素，并返回新的长度，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">unshift</span>(-<span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [-1,0,1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<h3 id="concat-1"><a href="#concat-1" class="headerlink" title="concat"></a>concat</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concat 方法用于连接两个或多个数组，返回新数组。</span></span><br><span class="line">[<span class="number">1</span>].<span class="title function_">concat</span>([<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>]); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// join 方法用于把数组中的所有元素放入一个字符串，元素是通过指定的分隔符进行分隔的，默认使用 &#x27;,&#x27; 号分隔，不改变原数组，返回字符串。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>); <span class="comment">// 1/2/3/4</span></span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter 对数组的每一项都运行给定的函数，返回结果为 true 组成的数组，不改变原数组，返回新数组。</span></span><br><span class="line">[<span class="literal">null</span>, <span class="literal">undefined</span>, <span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;biugle&#x27;</span>].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>); <span class="comment">// [1,&#x27;biugle&#x27;]</span></span><br><span class="line">[<span class="literal">null</span>, <span class="literal">undefined</span>, <span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;biugle&#x27;</span>].<span class="title function_">filter</span>(<span class="function">(<span class="params">value, index, selfArray</span>) =&gt;</span> value == <span class="string">&#x27;biugle&#x27;</span>); <span class="comment">// [biugle]</span></span><br></pre></td></tr></table></figure>

<h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// every 对数组的每一项都运行给定的函数，每一项都返回 true，则返回 true，不改变原数组，返回 bool。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">every</span>(<span class="function">(<span class="params">value, index, selfArray</span>) =&gt;</span> value &lt; <span class="number">5</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some 对数组的每一项都运行给定的函数，任意一项返回 true，则返回 true，不改变原数组，返回 bool。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">value, index, selfArray</span>) =&gt;</span> value == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="at-1"><a href="#at-1" class="headerlink" title="at"></a>at</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// at 获取指定下标元素，同 array[index]。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">at</span>(<span class="number">3</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice"></a>slice</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slice 返回一个新的数组，包含从 start 到 end (尾部开区间，不包括该元素。)的 selfArray 中的元素，不改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// splice 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</span></span><br><span class="line"><span class="comment">// 如果从 selfArray 中删除了元素，则返回的是含有被删除的元素的数组。该方法会直接对数组进行修改。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">// [2, 3] ps: 在 index 为 1 开始，删除 2 个元素，添加 5, 6。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [1, 5, 6, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sort 排序按照 Unicode Code 位置排序，默认升序，改变原数组。</span></span><br><span class="line"><span class="comment">// 需传入比较函数 function(a, b)，a/b为相比较的值。</span></span><br><span class="line"><span class="comment">// 若返回一个 &lt; 0 的值，则 a 应该在 b 前面。</span></span><br><span class="line"><span class="comment">// 若返回 = 0 的值，a 与 b 点位置相对不变。</span></span><br><span class="line"><span class="comment">// 若返回一个 &gt; 0 的值，则 a 应该在 b 后面。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>].<span class="title function_">sort</span>(); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">15</span>].<span class="title function_">sort</span>(); <span class="comment">// [1, 15, 16, 2, 3, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">15</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// [1, 2, 3, 4, 15, 16]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">15</span>].<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;b&#125;</span> - <span class="subst">$&#123;a&#125;</span> = <span class="subst">$&#123;b - a&#125;</span>`</span>); </span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;); <span class="comment">// [16, 15, 4, 3, 2, 1]</span></span><br><span class="line">[<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">sort</span>(); <span class="comment">// [&quot;aaa&quot;, &quot;bb&quot;, &quot;c&quot;]</span></span><br><span class="line">[<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">sort</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">length</span> - b.<span class="property">length</span>); <span class="comment">// [&quot;c&quot;, &quot;bb&quot;, &quot;aaa&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reverse 方法用于颠倒数组中元素的顺序，返回的是颠倒后的数组，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr); <span class="comment">// [4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们也可以通过 sort 来进行数组颠倒，只需返回 &lt; 0 的值即可。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">sort</span>(<span class="function">() =&gt;</span> -<span class="number">1</span>); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// indexOf 和 lastIndexOf 都接受两个参数：查找的值、查找起始位置。不存在，返回 -1，存在，返回位置。indexOf 是从前往后查找，lastIndexOf 是从后往前查找。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">testArr.<span class="title function_">indexOf</span>(<span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line">testArr.<span class="title function_">lastIndexOf</span>(<span class="number">1</span>); <span class="comment">// 3</span></span><br><span class="line">testArr.<span class="title function_">indexOf</span>(<span class="number">4</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// find 和 findIndex 传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。findIndex 返回的是下标。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index, selfArray</span>) =&gt;</span> item &gt; <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line">testArr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fill(value, start, end) 用新元素替换掉数组内的元素，可以指定替换下标范围(尾部开区间)，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>); <span class="comment">// [1, 0, 0, 4]</span></span><br><span class="line">testArr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>); <span class="comment">// [1, 0, 0, 0]</span></span><br></pre></td></tr></table></figure>

<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// copyWithin(target, start, end) 选择数组的某个下标，从该位置开始复制数组元素，默认从 0 开始复制，也可以指定要复制的元素范围(尾部开区间)，改变原数组。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testArr.<span class="title function_">copyWithin</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>); <span class="comment">// [1, 2, 1, 2] ps: 从 index 2 开始复制 [0,2) 之间的元素，所以原数组 3,4 被替换为 1,2。</span></span><br></pre></td></tr></table></figure>

<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from 将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组。</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// [1,2,3,4]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;1234&#x27;</span>); <span class="comment">// [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组克隆我们也可以使用此方法，或者使用 concat，亦或是使用 ... 展开运算符。</span></span><br></pre></td></tr></table></figure>

<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// of 用于将一组值，转换为数组，这个方法的主要目的，是弥补数组构造函数 Array() 的不足。</span></span><br><span class="line"><span class="comment">// 因为参数个数的不同，会导致 Array() 的行为有差异。</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">4</span>); <span class="comment">// [empty*4]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">4</span>); <span class="comment">// [4]</span></span><br></pre></td></tr></table></figure>

<h3 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entries 返回迭代器，返回键值对。</span></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testArr.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// [0, &#x27;a&#x27;],[1, &#x27;b&#x27;],[2, &#x27;c&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set,（add,delete,size,forEach,has,keys,values,clear）Set结构不会添加重复的值，也可用于数组去重。[...new Set([1, 1, 2, 2, 3, 4, 5])]; 或 Array.from(new Set([1, 1, 2, 2, 3, 4, 5])); // [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 去重还可以利用对象 key，或者 Array 的 filter 方法加上 indexOf 来完成。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>([<span class="title class_">NaN</span>, <span class="title class_">NaN</span>, &#123;&#125;, &#123;&#125;]); <span class="comment">// [NaN, &#123;&#125;, &#123;&#125;]</span></span><br><span class="line"><span class="keyword">let</span> testSet = <span class="keyword">new</span> <span class="title class_">Set</span>(testArr);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testSet.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// [&#x27;a&#x27;, &#x27;a&#x27;],[&#x27;b&#x27;, &#x27;b&#x27;],[&#x27;c&#x27;, &#x27;c&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Map,（set,get,delete,size,forEach,has,keys,values,clear）一般用于快速查询，性能高。</span></span><br><span class="line"><span class="keyword">let</span> testMap = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]);</span><br><span class="line">testMap.<span class="title function_">set</span>(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testMap.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// [&#x27;a&#x27;, &#x27;a&#x27;],[&#x27;b&#x27;, &#x27;b&#x27;],[&#x27;c&#x27;, &#x27;c&#x27;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// values 返回迭代器，返回键值对的 value。</span></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testArr.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//&#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="keyword">let</span> testSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testSet.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">let</span> testMap = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testMap.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// keys() 返回迭代器，返回键值对的 key。</span></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testArr.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//&#x27;0&#x27; &#x27;1&#x27; &#x27;2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="keyword">let</span> testSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testSet.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">let</span> testMap = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> testMap.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="includes-1"><a href="#includes-1" class="headerlink" title="includes"></a>includes</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes 判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。</span></span><br><span class="line"><span class="comment">// indexOf 判断元素是否为 NaN，会判断错误。</span></span><br><span class="line"><span class="keyword">let</span> testArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="title class_">NaN</span>];</span><br><span class="line">testArr.<span class="title function_">includes</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// false ps: 从 index 2 开始查。</span></span><br><span class="line">testArr.<span class="title function_">includes</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line">testArr.<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flat 数组降维打击，返回新数组，不改变原数组。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]], <span class="number">8</span>].<span class="title function_">flat</span>(); <span class="comment">// [1, 2, 3, 4, 5, [6, 7], 8]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, [<span class="number">8</span>]]], <span class="number">9</span>].<span class="title function_">flat</span>(<span class="number">2</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, [8], 9]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, [<span class="number">8</span>]]], <span class="number">9</span>].<span class="title function_">flat</span>(<span class="number">3</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象(Object)"></a>对象(Object)</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.create() 方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__(里面的属性属于新对象自己)，其实简单来说就是改变创建对象的原型指向。</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> extendObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(testObj, &#123;</span><br><span class="line">  <span class="attr">gender</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;man&#x27;</span>, <span class="comment">// 属性值</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 是否可以重写值</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 是否可枚举</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span> <span class="comment">// 是否可以修改以上几项配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">extendObj; <span class="comment">// &#123;gender: &#x27;man&#x27;&#125;</span></span><br><span class="line">extendObj.<span class="property">__proto__</span>; <span class="comment">// &#123;name: &quot;doubleam&quot;, age: 21&#125;</span></span><br><span class="line">extendObj.<span class="property">name</span>; <span class="comment">// doubelam</span></span><br><span class="line"><span class="comment">// enumerable 是否可枚举</span></span><br><span class="line"><span class="comment">// for-in 遍历对象所有属性(包括原型上的属性)。</span></span><br><span class="line"><span class="comment">// Object.keys 只能遍历自身属性</span></span><br><span class="line"><span class="comment">// JSON.stringify 只能序列化自身属性</span></span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> extendObj)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// gender,name,age</span></span><br><span class="line">  <span class="comment">// 若 enumerable = false，那么此处打印为 name,age。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(extendObj); <span class="comment">// gender ps: 多个属性按ascii顺序排列，vue 中使用 v-for 遍历也受此影响。</span></span><br><span class="line"><span class="comment">// 若 enumerable = false，那么此处值为空 []。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create与 new Object() 是有区别的，比如 Object.create(null) 创建的对象是一个空对象，在该对象上没有继承 Object.prototype 原型链上的属性或者方法 (toString(),hasOwnProperty()等)。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 create 实现 new</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">speak</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">fn, ...arg</span>) &#123;</span><br><span class="line">  <span class="comment">// let obj = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = fn.prototype</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 先改变原型指向</span></span><br><span class="line">  fn.<span class="title function_">call</span>(obj, ...arg); <span class="comment">// 再调用构造函数</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> blackDog = <span class="title function_">_new</span>(<span class="title class_">Dog</span>, <span class="string">&#x27;小黑&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(blackDog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(blackDog.<span class="property">name</span>);</span><br><span class="line">blackDog.<span class="title function_">speak</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承则可以通过 prototype 构造函数 es6-extend 等方式实现 https://www.cnblogs.com/humin/p/4556820.html</span></span><br></pre></td></tr></table></figure>

<h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.assign(target, source1, source2) 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target），若 target 与 source 存在相同属性，则会被后出现的覆盖。拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">a</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> source1 = &#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> source2 = &#123;<span class="attr">c</span>: <span class="number">4</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2); <span class="comment">// &#123;a:0, b:2, c:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深浅拷贝</span></span><br><span class="line"><span class="comment">// Object.assign()拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。</span></span><br><span class="line"><span class="comment">// 如果对象的属性值为简单类型（如 number,string,boolean），通过 Object.assign(&#123;&#125;, source); 得到的新对象为深拷贝。</span></span><br><span class="line"><span class="comment">// 但如果属性值为对象（object）或其它引用类型时，那对于这个对象而言其实是浅拷贝的。</span></span><br><span class="line"><span class="comment">// 总结：当被复制合并的对象中只有一级属性，没有二级属性的时候，此方法为深拷贝，但是对象中有对象的时候，此方法，在二级属性以后就是浅拷贝。</span></span><br><span class="line"><span class="comment">// 如果要实现深拷贝，可以使用 JSON.parse(JSON.stringify(source)); 或者使用 JQ $.extend()。</span></span><br><span class="line"><span class="comment">// 也可以通过 ... 展开运算符克隆对象：newObj = &#123;...obj1, ...obj2&#125;; 数组转对象也可以使用 ... 展开运算符： newObj = &#123;...arr&#125;;</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">obj</span>: &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> copyObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, testObj);</span><br><span class="line">copyObj.<span class="property">obj</span>.<span class="property">a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testObj.<span class="property">obj</span>.<span class="property">a</span>) <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特例 空类型 undefined,null</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, <span class="literal">undefined</span>) === target; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, <span class="literal">null</span>) === target; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]); <span class="comment">// [5, 6, 7, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js原始数据类型: number,string,boolean,undefined,null,object 【ES6 又新增 Symbol 还有谷歌的 bigint】。</span></span><br><span class="line"><span class="comment">// 基本数据类型(简单类型)，值类型: number,string,boolean。</span></span><br><span class="line"><span class="comment">// 复杂数据类型(引用类型)，object。</span></span><br><span class="line"><span class="comment">// 空类型 undefined,null。</span></span><br><span class="line"><span class="comment">// 值类型的值在栈中存储，值类型传递，传递的是值。</span></span><br><span class="line"><span class="comment">// 引用类型的值，对象在堆上存储，地址在栈上存储。引用类型传递，传递的是地址(引用)。</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>; <span class="comment">// 值类型，值在栈上。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//复杂类型，对象在堆，地址(引用)在栈。且使用 var 关键字不仅可以变量提升，在页面关闭之前一直在内存中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提一下类型判断，typeof 一般只能返回如下几个结果：&quot;number&quot;、&quot;string&quot;、&quot;boolean&quot;、&quot;object&quot;、&quot;function&quot; 和 &quot;undefined&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们要判断数组、时间等其他 new 对象，我们可以通过原生的方法，或者构造函数 constructor 来判断。</span></span><br><span class="line"><span class="comment">// Array.isArray(arr); 或 typeof arr === &#x27;object&#x27; &amp;&amp; arr.constructor === Array; 或 Array.prototype.isPrototypeOf(arr);</span></span><br><span class="line"><span class="comment">// typeof date === &#x27;object&#x27; &amp;&amp; date.constructor === Date;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然也可以使用 instanceof 该运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span></span><br><span class="line"><span class="comment">// (&#123;&#125;) instanceof Object; // true</span></span><br><span class="line"><span class="comment">// ([]) instanceof Object; // true 数组是对象的子类</span></span><br><span class="line"><span class="comment">// ([]) instanceof Array; // true</span></span><br><span class="line"><span class="comment">// (new Date()) instanceof Object; // true</span></span><br><span class="line"><span class="comment">// (new Date()) instanceof Date; // true 同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 【toString】还可以使用 Object.prototype.toString.call(val); 来判断类型</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(1); // &#x27;[object Number]&#x27;</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(&#123;&#125;); // &#x27;[object Object]&#x27;</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call([]); // &#x27;[object Array]&#x27;</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(function()&#123;&#125;); // &#x27;[object Function]&#x27;</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(new Date); // &#x27;[object Date]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Since JavaScript 1.8.5</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(null); // &#x27;[object Null]&#x27;</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(); // &#x27;[object Undefined]&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><ul>
<li>toString 方法返回一个表示该对象的字符串。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Array</td>
<td>以逗号分割的字符串，如 <code>[1, 2]</code> 的toString返回值为 <code>1,2</code></td>
</tr>
<tr>
<td align="center">Boolean</td>
<td><code>true</code></td>
</tr>
<tr>
<td align="center">Date</td>
<td>可读的时间字符串，如 <code>Tue Aug 25 2020 19:30:17 GMT+0800 (中国标准时间)</code></td>
</tr>
<tr>
<td align="center">Function</td>
<td>声明函数的 JS 源代码字符串</td>
</tr>
<tr>
<td align="center">Number</td>
<td><code>数字值</code></td>
</tr>
<tr>
<td align="center">Object</td>
<td><code>[object Object]</code></td>
</tr>
<tr>
<td align="center">String</td>
<td><code>字符串值</code></td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">test</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">example</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;example&#x27;</span>];</span><br><span class="line"></span><br><span class="line">num.<span class="title function_">toString</span>(); <span class="comment">// &quot;3&quot;</span></span><br><span class="line">str.<span class="title function_">toString</span>(); <span class="comment">// &quot;3&quot;</span></span><br><span class="line">bool.<span class="title function_">toString</span>(); <span class="comment">// &quot;true&quot;</span></span><br><span class="line">obj.<span class="title function_">toString</span>(); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line">func.<span class="title function_">toString</span>(); <span class="comment">// &quot;function () &#123; console.log(&#x27;example&#x27;); &#125;&quot;</span></span><br><span class="line">arr.<span class="title function_">toString</span>(); <span class="comment">// &quot;test,example&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 &quot;[object type]&quot;，其中 type 是对象的类型。</span></span><br><span class="line"><span class="comment">// 上面【toString】我们也提到可以用他来判断类型</span></span><br><span class="line"><span class="comment">// 还可以自定义一个方法，来取代默认的 toString() 方法。该 toString() 方法不能传入参数，并且必须返回一个字符串。自定义的 toString() 方法可以是任何我们需要的值，但如果它附带有关对象的信息，它将变得非常有用。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed, color, sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> <span class="title function_">dogToString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Dog <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;<span class="variable language_">this</span>.sex&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.breed&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> theDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Hellen&#x27;</span>, <span class="string">&#x27;Lab&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line">theDog.<span class="title function_">toString</span>(); <span class="comment">// &#x27;Dog Hellen is a female red Lab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于进制转换</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="number">123</span>).<span class="title function_">toString</span>(<span class="number">2</span>); <span class="comment">// 1111011</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="number">9</span>).<span class="title function_">toString</span>(<span class="number">5</span>); <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转回 10 进制</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">14</span>, <span class="number">5</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">1111011</span>, <span class="number">2</span>); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><ul>
<li>如果对象存在任意原始值，它就默认将对象转换为表示它的原始值，如果对象是复合值，而且大多数对象无法真正表示为一个原始值，因此默认的 valueOf() 方法简单地返回对象本身，而不是返回一个原始值。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Array</td>
<td>数组本身</td>
</tr>
<tr>
<td align="center">Boolean</td>
<td>布尔值</td>
</tr>
<tr>
<td align="center">Date</td>
<td>返回毫秒形式的时间戳</td>
</tr>
<tr>
<td align="center">Function</td>
<td>函数本身</td>
</tr>
<tr>
<td align="center">Number</td>
<td>数字值</td>
</tr>
<tr>
<td align="center">Object</td>
<td>对象本身</td>
</tr>
<tr>
<td align="center">String</td>
<td>字符串值</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组、函数、和正则表达式简单的继承了这个默认方法，调用这些类型的实例的 valueOf() 方法只是简单返回对象本身。</span></span><br><span class="line"><span class="comment">// 所有的对象都继承有 toString() 和 valueOf() 方法，对象到字符串，对象到数字的转换，(隐式转换等)会通过调用待转换对象的这两个方法中的一个来完成。</span></span><br><span class="line"><span class="comment">// valueOf: 返回对象的原始值表示; toString: 返回对象的字符串表示;</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">test</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">example</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;example&#x27;</span>];</span><br><span class="line"></span><br><span class="line">num.<span class="title function_">valueOf</span>(); <span class="comment">// 3</span></span><br><span class="line">str.<span class="title function_">valueOf</span>(); <span class="comment">// &quot;3&quot;</span></span><br><span class="line">bool.<span class="title function_">valueOf</span>(); <span class="comment">// true</span></span><br><span class="line">obj.<span class="title function_">valueOf</span>(); <span class="comment">// &#123;test:&#x27;123&#x27;, example:123&#125;</span></span><br><span class="line">func.<span class="title function_">valueOf</span>(); <span class="comment">// function () &#123; console.log(&#x27;example&#x27;); &#125;</span></span><br><span class="line">arr.<span class="title function_">valueOf</span>(); <span class="comment">// [&#x27;test&#x27;,&#x27;example&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>原始值：不可变更的值，包括 <code>undefined、null、boolean、number、string</code>。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/string_array_object_date_js/valueof.png"></p>
<blockquote>
<p>一般的转换过程</p>
</blockquote>
<ul>
<li>栗子</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存原始的 valueOf</span></span><br><span class="line"><span class="keyword">const</span> valueOf = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>;</span><br><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"><span class="comment">// 添加 valueOf 日志</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用 valueOf&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> valueOf.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 添加toString日志</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用 toString&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> toString.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> boolObj = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (boolObj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未调用 valueOf 和 toString，符合 [对象到布尔值] 的转换规则。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++obj);</span><br><span class="line"><span class="comment">// 调用 valueOf (先调用了此方法返回的是对象本身，不是原始值，继续执行。)</span></span><br><span class="line"><span class="comment">// 调用 toString (再调用 toString 方法返回的是 &quot;[object Object]&quot;，是原始值(字符串)。)</span></span><br><span class="line"><span class="comment">// NaN (将字符串转换为数字，结果变成了 NaN。)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objNum = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用 valueOf&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 强制返回原始值</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++objNum);</span><br><span class="line"><span class="comment">// 调用 valueOf</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objTest = &#123;&#125;;</span><br><span class="line"><span class="title function_">alert</span>(objTest);</span><br><span class="line"><span class="comment">// 调用 toString</span></span><br><span class="line"><span class="comment">// 弹出 [object Object]</span></span><br><span class="line"><span class="comment">// 对象转字符串，调用 toString 方法，直接返回了字符串 &quot;[object Object]&quot;，对象最终转换为该字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用 toString&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">noOriginVal</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 还原前面的定义</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用 valueOf&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> valueOf.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">alert</span>(objTest);</span><br><span class="line"><span class="comment">// 调用 toString (调用 toString方法，返回的不是原始值，继续执行。)</span></span><br><span class="line"><span class="comment">// 调用 valueOf (调用 valueOf 方法，返回的不是原始值，继续执行。)</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: Cannot convert object to primitive value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- 分割线 ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 还原前面的定义</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用 toString&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> toString.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello &#x27;</span> + newObj);</span><br><span class="line"><span class="comment">// 调用 valueOf</span></span><br><span class="line"><span class="comment">// 调用 toString</span></span><br><span class="line"><span class="comment">// &#x27;hello [object Object]&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最后一处本应该是预期把 newObj 当做字符串使用，先调用 toString 方法的，实际情况其实却不是这样。</li>
</ul>
<ol>
<li>【基础步骤】如果有一个是对象，则遵循对象对原始值的转换过程 (Date对象直接调用 toString 完成转换，其他对象通过 valueOf 转化，如果转换不成功则调用 toString。)。</li>
<li>如果两个都是对象，两个对象都遵循【基础步骤】转换到字符串。</li>
<li>两个数字，进行算数运算。</li>
<li>两个字符串，直接拼接。</li>
<li>一个字符串一个数字，直接拼接为字符串。</li>
</ol>
<h3 id="keys-1"><a href="#keys-1" class="headerlink" title="keys"></a>keys</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历可枚举的属性，只包含对象本身可枚举属性，不包含原型链可枚举属性。</span></span><br><span class="line"><span class="comment">// getOwnPropertyNames 与 keys 相似，但遍历包含不可枚举属性。</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(testObj); <span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="values-1"><a href="#values-1" class="headerlink" title="values"></a>values</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历可枚举的属性值，只包含对象本身可枚举属性值，不包含原型链可枚举属性值。</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(testObj); <span class="comment">// [&quot;doubleam&quot;, 21]</span></span><br></pre></td></tr></table></figure>

<h3 id="entries-1"><a href="#entries-1" class="headerlink" title="entries"></a>entries</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entries 分割对象，获取键值对。</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(testObj); <span class="comment">// [[&quot;name&quot;, &quot;doubleam&quot;, [&quot;age&quot;, 21]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(testObj)); <span class="comment">// Map(2) &#123;&quot;name&quot; =&gt; &quot;doubleam&quot;, &quot;age&quot; =&gt; 21&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.is用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致，但也有差别。</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">+<span class="number">0</span> === -<span class="number">0</span>; <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.hasOwnProperty 方法会返回一个布尔值，表示对象自身属性中是否具有指定的属性，不包含原型上的属性。</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line">testObj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf"></a>isPrototypeOf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于测试一个对象是否存在于另一个对象的原型链上</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> extendObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(testObj, &#123;</span><br><span class="line">  <span class="attr">gender</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;man&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">testObj.<span class="title function_">isPrototypeOf</span>(extendObj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="propertyIsEnumerable-NaN"><a href="#propertyIsEnumerable-NaN" class="headerlink" title="propertyIsEnumerable"></a>propertyIsEnumerable</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定的属性是否可枚举</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;doubleam&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;;</span><br><span class="line">testObj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">testObj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;length&#x27;</span>); <span class="comment">// false 不可枚举属性</span></span><br><span class="line">testObj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;toString&#x27;</span>); <span class="comment">// false 原型属性</span></span><br></pre></td></tr></table></figure>

<h3 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义对象属性，Object.defineProperty(object, prop, do)</span></span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">let</span> testObj = <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(&#123;&#125;, <span class="string">&quot;newProp&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span>, <span class="comment">// 不能与 get set 同时存在</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 不能与 get set 同时存在</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span> <span class="comment">// false，不能重新修改装饰器。</span></span><br><span class="line">&#125;);</span><br><span class="line">testObj.<span class="property">newProp</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(testObj, <span class="string">&quot;newProp&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 get set（Vue2 通过此方式进行数据劫持，实现数据监听，但有一些缺陷，Vue3 改为 Proxy，后续详细介绍。）</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;<span class="attr">otherProp</span>: <span class="string">&#x27;1&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(testObj, <span class="string">&quot;newProp&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">otherProp</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">otherProp</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">testObj.<span class="property">newProp</span> = <span class="number">3</span>;</span><br><span class="line">testObj.<span class="property">otherProp</span>; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="defineProperties"><a href="#defineProperties" class="headerlink" title="defineProperties"></a>defineProperties</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同上，但可定义多个。</span></span><br><span class="line"><span class="keyword">let</span> testObj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(testObj, &#123;</span><br><span class="line">  <span class="string">&#x27;prop1&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;prop2&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;World&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="时间-Date"><a href="#时间-Date" class="headerlink" title="时间(Date)"></a>时间(Date)</h2><h3 id="万能-Date-原型扩展"><a href="#万能-Date-原型扩展" class="headerlink" title="万能 Date 原型扩展"></a>万能 Date 原型扩展</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 时间格式参考 php */</span></span><br><span class="line"><span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">format</span> = <span class="keyword">function</span> (<span class="params">fmt = <span class="string">&quot;yyyy-mm-dd hh:ii:ss&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">&#x27;m+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>, <span class="comment">// 获取月份 month 需 + 1</span></span><br><span class="line">    <span class="string">&#x27;d+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getDate</span>(), <span class="comment">// 获取日</span></span><br><span class="line">    <span class="string">&#x27;h+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getHours</span>(), <span class="comment">// 获取小时</span></span><br><span class="line">    <span class="string">&#x27;i+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getMinutes</span>(), <span class="comment">// 获取分钟</span></span><br><span class="line">    <span class="string">&#x27;s+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getSeconds</span>(), <span class="comment">// 获取秒</span></span><br><span class="line">    <span class="string">&#x27;Q+&#x27;</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="variable language_">this</span>.<span class="title function_">getMonth</span>() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// 获取季度</span></span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getMilliseconds</span>() <span class="comment">// 获取毫秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.<span class="title function_">test</span>(fmt)) &#123;</span><br><span class="line">    fmt = fmt.<span class="title function_">replace</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>, (<span class="variable language_">this</span>.<span class="title function_">getFullYear</span>() + <span class="string">&quot;&quot;</span>).<span class="title function_">substr</span>(<span class="number">4</span> - <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(&#x27;</span> + k + <span class="string">&#x27;)&#x27;</span>).<span class="title function_">test</span>(fmt)) &#123;</span><br><span class="line">      fmt = fmt.<span class="title function_">replace</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>, (<span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span> === <span class="number">1</span>) ? (o[k]) : ((<span class="string">&quot;00&quot;</span> + o[k]).<span class="title function_">substr</span>((<span class="string">&quot;&quot;</span> + o[k]).<span class="property">length</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">format</span>(); <span class="comment">// &quot;2020-08-25 23:15:35&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">format</span>(<span class="string">&#x27;mm-dd hh:ii:ss&#x27;</span>); <span class="comment">// &quot;08-25 23:15:51&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">format</span>(<span class="string">&#x27;hh:ii&#x27;</span>); <span class="comment">// &quot;23:16&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">format</span>(<span class="string">&#x27;yyyy-mm-01 00:00:00&#x27;</span>); <span class="comment">// &quot;2020-08-01 00:00:00&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="人性化时间"><a href="#人性化时间" class="headerlink" title="人性化时间"></a>人性化时间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人性化时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">date|string</span>&#125; date 时间/string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; longago 是否显示周月甚至更久</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; formater 正常显示时的时间显示格式，依赖于前一个原型方法。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">String</span>&#125; 转换结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeSince</span>(<span class="params">date, longago = <span class="literal">false</span>, formater = <span class="string">&quot;yyyy-mm-dd hh:ii:ss&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    date.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>); <span class="comment">// 虽然 win 浏览器两种符号都可以，但是需兼容 ios。</span></span><br><span class="line">  <span class="keyword">let</span> dateTS = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">  <span class="keyword">let</span> seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="keyword">new</span> <span class="title class_">Date</span>() - dateTS) / <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">let</span> interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">  <span class="keyword">if</span> (longago) &#123;</span><br><span class="line">    interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">30</span> * <span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> dateTS.<span class="title function_">format</span>(formater);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> interval + <span class="string">&quot; 月前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> interval + <span class="string">&quot; 周前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (interval &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dateTS.<span class="title function_">format</span>(formater);</span><br><span class="line">  &#125;</span><br><span class="line">  interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">  <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> interval + <span class="string">&quot; 天前&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">3600</span>);</span><br><span class="line">  <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> interval + <span class="string">&quot; 小时前&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> interval + <span class="string">&quot; 分钟前&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;刚刚&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">timeSince</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// &quot;刚刚&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="时间设置与计算"><a href="#时间设置与计算" class="headerlink" title="时间设置与计算"></a>时间设置与计算</h3><blockquote>
<p>时间获取可以参考第一部分</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line">myDate.<span class="title function_">setFullYear</span>(myDate.<span class="title function_">getFullYear</span>() + <span class="number">1</span>); <span class="comment">// 设置日期，获取 1 年后。 [2021/8/25 下午11:20:35]</span></span><br><span class="line">myDate.<span class="title function_">setMonth</span>(myDate.<span class="title function_">getMonth</span>() - <span class="number">3</span>); <span class="comment">// 设置日期，获取 3 月前。 [2021/5/25 下午11:20:35]</span></span><br><span class="line">myDate.<span class="title function_">setDate</span>(myDate.<span class="title function_">getDate</span>() + <span class="number">7</span>); <span class="comment">// 设置日期，获取 7 天后。 [2021/6/1 下午11:20:35]</span></span><br><span class="line">myDate.<span class="title function_">setHours</span>(myDate.<span class="title function_">getHours</span>() + <span class="number">10</span>); <span class="comment">// 设置日期，获取 10 小时后。 [2021/6/2 上午9:20:35]</span></span><br><span class="line">myDate.<span class="title function_">setMinutes</span>(myDate.<span class="title function_">getMinutes</span>() + <span class="number">10</span>); <span class="comment">// 设置日期，获取 10 分钟后。 [2021/6/2 上午9:30:35]</span></span><br><span class="line">myDate.<span class="title function_">setSeconds</span>(myDate.<span class="title function_">getSeconds</span>() + <span class="number">60</span>); <span class="comment">// 设置日期，获取 60 秒后。 [2021/6/2 上午9:31:35]</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 1598370615000 快速获取时间戳</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(); <span class="comment">// 1598370615000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> old = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2020-07-25 21:50:15&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((now - old) / <span class="number">1000</span>); <span class="comment">// 计算时间相差秒 2685600</span></span><br><span class="line"><span class="keyword">let</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">60</span>); <span class="comment">// 计算时间相差分钟 44760</span></span><br><span class="line"><span class="keyword">let</span> hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes / <span class="number">60</span>); <span class="comment">// 计算时间相差小时 746</span></span><br><span class="line"><span class="keyword">let</span> days = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours / <span class="number">24</span>); <span class="comment">// 计算时间相差天数 31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算实际差距天数、小时、分钟、秒 */</span></span><br><span class="line"><span class="keyword">let</span> runTime = now - old;</span><br><span class="line"><span class="keyword">let</span> differenceObj = &#123;</span><br><span class="line">  <span class="attr">days</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">1000</span> / <span class="number">3600</span> / <span class="number">24</span>),</span><br><span class="line">  <span class="attr">hours</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>),</span><br><span class="line">  <span class="attr">minutes</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>),</span><br><span class="line">  <span class="attr">seconds</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">1000</span> % <span class="number">60</span>)</span><br><span class="line">&#125;; <span class="comment">// &#123;days: 31, hours: 2, minutes: 0, seconds: 0&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> weeks = [<span class="string">&quot;星期天&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>];</span><br><span class="line">weeks[<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>()]; <span class="comment">// 获取星期 0-6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>(); <span class="comment">// 获取当前时间 &quot;下午5:49:50&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>(); <span class="comment">// 获取当前日期 &quot;2020/8/25&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他时间字符串转化</span></span><br><span class="line"><span class="comment">// toJSON() 方法可以将 Date 对象转换为字符串，并格式化为 JSON 数据格式。</span></span><br><span class="line"><span class="comment">// JSON 数据用同样的格式就像x ISO-8601 标准: YYYY-MM-DDThh:ii:ss.sssZ</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toJSON</span>(); <span class="comment">// &quot;2020/8/25T23:51:13.411Z&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toGMTString</span>(); <span class="comment">// &quot;Tue, 25 Aug 2020 23:51:20 GMT&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(); <span class="comment">// &quot;2020/8/25T23:51:13.423Z&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toUTCString</span>(); <span class="comment">// &quot;Tue, 25 Aug 2020 23:51:19 GMT&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>(); <span class="comment">// &quot;Tue Aug 25 2020 23:51:16 GMT+0800 (中国标准时间)&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toTimeString</span>(); <span class="comment">// &quot;23:51:13 GMT+0800 (中国标准时间)&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toDateString</span>(); <span class="comment">// &quot;Tue Aug 25 2020&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>(); <span class="comment">// 获取当前日期时间 &quot;2020/8/25 下午11:52:23&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>(<span class="string">&#x27;chinese&#x27;</span>, &#123; <span class="attr">hour12</span>: <span class="literal">false</span> &#125;); <span class="comment">// 24小时制 &quot;2020/8/25 23:52:57&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>常用方法</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>常用方法小结</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart String、List、Map、Date 常用方法小结</title>
    <url>/string_list_map_date_dart/</url>
    <content><![CDATA[<div class="note info no-icon"><p>&emsp;&emsp;今日心情很低落 T.T，所以参考<span class="exturl" data-url="aHR0cHM6Ly9hcGkuZGFydC5jbi8=">官方文档<i class="fa fa-external-link-alt"></i></span>，略微整理了一下 Dart String、List、Map、Date的常用方法。</p>
</div>
<span id="more"></span>

<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 裁剪字符串，尾部开区间 [start, end)。</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;Dart &#x27;</span> + <span class="string">&#x27;is &#x27;</span> + <span class="string">&#x27;fun!&#x27;</span>; <span class="comment">// &#x27;Dart is fun!&#x27;</span></span><br><span class="line">string.substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// &#x27;Dart &#x27;</span></span><br><span class="line">string.substring(<span class="number">5</span>); <span class="comment">// &#x27;is fun!&#x27;</span></span><br><span class="line">string.substring(string.length - <span class="number">4</span>); <span class="comment">// &#x27;fun!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$string</span> 的长度是：<span class="subst">$&#123;string.length&#125;</span>&#x27;</span>);</span><br><span class="line">string[<span class="number">0</span>]; <span class="comment">// &#x27;D&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="codeUnitAt-codeUnits"><a href="#codeUnitAt-codeUnits" class="headerlink" title="codeUnitAt/codeUnits"></a>codeUnitAt/codeUnits</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&#x27;Dart&#x27;</span>;</span><br><span class="line">string.codeUnitAt(<span class="number">0</span>); <span class="comment">// 68</span></span><br><span class="line">string.codeUnits; <span class="comment">// [68, 97, 114, 116]</span></span><br></pre></td></tr></table></figure>

<h3 id="isEmpty-isNotEmpty"><a href="#isEmpty-isNotEmpty" class="headerlink" title="isEmpty/isNotEmpty"></a>isEmpty/isNotEmpty</h3><blockquote>
<p>字符串是否为空，return bool。</p>
</blockquote>
<h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.contains(<span class="string">&#x27;am&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.contains(<span class="string">&#x27;o&#x27;</span>, <span class="number">2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf/lastIndexOf"></a>indexOf/lastIndexOf</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.indexOf(<span class="string">&#x27;d&#x27;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="string">&#x27;doubleam&#x27;</span>.lastIndexOf(<span class="string">&#x27;x&#x27;</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="padLeft-padRight"><a href="#padLeft-padRight" class="headerlink" title="padLeft/padRight"></a>padLeft/padRight</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hxb&#x27;</span>.padLeft(<span class="number">6</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// &#x27;xxxhxb&#x27;</span></span><br><span class="line"><span class="string">&#x27;hxb&#x27;</span>.padRight(<span class="number">6</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// &#x27;hxbxxx&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="startsWith-endsWith"><a href="#startsWith-endsWith" class="headerlink" title="startsWith/endsWith"></a>startsWith/endsWith</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hxb love oqm&#x27;</span>.startsWith(<span class="string">&#x27;hxb&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;hxb love oqm&#x27;</span>.startsWith(<span class="string">&#x27;love&#x27;</span>, <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;hxb love oqm&#x27;</span>.endsWith(<span class="string">&#x27;oqm&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// replaceAll(Pattern from, String replace)</span></span><br><span class="line"><span class="string">&quot;Hello World&quot;</span>.replaceAll(<span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;Dart&#x27;</span>); <span class="comment">// &#x27;Hello Dart&#x27;</span></span><br><span class="line"><span class="built_in">RegExp</span> testReg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">r&quot;^\w&#123;5&#125;$&quot;</span>);</span><br><span class="line"><span class="string">&quot;Hello World&quot;</span>.replaceAll(testReg, <span class="string">&#x27;*******&#x27;</span>); <span class="comment">// &#x27;******* World&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较字符串，等于返回 0，小于返回 -1，大于返回 1。</span></span><br><span class="line"><span class="string">&quot;C&quot;</span>.compareTo(<span class="string">&#x27;C&#x27;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="string">&quot;C&quot;</span>.compareTo(<span class="string">&#x27;CC&#x27;</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="string">&quot;C&quot;</span>.compareTo(<span class="string">&#x27;BBB&#x27;</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="string">&quot;C&quot;</span>.compareTo(<span class="string">&#x27;B&#x27;</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="toLowerCase-toUpperCase"><a href="#toLowerCase-toUpperCase" class="headerlink" title="toLowerCase/toUpperCase"></a>toLowerCase/toUpperCase</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;aBc&#x27;</span>.toLowerCase(); <span class="comment">// &#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;aBc&#x27;</span>.toUpperCase(); <span class="comment">// &#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; abc &#x27;</span>.trim(); <span class="comment">// &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="trimLeft-trimRight"><a href="#trimLeft-trimRight" class="headerlink" title="trimLeft/trimRight"></a>trimLeft/trimRight</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; abc &#x27;</span>.trimLeft(); <span class="comment">// &#x27;abc &#x27;</span></span><br><span class="line"><span class="string">&#x27; abc &#x27;</span>.trimRight(); <span class="comment">// &#x27; abc&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a,b,c,d,e&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// [a, b, c, d, e]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="isEmpty-isNotEmpty-1"><a href="#isEmpty-isNotEmpty-1" class="headerlink" title="isEmpty/isNotEmpty"></a>isEmpty/isNotEmpty</h3><blockquote>
<p>List 是否为空，return bool。</p>
</blockquote>
<h3 id="first-last"><a href="#first-last" class="headerlink" title="first/last"></a>first/last</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].first; <span class="comment">// 1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].last; <span class="comment">// 4</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reversed.toList(); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.add(<span class="number">4</span>); </span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.addAll([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); </span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.any((item) =&gt; item &gt; <span class="number">1</span>); <span class="comment">// 任意一项 ＞ 1 则返回 true。</span></span><br></pre></td></tr></table></figure>

<h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>].every((item) =&gt; item == <span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>].every((item) =&gt; item == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].where((item) =&gt; item &gt; <span class="number">1</span>).toList(); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="asMap"><a href="#asMap" class="headerlink" title="asMap"></a>asMap</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.asMap(); <span class="comment">// &#123;0: 1, 1: 2, 2: 3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.clear(); </span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h3 id="contains-1"><a href="#contains-1" class="headerlink" title="contains"></a>contains</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].contains(<span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="firstWhere"><a href="#firstWhere" class="headerlink" title="firstWhere"></a>firstWhere</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="string">&#x27;2020&#x27;</span>, <span class="number">1</span>].firstWhere((item) =&gt; item == <span class="string">&#x27;2020&#x27;</span>); <span class="comment">// &#x27;2020&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="indexWhere-lastIndexWhere"><a href="#indexWhere-lastIndexWhere" class="headerlink" title="indexWhere/lastIndexWhere"></a>indexWhere/lastIndexWhere</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].indexWhere((item) =&gt; item == <span class="number">3</span>, <span class="number">2</span>); <span class="comment">// = 2 // 从 List 索引为 2 开始向后查找等于 3 的索引位置。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>].lastIndexWhere((item) =&gt; item == <span class="number">1</span>); <span class="comment">// = 2</span></span><br></pre></td></tr></table></figure>

<h3 id="indexOf-lastIndexOf-1"><a href="#indexOf-lastIndexOf-1" class="headerlink" title="indexOf/lastIndexOf"></a>indexOf/lastIndexOf</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].indexOf(<span class="number">9</span>); <span class="comment">// -1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>].lastIndexOf(<span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">testList.insert(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="insertAll"><a href="#insertAll" class="headerlink" title="insertAll"></a>insertAll</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">testList.insertAll(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.elementAt(<span class="number">0</span>) == testList[<span class="number">0</span>]; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList1 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"><span class="built_in">List</span> flatList= testList1.expand((item) =&gt; item).toList();</span><br><span class="line"><span class="built_in">print</span>(flatList); <span class="comment">// [[1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> testList2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">List</span> computed = testList2.expand((item) =&gt; [item * <span class="number">10</span>]).toList();</span><br><span class="line"><span class="built_in">print</span>(computed); <span class="comment">// [10, 20, 30]</span></span><br></pre></td></tr></table></figure>

<h3 id="fillRange"><a href="#fillRange" class="headerlink" title="fillRange"></a>fillRange</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">testList.fillRange(<span class="number">0</span>, <span class="number">3</span>, <span class="number">10</span>); <span class="comment">// 修改 List 元素，尾部开区间。</span></span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [10, 10, 10]</span></span><br></pre></td></tr></table></figure>

<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> clonedList = <span class="built_in">List</span>.from(testList);</span><br><span class="line"><span class="built_in">print</span>(clonedList); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach((item) =&gt; <span class="built_in">print</span>(item)); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">print</span>(testList.map((item) =&gt; item * <span class="number">100</span>).toList(); <span class="comment">// [100, 200, 300]</span></span><br></pre></td></tr></table></figure>

<h3 id="reduce-fold"><a href="#reduce-fold" class="headerlink" title="reduce/fold"></a>reduce/fold</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二者都是累加器，fold 可以设置初始值。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce((item, nextItem) =&gt; item + nextItem); <span class="comment">// 6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fold(<span class="number">10</span>, (item, nextItem) =&gt; item + nextItem); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>

<h3 id="toSet"><a href="#toSet" class="headerlink" title="toSet"></a>toSet</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换为 Set，常用于去重。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>].toSet().toList(); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除元素，如果 List 中有多个符合条件的值，只会会删除List 中第一个符合条件的元素，改变原 List。</span></span><br><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">testList.remove(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [2, 3, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="removeAt"><a href="#removeAt" class="headerlink" title="removeAt"></a>removeAt</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除 List 中指定索引位置的元素，返回被删除的内容，改变原 List。</span></span><br><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="built_in">print</span>(testList.removeAt(<span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [2, 3, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="removeLast"><a href="#removeLast" class="headerlink" title="removeLast"></a>removeLast</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面意思</span></span><br><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="built_in">print</span>(testList.removeLast()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="removeWhere"><a href="#removeWhere" class="headerlink" title="removeWhere"></a>removeWhere</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">testList.removeWhere((item) =&gt; item == <span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="removeRange"><a href="#removeRange" class="headerlink" title="removeRange"></a>removeRange</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">testList.removeRange(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 尾部开区间</span></span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure>

<h3 id="getRange"><a href="#getRange" class="headerlink" title="getRange"></a>getRange</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="built_in">print</span>(testList.getRange(<span class="number">0</span>, <span class="number">3</span>).toList()); <span class="comment">// [1, 2, 3] // 尾部开区间</span></span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].join(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure>

<h3 id="replaceRange"><a href="#replaceRange" class="headerlink" title="replaceRange"></a>replaceRange</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">testList.replaceRange(<span class="number">0</span>, <span class="number">3</span>, [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [10, 11, 12, 13, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">testList.shuffle();</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// 打乱 List</span></span><br></pre></td></tr></table></figure>

<h3 id="setAll"><a href="#setAll" class="headerlink" title="setAll"></a>setAll</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">testList.setAll(<span class="number">1</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [1, 0, 0, 0, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="setRange"><a href="#setRange" class="headerlink" title="setRange"></a>setRange</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">testList.setRange(<span class="number">0</span>, <span class="number">3</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// [0, 0, 0, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="take-skip"><a href="#take-skip" class="headerlink" title="take/skip"></a>take/skip</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// take 从 List 里取 n 个元素，skip 跳过 List 中的 n 个元素。</span></span><br><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">print</span>(testList.take(<span class="number">3</span>).toList()); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(testList.skip(<span class="number">4</span>).toList()); <span class="comment">// [5, 6]</span></span><br><span class="line"><span class="built_in">print</span>(testList.take(<span class="number">3</span>).skip(<span class="number">2</span>).take(<span class="number">1</span>).toList()); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testStringList = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;BBB&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="built_in">List</span> testStringList.sort((item, nextItem) =&gt; item.compareTo(nextItem));</span><br><span class="line">testList.sort((item, nextItem) =&gt; item.compareTo(nextItem));</span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// 1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">print</span>(testStringList); <span class="comment">// [A, BBB, C, a, aaa, z]</span></span><br></pre></td></tr></table></figure>

<h3 id="sublist"><a href="#sublist" class="headerlink" title="sublist"></a>sublist</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> testList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">print</span>(testList.sublist(<span class="number">0</span>, <span class="number">3</span>)); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(testList); <span class="comment">// 1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(testMap.entries.toList());</span><br><span class="line"><span class="comment">// [MapEntry(a: 1), MapEntry(b: 2), MapEntry(c: 3)]</span></span><br></pre></td></tr></table></figure>

<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(testMap.keys.toList());</span><br><span class="line"><span class="comment">// [a, b, c]</span></span><br></pre></td></tr></table></figure>

<h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(testMap.values.toList());</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="isEmpty-isNotEmpty-2"><a href="#isEmpty-isNotEmpty-2" class="headerlink" title="isEmpty/isNotEmpty"></a>isEmpty/isNotEmpty</h3><blockquote>
<p>Map 是否为空，return bool。</p>
</blockquote>
<h3 id="addAll-1"><a href="#addAll-1" class="headerlink" title="addAll"></a>addAll</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.addAll(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">99</span>&#125;);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: 100, b: 2, c: 3, d: 99&#125;</span></span><br><span class="line">testMap = &#123;</span><br><span class="line">  ...testMap,</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: &#x27;hello&#x27;, b: 2, c: 3, d: 99, x: &#x27;world&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="addEntries"><a href="#addEntries" class="headerlink" title="addEntries"></a>addEntries</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.addEntries(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">99</span>&#125;.entries);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: 100, b: 2, c: 3, d: 99&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear"></a>clear</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.clear();</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.containsKey(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">testMap.containsKey(<span class="string">&#x27;d&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.containsValue(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">testMap.containsValue(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.forEach((key, value) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$key</span> =&gt; <span class="subst">$value</span>&#x27;</span>); <span class="comment">// 1 =&gt; a , 2 =&gt; b , 3 =&gt; c</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Map</span> newMap = testMap.map((key, value)&#123;</span><br><span class="line">  <span class="keyword">return</span> MapEntry(value, key);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newMap); <span class="comment">// &#123;1: a, 2: b, 3: c&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="putIfAbsent"><a href="#putIfAbsent" class="headerlink" title="putIfAbsent"></a>putIfAbsent</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向一个 Map 中添加不存在的键值对，如果 key 已经存在，则原 Map 不变。</span></span><br><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.putIfAbsent(<span class="string">&#x27;a&#x27;</span>, () =&gt; <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">testMap.putIfAbsent(<span class="string">&#x27;d&#x27;</span>, () =&gt; <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: 1, b: 2, c: 3, d: world&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收一个 key 作为参数，从 Map 中删除对应的键值对。</span></span><br><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.remove(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="removeWhere-1"><a href="#removeWhere-1" class="headerlink" title="removeWhere"></a>removeWhere</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收一个 function 作为参数，从 Map 中删除符合条件的键值对。</span></span><br><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.removeWhere((key, value) =&gt; value &gt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.update(<span class="string">&#x27;a&#x27;</span>, (value) =&gt; value + <span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: 101, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="updateAll"><a href="#updateAll" class="headerlink" title="updateAll"></a>updateAll</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">testMap.updateAll((key, value) =&gt; value * <span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// &#123;a: 100, b: 200, c: 300&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="from-1"><a href="#from-1" class="headerlink" title="from"></a>from</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> testMap = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Map</span> newMap = <span class="built_in">Map</span>.from(testMap);</span><br><span class="line"><span class="built_in">print</span>(testMap); <span class="comment">// // &#123;a: 1, b: 2, c: 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(newMap); <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">// 获取当前时间 2020-08-13 16:10:13.098</span></span><br><span class="line"><span class="built_in">DateTime</span>(<span class="number">2020</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">30</span>); <span class="comment">// 设置时间 2020-08-12 12:12:30.000</span></span><br><span class="line"><span class="built_in">DateTime</span>.parse(<span class="string">&#x27;2020-01-01 09:30:36&#x27;</span>); <span class="comment">// 解析时间 2020-01-01 09:30:36.000</span></span><br><span class="line"><span class="built_in">DateTime</span>.tryParse(<span class="string">&#x27;2020-1-01 09:30:36&#x27;</span>); <span class="comment">// 解析时间 null，格式不对返回 null，parse 会报错。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DateTime</span> time = <span class="built_in">DateTime</span>.parse(<span class="string">&#x27;2020-01-11 09:30:36&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(time.hashCode); <span class="comment">// 305754722</span></span><br><span class="line"><span class="built_in">print</span>(time.year); <span class="comment">// 2020</span></span><br><span class="line"><span class="built_in">print</span>(time.month); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(time.day); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">print</span>(time.hour); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">print</span>(time.minute); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">print</span>(time.second); <span class="comment">// 36</span></span><br><span class="line"><span class="built_in">print</span>(time.millisecond); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">print</span>(time.microsecond); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">print</span>(time.weekday); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">print</span>(time.isUtc); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(time.millisecondsSinceEpoch); <span class="comment">// 毫秒 13 位时间戳</span></span><br><span class="line"><span class="built_in">print</span>(time.microsecondsSinceEpoch); <span class="comment">// 微秒 16 位时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">人性化时间</span></span></span><br><span class="line"><span class="built_in">String</span> timeSince(<span class="built_in">DateTime</span> date, &#123;<span class="built_in">bool</span> longago = <span class="keyword">false</span>, formater = <span class="string">&quot;yyyy-mm-dd hh:ii:ss&quot;</span>&#125;) &#123;</span><br><span class="line">  <span class="built_in">DateTime</span> now = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">  <span class="keyword">if</span>(now.isBefore(date)) &#123;</span><br><span class="line">    <span class="keyword">return</span> dateFormat(date, format: formater);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> interval = now.difference(date);</span><br><span class="line">  <span class="keyword">if</span> (longago) &#123;</span><br><span class="line">    <span class="built_in">int</span> months = interval.inDays ~/ <span class="number">30</span>; <span class="comment">// 向下取整，Dart 独有运算符。</span></span><br><span class="line">    <span class="keyword">if</span> (months &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> dateFormat(date, format: formater);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (months &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$months</span> 月前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> weeks = interval.inDays ~/ <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span> (weeks &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$weeks</span> 周前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (interval.inDays &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dateFormat(date, format: formater);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (interval.inDays &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;interval.inDays&#125;</span> 天前&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (interval.inHours &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;interval.inHours&#125;</span> 小时前&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (interval.inMinutes &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;interval.inMinutes&#125;</span> 分钟前&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;刚刚&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上代码中，使用正则进行时间转换的方法 <a href="http://a.biugle.cn/dart_time/">dateFormat</a>，可以通过链接前往参考哦…</p>
</blockquote>
<h3 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加 10 分钟</span></span><br><span class="line"><span class="built_in">DateTime</span>.now().add(<span class="built_in">Duration</span>(minutes: <span class="number">10</span>));</span><br><span class="line"><span class="comment">// 减 1 小时</span></span><br><span class="line"><span class="built_in">DateTime</span>.now().add(<span class="built_in">Duration</span>(hours: -<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="subtract"><a href="#subtract" class="headerlink" title="subtract"></a>subtract</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加 10 分钟</span></span><br><span class="line"><span class="built_in">DateTime</span>.now().subtract(<span class="built_in">Duration</span>(minutes: -<span class="number">10</span>));</span><br><span class="line"><span class="comment">// 减 1 小时</span></span><br><span class="line"><span class="built_in">DateTime</span>.now().subtract(<span class="built_in">Duration</span>(hours: <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="compareTo-1"><a href="#compareTo-1" class="headerlink" title="compareTo"></a>compareTo</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DateTime</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">now.compareTo(now.add(<span class="built_in">Duration</span>(hours: -<span class="number">1</span>))); <span class="comment">// 1</span></span><br><span class="line">now.compareTo(now); <span class="comment">// 0</span></span><br><span class="line">now.compareTo(now.add(<span class="built_in">Duration</span>(minutes: <span class="number">10</span>))); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算时间差</span></span><br><span class="line"><span class="built_in">DateTime</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">now.difference(now.add(<span class="built_in">Duration</span>(hours: -<span class="number">1</span>))); <span class="comment">// 1:00:00.000000</span></span><br><span class="line"><span class="keyword">var</span> differenceObj1 = now.add(<span class="built_in">Duration</span>(minutes: <span class="number">10</span>)).difference(now); <span class="comment">// 0:10:00.000000</span></span><br><span class="line"><span class="keyword">var</span> differenceObj2 = now.difference(now.add(<span class="built_in">Duration</span>(minutes: <span class="number">10</span>))); <span class="comment">// -0:10:00.000000</span></span><br><span class="line"><span class="built_in">print</span>([differenceObj1.inDays, differenceObj1.inHours, differenceObj1.inMinutes]); <span class="comment">// [0, 0, 10]</span></span><br><span class="line"><span class="built_in">print</span>([differenceObj2.inDays, differenceObj2.inHours, differenceObj2.inMinutes]); <span class="comment">// [0, 0, -10]</span></span><br></pre></td></tr></table></figure>

<h3 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DateTime</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">now.isAfter(now.add(<span class="built_in">Duration</span>(hours: -<span class="number">1</span>))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DateTime</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">now.isBefore(now.add(<span class="built_in">Duration</span>(hours: -<span class="number">1</span>))); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="toIso8601String"><a href="#toIso8601String" class="headerlink" title="toIso8601String"></a>toIso8601String</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DateTime</span>.now().toIso8601String(); <span class="comment">// 2020-08-13T16:10:13.098</span></span><br></pre></td></tr></table></figure>

<h3 id="toLocal-toString-toUtc"><a href="#toLocal-toString-toUtc" class="headerlink" title="toLocal/toString/toUtc"></a>toLocal/toString/toUtc</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">DateTime</span>.now().toLocal()); <span class="comment">// 转为本地时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">DateTime</span>.now().toString()); <span class="comment">// 转字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">DateTime</span>.now().toUtc()); <span class="comment">// 转 UTC</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="is-print-log"><a href="#is-print-log" class="headerlink" title="is-print-log"></a>is-print-log</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// is 操作符能够判断类型，比如 A is B，能够返回 bool 类型，判断 A 是否属于 B 类型。</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span>(test <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;test&#125;</span> is string&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">int</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;test&#125;</span> is int&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">double</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;test&#125;</span> is double&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;test&#125;</span> is other type&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print 可以打印我们调试的信息，但是数据很长时会打印不全，并且会影响渲染速度。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// log 只能打印字符串，在数据很长时可以全部打印出来，并且控制台会高亮，也会影响渲染速度。</span></span><br><span class="line">log(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议设置一个全局变量定义开发环境，只在开发环境打印 log 或者 print。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>常用方法</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
        <tag>常用方法小结</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP String、Array、Object、Date 常用方法小结</title>
    <url>/string_array_object_date_php/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>&emsp;&emsp;大自然的搬运工！PHP 字符串、数组、对象、时间常用方法小结。</p>
</div>
<span id="more"></span>

<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><table><tbody><tr><th>函数</th><th>描述</th></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19hZGRjc2xhc2hlcy5hc3A=">addcslashes()<i class="fa fa-external-link-alt"></i></span></td><td>返回在指定的字符前添加反斜杠的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19hZGRzbGFzaGVzLmFzcA==">addslashes()<i class="fa fa-external-link-alt"></i></span></td><td>返回在预定义的字符前添加反斜杠的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19iaW4yaGV4LmFzcA==">bin2hex()<i class="fa fa-external-link-alt"></i></span></td><td>把 ASCII 字符的字符串转换为十六进制值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jaG9wLmFzcA==">chop()<i class="fa fa-external-link-alt"></i></span></td><td>删除字符串右侧的空白字符或其他字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jaHIuYXNw">chr()<i class="fa fa-external-link-alt"></i></span></td><td>从指定的 ASCII 值返回字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jaHVua19zcGxpdC5hc3A=">chunk_split()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串分割为一系列更小的部分。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jb252ZXJ0X2N5cl9zdHJpbmcuYXNw">convert_cyr_string()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串由一种 Cyrillic 字符集转换为另一种。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jb252ZXJ0X3V1ZGVjb2RlLmFzcA==">convert_uudecode()<i class="fa fa-external-link-alt"></i></span></td><td>解码 uuencode 编码字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jb252ZXJ0X3V1ZW5jb2RlLmFzcA==">convert_uuencode()<i class="fa fa-external-link-alt"></i></span></td><td>使用 uuencode 算法对字符串进行编码。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jb3VudF9jaGFycy5hc3A=">count_chars()<i class="fa fa-external-link-alt"></i></span></td><td>返回有关字符串中所用字符的信息。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jcmMzMi5hc3A=">crc32()<i class="fa fa-external-link-alt"></i></span></td><td>计算字符串的 32 位 CRC。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19jcnlwdC5hc3A=">crypt()<i class="fa fa-external-link-alt"></i></span></td><td>单向的字符串加密法（hashing）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19lY2hvLmFzcA==">echo()<i class="fa fa-external-link-alt"></i></span></td><td>输出一个或多个字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19leHBsb2RlLmFzcA==">explode()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串打散为数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19mcHJpbnRmLmFzcA==">fprintf()<i class="fa fa-external-link-alt"></i></span></td><td>把格式化的字符串写入到指定的输出流。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19nZXRfaHRtbF90cmFuc2xhdGlvbl90YWJsZS5hc3A=">get_html_translation_table()<i class="fa fa-external-link-alt"></i></span></td><td>返回由 htmlspecialchars() 和 htmlentities() 使用的翻译表。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19oZWJyZXYuYXNw">hebrev()<i class="fa fa-external-link-alt"></i></span></td><td>把希伯来文本转换为可见文本。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19oZWJyZXZjLmFzcA==">hebrevc()<i class="fa fa-external-link-alt"></i></span></td><td>把希伯来文本转换为可见文本，并把新行（\n）转换为 &lt;br&gt;。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19oZXgyYmluLmFzcA==">hex2bin()<i class="fa fa-external-link-alt"></i></span></td><td>把十六进制值的字符串转换为 ASCII 字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19odG1sX2VudGl0eV9kZWNvZGUuYXNw">html_entity_decode()<i class="fa fa-external-link-alt"></i></span></td><td>把 HTML 实体转换为字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19odG1sZW50aXRpZXMuYXNw">htmlentities()<i class="fa fa-external-link-alt"></i></span></td><td>把字符转换为 HTML 实体。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19odG1sc3BlY2lhbGNoYXJzX2RlY29kZS5hc3A=">htmlspecialchars_decode()<i class="fa fa-external-link-alt"></i></span></td><td>把一些预定义的 HTML 实体转换为字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19odG1sc3BlY2lhbGNoYXJzLmFzcA==">htmlspecialchars()<i class="fa fa-external-link-alt"></i></span></td><td>把一些预定义的字符转换为 HTML 实体。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19pbXBsb2RlLmFzcA==">implode()<i class="fa fa-external-link-alt"></i></span></td><td>返回由数组元素组合成的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19qb2luLmFzcA==">join()<i class="fa fa-external-link-alt"></i></span></td><td>implode() 的别名。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19sY2ZpcnN0LmFzcA==">lcfirst()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串的首字符转换为小写。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19sZXZlbnNodGVpbi5hc3A=">levenshtein()<i class="fa fa-external-link-alt"></i></span></td><td>返回两个字符串之间的 Levenshtein 距离。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19sb2NhbGVjb252LmFzcA==">localeconv()<i class="fa fa-external-link-alt"></i></span></td><td>返回本地数字及货币格式信息。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19sdHJpbS5hc3A=">ltrim()<i class="fa fa-external-link-alt"></i></span></td><td>移除字符串左侧的空白字符或其他字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19tZDUuYXNw">md5()<i class="fa fa-external-link-alt"></i></span></td><td>计算字符串的 MD5 散列。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19tZDVfZmlsZS5hc3A=">md5_file()<i class="fa fa-external-link-alt"></i></span></td><td>计算文件的 MD5 散列。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19tZXRhcGhvbmUuYXNw">metaphone()<i class="fa fa-external-link-alt"></i></span></td><td>计算字符串的 metaphone 键。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19tb25leV9mb3JtYXQuYXNw">money_format()<i class="fa fa-external-link-alt"></i></span></td><td>返回格式化为货币字符串的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19ubF9sYW5naW5mby5hc3A=">nl_langinfo()<i class="fa fa-external-link-alt"></i></span></td><td>返回特定的本地信息。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19ubDJici5hc3A=">nl2br()<i class="fa fa-external-link-alt"></i></span></td><td>在字符串中的每个新行之前插入 HTML 换行符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19udW1iZXJfZm9ybWF0LmFzcA==">number_format()<i class="fa fa-external-link-alt"></i></span></td><td>以千位分组来格式化数字。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19vcmQuYXNw">ord()<i class="fa fa-external-link-alt"></i></span></td><td>返回字符串中第一个字符的 ASCII 值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19wYXJzZV9zdHIuYXNw">parse_str()<i class="fa fa-external-link-alt"></i></span></td><td>把查询字符串解析到变量中。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19wcmludC5hc3A=">print()<i class="fa fa-external-link-alt"></i></span></td><td>输出一个或多个字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19wcmludGYuYXNw">printf()<i class="fa fa-external-link-alt"></i></span></td><td>输出格式化的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19xdW90ZWRfcHJpbnRhYmxlX2RlY29kZS5hc3A=">quoted_printable_decode()<i class="fa fa-external-link-alt"></i></span></td><td>把 quoted-printable 字符串转换为 8 位字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19xdW90ZWRfcHJpbnRhYmxlX2VuY29kZS5hc3A=">quoted_printable_encode()<i class="fa fa-external-link-alt"></i></span></td><td>把 8 位字符串转换为 quoted-printable 字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19xdW90ZW1ldGEuYXNw">quotemeta()<i class="fa fa-external-link-alt"></i></span></td><td>引用元字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19ydHJpbS5hc3A=">rtrim()<i class="fa fa-external-link-alt"></i></span></td><td>移除字符串右侧的空白字符或其他字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zZXRsb2NhbGUuYXNw">setlocale()<i class="fa fa-external-link-alt"></i></span></td><td>设置地区信息（地域信息）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zaGExLmFzcA==">sha1()<i class="fa fa-external-link-alt"></i></span></td><td>计算字符串的 SHA-1 散列。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zaGExX2ZpbGUuYXNw">sha1_file()<i class="fa fa-external-link-alt"></i></span></td><td>计算文件的 SHA-1 散列。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zaW1pbGFyX3RleHQuYXNw">similar_text()<i class="fa fa-external-link-alt"></i></span></td><td>计算两个字符串的相似度。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zb3VuZGV4LmFzcA==">soundex()<i class="fa fa-external-link-alt"></i></span></td><td>计算字符串的 soundex 键。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zcHJpbnRmLmFzcA==">sprintf()<i class="fa fa-external-link-alt"></i></span></td><td>把格式化的字符串写入变量中。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zc2NhbmYuYXNw">sscanf()<i class="fa fa-external-link-alt"></i></span></td><td>根据指定的格式解析来自字符串的输入。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfZ2V0Y3N2LmFzcA==">str_getcsv()<i class="fa fa-external-link-alt"></i></span></td><td>把 CSV 字符串解析到数组中。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfaXJlcGxhY2UuYXNw">str_ireplace()<i class="fa fa-external-link-alt"></i></span></td><td>替换字符串中的一些字符（对大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfcGFkLmFzcA==">str_pad()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串填充为新的长度。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfcmVwZWF0LmFzcA==">str_repeat()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串重复指定的次数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfcmVwbGFjZS5hc3A=">str_replace()<i class="fa fa-external-link-alt"></i></span></td><td>替换字符串中的一些字符（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfcm90MTMuYXNw">str_rot13()<i class="fa fa-external-link-alt"></i></span></td><td>对字符串执行 ROT13 编码。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfc2h1ZmZsZS5hc3A=">str_shuffle()<i class="fa fa-external-link-alt"></i></span></td><td>随机地打乱字符串中的所有字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfc3BsaXQuYXNw">str_split()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串分割到数组中。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJfd29yZF9jb3VudC5hc3A=">str_word_count()<i class="fa fa-external-link-alt"></i></span></td><td>计算字符串中的单词数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJjYXNlY21wLmFzcA==">strcasecmp()<i class="fa fa-external-link-alt"></i></span></td><td>比较两个字符串（对大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJjaHIuYXNw">strchr()<i class="fa fa-external-link-alt"></i></span></td><td>查找字符串在另一字符串中的第一次出现。（strstr() 的别名。）</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJjbXAuYXNw">strcmp()<i class="fa fa-external-link-alt"></i></span></td><td>比较两个字符串（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJjb2xsLmFzcA==">strcoll()<i class="fa fa-external-link-alt"></i></span></td><td>比较两个字符串（根据本地设置）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJjc3BuLmFzcA==">strcspn()<i class="fa fa-external-link-alt"></i></span></td><td>返回在找到某些指定字符的任何部分之前，在字符串中查找的字符数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJpcF90YWdzLmFzcA==">strip_tags()<i class="fa fa-external-link-alt"></i></span></td><td>剥去字符串中的 HTML 和 PHP 标签。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJpcGNzbGFzaGVzLmFzcA==">stripcslashes()<i class="fa fa-external-link-alt"></i></span></td><td>删除由 addcslashes() 函数添加的反斜杠。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJpcHNsYXNoZXMuYXNw">stripslashes()<i class="fa fa-external-link-alt"></i></span></td><td>删除由 addslashes() 函数添加的反斜杠。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJpcG9zLmFzcA==">stripos()<i class="fa fa-external-link-alt"></i></span></td><td>返回字符串在另一字符串中第一次出现的位置（对大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJpc3RyLmFzcA==">stristr()<i class="fa fa-external-link-alt"></i></span></td><td>查找字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJsZW4uYXNw">strlen()<i class="fa fa-external-link-alt"></i></span></td><td>返回字符串的长度。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJuYXRjYXNlY21wLmFzcA==">strnatcasecmp()<i class="fa fa-external-link-alt"></i></span></td><td>使用一种"自然排序"算法来比较两个字符串（对大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJuYXRjbXAuYXNw">strnatcmp()<i class="fa fa-external-link-alt"></i></span></td><td>使用一种"自然排序"算法来比较两个字符串（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJuY2FzZWNtcC5hc3A=">strncasecmp()<i class="fa fa-external-link-alt"></i></span></td><td>前 n 个字符的字符串比较（对大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJuY21wLmFzcA==">strncmp()<i class="fa fa-external-link-alt"></i></span></td><td>前 n 个字符的字符串比较（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJwYnJrLmFzcA==">strpbrk()<i class="fa fa-external-link-alt"></i></span></td><td>在字符串中查找一组字符的任何一个字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJwb3MuYXNw">strpos()<i class="fa fa-external-link-alt"></i></span></td><td>返回字符串在另一字符串中第一次出现的位置（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJyY2hyLmFzcA==">strrchr()<i class="fa fa-external-link-alt"></i></span></td><td>查找字符串在另一个字符串中最后一次出现。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJyZXYuYXNw">strrev()<i class="fa fa-external-link-alt"></i></span></td><td>反转字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJyaXBvcy5hc3A=">strripos()<i class="fa fa-external-link-alt"></i></span></td><td>查找字符串在另一字符串中最后一次出现的位置（对大小写不敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJycG9zLmFzcA==">strrpos()<i class="fa fa-external-link-alt"></i></span></td><td>查找字符串在另一字符串中最后一次出现的位置（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJzcG4uYXNw">strspn()<i class="fa fa-external-link-alt"></i></span></td><td>返回在字符串中包含的特定字符的数目。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJzdHIuYXNw">strstr()<i class="fa fa-external-link-alt"></i></span></td><td>查找字符串在另一字符串中的第一次出现（对大小写敏感）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJ0b2suYXNw">strtok()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串分割为更小的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJ0b2xvd2VyLmFzcA==">strtolower()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串转换为小写字母。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJ0b3VwcGVyLmFzcA==">strtoupper()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串转换为大写字母。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdHJ0ci5hc3A=">strtr()<i class="fa fa-external-link-alt"></i></span></td><td>转换字符串中特定的字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdWJzdHIuYXNw">substr()<i class="fa fa-external-link-alt"></i></span></td><td>返回字符串的一部分。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdWJzdHJfY29tcGFyZS5hc3A=">substr_compare()<i class="fa fa-external-link-alt"></i></span></td><td>从指定的开始位置（二进制安全和选择性区分大小写）比较两个字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdWJzdHJfY291bnQuYXNw">substr_count()<i class="fa fa-external-link-alt"></i></span></td><td>计算子串在字符串中出现的次数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ19zdWJzdHJfcmVwbGFjZS5hc3A=">substr_replace()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串的一部分替换为另一个字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ190cmltLmFzcA==">trim()<i class="fa fa-external-link-alt"></i></span></td><td>移除字符串两侧的空白字符和其他字符。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ191Y2ZpcnN0LmFzcA==">ucfirst()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串中的首字符转换为大写。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ191Y3dvcmRzLmFzcA==">ucwords()<i class="fa fa-external-link-alt"></i></span></td><td>把字符串中每个单词的首字符转换为大写。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ192ZnByaW50Zi5hc3A=">vfprintf()<i class="fa fa-external-link-alt"></i></span></td><td>把格式化的字符串写到指定的输出流。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ192cHJpbnRmLmFzcA==">vprintf()<i class="fa fa-external-link-alt"></i></span></td><td>输出格式化的字符串。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ192c3ByaW50Zi5hc3A=">vsprintf()<i class="fa fa-external-link-alt"></i></span></td><td>把格式化字符串写入变量中。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX3N0cmluZ193b3Jkd3JhcC5hc3A=">wordwrap()<i class="fa fa-external-link-alt"></i></span></td><td>打断字符串为指定数量的字串</td></tr></tbody></table>

<hr>
<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h2><table><tbody><tr><th>函数</th><th>描述</th></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5LmFzcA==">array()<i class="fa fa-external-link-alt"></i></span></td><td>创建数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NoYW5nZV9rZXlfY2FzZS5hc3A=">array_change_key_case()<i class="fa fa-external-link-alt"></i></span></td><td>把数组中所有键更改为小写或大写。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NodW5rLmFzcA==">array_chunk()<i class="fa fa-external-link-alt"></i></span></td><td>把一个数组分割为新的数组块。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NvbHVtbi5hc3A=">array_column()<i class="fa fa-external-link-alt"></i></span></td><td>返回输入数组中某个单一列的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NvbWJpbmUuYXNw">array_combine()<i class="fa fa-external-link-alt"></i></span></td><td>通过合并两个数组来创建一个新数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NvdW50X3ZhbHVlcy5hc3A=">array_count_values()<i class="fa fa-external-link-alt"></i></span></td><td>用于统计数组中所有值出现的次数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2RpZmYuYXNw">array_diff()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（只比较键值）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2RpZmZfYXNzb2MuYXNw">array_diff_assoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（比较键名和键值）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2RpZmZfa2V5LmFzcA==">array_diff_key()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（只比较键名）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2RpZmZfdWFzc29jLmFzcA==">array_diff_uassoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（比较键名和键值，使用用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2RpZmZfdWtleS5hc3A=">array_diff_ukey()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（只比较键名，使用用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ZpbGwuYXNw">array_fill()<i class="fa fa-external-link-alt"></i></span></td><td>用给定的键值填充数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ZpbGxfa2V5cy5hc3A=">array_fill_keys()<i class="fa fa-external-link-alt"></i></span></td><td>用指定键名的给定键值填充数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ZpbHRlci5hc3A=">array_filter()<i class="fa fa-external-link-alt"></i></span></td><td>用回调函数过滤数组中的元素。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ZsaXAuYXNw">array_flip()<i class="fa fa-external-link-alt"></i></span></td><td>交换数组中的键和值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ludGVyc2VjdC5hc3A=">array_intersect()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（只比较键值）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ludGVyc2VjdF9hc3NvYy5hc3A=">array_intersect_assoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（比较键名和键值）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ludGVyc2VjdF9rZXkuYXNw">array_intersect_key()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（只比较键名）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ludGVyc2VjdF91YXNzb2MuYXNw">array_intersect_uassoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（比较键名和键值，使用用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2ludGVyc2VjdF91a2V5LmFzcA==">array_intersect_ukey()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（只比较键名，使用用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2tleV9leGlzdHMuYXNw">array_key_exists()<i class="fa fa-external-link-alt"></i></span></td><td>检查指定的键名是否存在于数组中。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2tleXMuYXNw">array_keys()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中所有的键名。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X21hcC5hc3A=">array_map()<i class="fa fa-external-link-alt"></i></span></td><td>把数组中的每个值发送到用户自定义函数，返回新的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X21lcmdlLmFzcA==">array_merge()<i class="fa fa-external-link-alt"></i></span></td><td>把一个或多个数组合并为一个数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X21lcmdlX3JlY3Vyc2l2ZS5hc3A=">array_merge_recursive()<i class="fa fa-external-link-alt"></i></span></td><td>递归地合并一个或多个数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X211bHRpc29ydC5hc3A=">array_multisort()<i class="fa fa-external-link-alt"></i></span></td><td>对多个数组或多维数组进行排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3BhZC5hc3A=">array_pad()<i class="fa fa-external-link-alt"></i></span></td><td>用值将数组填补到指定长度。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3BvcC5hc3A=">array_pop()<i class="fa fa-external-link-alt"></i></span></td><td>删除数组的最后一个元素（出栈）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Byb2R1Y3QuYXNw">array_product()<i class="fa fa-external-link-alt"></i></span></td><td>计算数组中所有值的乘积。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3B1c2guYXNw">array_push()<i class="fa fa-external-link-alt"></i></span></td><td>将一个或多个元素插入数组的末尾（入栈）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3JhbmQuYXNw">array_rand()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中一个或多个随机的键。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3JlZHVjZS5hc3A=">array_reduce()<i class="fa fa-external-link-alt"></i></span></td><td>通过使用用户自定义函数，以字符串返回数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3JlcGxhY2UuYXNw">array_replace()<i class="fa fa-external-link-alt"></i></span></td><td>使用后面数组的值替换第一个数组的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3JlcGxhY2VfcmVjdXJzaXZlLmFzcA==">array_replace_recursive()<i class="fa fa-external-link-alt"></i></span></td><td>递归地使用后面数组的值替换第一个数组的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3JldmVyc2UuYXNw">array_reverse()<i class="fa fa-external-link-alt"></i></span></td><td>以相反的顺序返回数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NlYXJjaC5hc3A=">array_search()<i class="fa fa-external-link-alt"></i></span></td><td>搜索数组中给定的值并返回键名。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NoaWZ0LmFzcA==">array_shift()<i class="fa fa-external-link-alt"></i></span></td><td>删除数组中首个元素，并返回被删除元素的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NsaWNlLmFzcA==">array_slice()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中被选定的部分。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NwbGljZS5hc3A=">array_splice()<i class="fa fa-external-link-alt"></i></span></td><td>删除并替换数组中指定的元素。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3N1bS5hc3A=">array_sum()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中值的和。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VkaWZmLmFzcA==">array_udiff()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（只比较值，使用一个用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VkaWZmX2Fzc29jLmFzcA==">array_udiff_assoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（比较键和值，使用内建函数比较键名，使用用户自定义函数比较键值）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VkaWZmX3Vhc3NvYy5hc3A=">array_udiff_uassoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回差集（比较键和值，使用两个用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VpbnRlcnNlY3QuYXNw">array_uintersect()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（只比较值，使用一个用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VpbnRlcnNlY3RfYXNzb2MuYXNw">array_uintersect_assoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（比较键和值，使用内建函数比较键名，使用用户自定义函数比较键值）。</td></tr><tr><td class="no_wrap"><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VpbnRlcnNlY3RfdWFzc29jLmFzcA==">array_uintersect_uassoc()<i class="fa fa-external-link-alt"></i></span></td><td>比较数组，返回交集（比较键和值，使用两个用户自定义的键名比较函数）。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3VuaXF1ZS5hc3A=">array_unique()<i class="fa fa-external-link-alt"></i></span></td><td>删除数组中的重复值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Vuc2hpZnQuYXNw">array_unshift()<i class="fa fa-external-link-alt"></i></span></td><td>在数组开头插入一个或多个元素。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3ZhbHVlcy5hc3A=">array_values()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中所有的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3dhbGsuYXNw">array_walk()<i class="fa fa-external-link-alt"></i></span></td><td>对数组中的每个成员应用用户函数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3dhbGtfcmVjdXJzaXZlLmFzcA==">array_walk_recursive()<i class="fa fa-external-link-alt"></i></span></td><td>对数组中的每个成员递归地应用用户函数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2Fyc29ydC5hc3A=">arsort()<i class="fa fa-external-link-alt"></i></span></td><td>对关联数组按照键值进行降序排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2Fzb3J0LmFzcA==">asort()<i class="fa fa-external-link-alt"></i></span></td><td>对关联数组按照键值进行升序排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NvbXBhY3QuYXNw">compact()<i class="fa fa-external-link-alt"></i></span></td><td>创建包含变量名和它们的值的数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2NvdW50LmFzcA==">count()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中元素的数目。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2N1cnJlbnQuYXNw">current()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中的当前元素。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2VhY2guYXNw">each()<i class="fa fa-external-link-alt"></i></span></td><td>返回数组中当前的键／值对。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2VuZC5hc3A=">end()<i class="fa fa-external-link-alt"></i></span></td><td>将数组的内部指针指向最后一个元素。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2V4dHJhY3QuYXNw">extract()<i class="fa fa-external-link-alt"></i></span></td><td>从数组中将变量导入到当前的符号表。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2luX2FycmF5LmFzcA==">in_array()<i class="fa fa-external-link-alt"></i></span></td><td>检查数组中是否存在指定的值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2tleS5hc3A=">key()<i class="fa fa-external-link-alt"></i></span></td><td>从关联数组中取得键名。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2tyc29ydC5hc3A=">krsort()<i class="fa fa-external-link-alt"></i></span></td><td>对数组按照键名逆向排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2tzb3J0LmFzcA==">ksort()<i class="fa fa-external-link-alt"></i></span></td><td>对数组按照键名排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X2xpc3QuYXNw">list()<i class="fa fa-external-link-alt"></i></span></td><td>把数组中的值赋给一些变量。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X25hdGNhc2Vzb3J0LmFzcA==">natcasesort()<i class="fa fa-external-link-alt"></i></span></td><td>用“自然排序”算法对数组进行不区分大小写字母的排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X25hdHNvcnQuYXNw">natsort()<i class="fa fa-external-link-alt"></i></span></td><td>用“自然排序”算法对数组排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X25leHQuYXNw">next()<i class="fa fa-external-link-alt"></i></span></td><td>将数组中的内部指针向前移动一位。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Bvcy5hc3A=">pos()<i class="fa fa-external-link-alt"></i></span></td><td>current() 的别名。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3ByZXYuYXNw">prev()<i class="fa fa-external-link-alt"></i></span></td><td>将数组的内部指针倒回一位。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3JhbmdlLmFzcA==">range()<i class="fa fa-external-link-alt"></i></span></td><td>创建包含指定范围单元的数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Jlc2V0LmFzcA==">reset()<i class="fa fa-external-link-alt"></i></span></td><td>将数组的内部指针指向第一个元素。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Jzb3J0LmFzcA==">rsort()<i class="fa fa-external-link-alt"></i></span></td><td>对数组逆向排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NodWZmbGUuYXNw">shuffle()<i class="fa fa-external-link-alt"></i></span></td><td>将数组打乱。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NpemVvZi5hc3A=">sizeof()<i class="fa fa-external-link-alt"></i></span></td><td>count() 的别名。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3NvcnQuYXNw">sort()<i class="fa fa-external-link-alt"></i></span></td><td>对数组排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Vhc29ydC5hc3A=">uasort()<i class="fa fa-external-link-alt"></i></span></td><td>使用用户自定义的比较函数对数组中的键值进行排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Vrc29ydC5hc3A=">uksort()<i class="fa fa-external-link-alt"></i></span></td><td>使用用户自定义的比较函数对数组中的键名进行排序。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2FycmF5X3Vzb3J0LmFzcA==">usort()<i class="fa fa-external-link-alt"></i></span></td><td>使用用户自定义的比较函数对数组进行排序。</td></tr></tbody></table>

<hr>
<h2 id="时间-Date"><a href="#时间-Date" class="headerlink" title="时间(Date)"></a>时间(Date)</h2><table><tbody><tr><th>函数</th><th>描述</th></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfY2hlY2tkYXRlLmFzcA==">checkdate()<i class="fa fa-external-link-alt"></i></span></td><td>验证格利高里日期。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9hZGQuYXNw">date_add()<i class="fa fa-external-link-alt"></i></span></td><td>添加日、月、年、时、分和秒到日期。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfY3JlYXRlX2Zyb21fZm9ybWF0LmFzcA==">date_create_from_format()<i class="fa fa-external-link-alt"></i></span></td><td>返回根据指定格式进行格式化的新的 DateTime 对象。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9jcmVhdGUuYXNw">date_create()<i class="fa fa-external-link-alt"></i></span></td><td>返回新的 DateTime 对象。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9zZXQuYXNw">date_date_set()<i class="fa fa-external-link-alt"></i></span></td><td>设置新日期。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGVmYXVsdF90aW1lem9uZV9nZXQuYXNw">date_default_timezone_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回由所有的 Date/Time 函数使用的默认时区。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGVmYXVsdF90aW1lem9uZV9zZXQuYXNw">date_default_timezone_set()<i class="fa fa-external-link-alt"></i></span></td><td>设置由所有的 Date/Time 函数使用的默认时区。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9kaWZmLmFzcA==">date_diff()<i class="fa fa-external-link-alt"></i></span></td><td>返回两个日期间的差值。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9mb3JtYXQuYXNw">date_format()<i class="fa fa-external-link-alt"></i></span></td><td>返回根据指定格式进行格式化的日期。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZ2V0X2xhc3RfZXJyb3JzLmFzcA==">date_get_last_errors()<i class="fa fa-external-link-alt"></i></span></td><td>返回日期字符串中的警告/错误。</td></tr><tr><td>date_interval_create_from_date_string()</td><td>从字符串的相关部分建立 DateInterval。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfaW50ZXJ2YWxfZm9ybWF0LmFzcA==">date_interval_format()<i class="fa fa-external-link-alt"></i></span></td><td>格式化时间间隔。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfaXNvZGF0ZV9zZXQuYXNw">date_isodate_set()<i class="fa fa-external-link-alt"></i></span></td><td>设置 ISO 日期。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfbW9kaWZ5LmFzcA==">date_modify()<i class="fa fa-external-link-alt"></i></span></td><td>修改时间戳。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfb2Zmc2V0X2dldC5hc3A=">date_offset_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回时区偏移。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfcGFyc2VfZnJvbV9mb3JtYXQuYXNw">date_parse_from_format()<i class="fa fa-external-link-alt"></i></span></td><td>根据指定的格式返回带有关于指定日期的详细信息的关联数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9wYXJzZS5hc3A=">date_parse()<i class="fa fa-external-link-alt"></i></span></td><td>返回带有关于指定日期的详细信息的关联数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZV9zdWIuYXNw">date_sub()<i class="fa fa-external-link-alt"></i></span></td><td>从指定日期减去日、月、年、时、分和秒。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfc3VuX2luZm8uYXNw">date_sun_info()<i class="fa fa-external-link-alt"></i></span></td><td>返回包含有关指定日期与地点的日出/日落和黄昏开始/黄昏结束的信息的数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfc3VucmlzZS5hc3A=">date_sunrise()<i class="fa fa-external-link-alt"></i></span></td><td>返回指定日期与位置的日出时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfc3Vuc2V0LmFzcA==">date_sunset()<i class="fa fa-external-link-alt"></i></span></td><td>返回指定日期与位置的日落时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZV9zZXQuYXNw">date_time_set()<i class="fa fa-external-link-alt"></i></span></td><td>设置时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXN0YW1wX2dldC5hc3A=">date_timestamp_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回 Unix 时间戳。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXN0YW1wX3NldC5hc3A=">date_timestamp_set()<i class="fa fa-external-link-alt"></i></span></td><td>设置基于 Unix 时间戳的日期和时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfZ2V0LmFzcA==">date_timezone_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回给定 DateTime 对象的时区。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfc2V0LmFzcA==">date_timezone_set()<i class="fa fa-external-link-alt"></i></span></td><td>设置 DateTime 对象的时区。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZGF0ZS5hc3A=">date()<i class="fa fa-external-link-alt"></i></span></td><td>格式化本地日期和时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZ2V0ZGF0ZS5hc3A=">getdate()<i class="fa fa-external-link-alt"></i></span></td><td>返回某个时间戳或者当前本地的日期/时间的日期/时间信息。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZ2V0dGltZW9mZGF5LmFzcA==">gettimeofday()<i class="fa fa-external-link-alt"></i></span></td><td>返回当前时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZ21kYXRlLmFzcA==">gmdate()<i class="fa fa-external-link-alt"></i></span></td><td>格式化 GMT/UTC 日期和时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZ21ta3RpbWUuYXNw">gmmktime()<i class="fa fa-external-link-alt"></i></span></td><td>返回 GMT 日期的 UNIX 时间戳。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfZ21zdHJmdGltZS5hc3A=">gmstrftime()<i class="fa fa-external-link-alt"></i></span></td><td>根据区域设置对 GMT/UTC 日期和时间进行格式化。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfaWRhdGUuYXNw">idate()<i class="fa fa-external-link-alt"></i></span></td><td>将本地时间/日期格式化为整数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfbG9jYWx0aW1lLmFzcA==">localtime()<i class="fa fa-external-link-alt"></i></span></td><td>返回本地时间。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfbWljcm90aW1lLmFzcA==">microtime()<i class="fa fa-external-link-alt"></i></span></td><td>返回当前时间的微秒数。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfbWt0aW1lLmFzcA==">mktime()<i class="fa fa-external-link-alt"></i></span></td><td>返回日期的 Unix 时间戳。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfc3RyZnRpbWUuYXNw">strftime()<i class="fa fa-external-link-alt"></i></span></td><td>根据区域设置对本地时间/日期进行格式化。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfc3RycHRpbWUuYXNw">strptime()<i class="fa fa-external-link-alt"></i></span></td><td>解析由 strftime() 生成的时间/日期。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfc3RydG90aW1lLmFzcA==">strtotime()<i class="fa fa-external-link-alt"></i></span></td><td>将任何英文文本的日期或时间描述解析为 Unix 时间戳。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZS5hc3A=">time()<i class="fa fa-external-link-alt"></i></span></td><td>返回当前时间的 Unix 时间戳。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfYWJicmV2aWF0aW9uc19saXN0LmFzcA==">timezone_abbreviations_list()<i class="fa fa-external-link-alt"></i></span></td><td>返回包含夏令时、偏移量和时区名称的关联数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfaWRlbnRpZmllcnNfbGlzdC5hc3A=">timezone_identifiers_list()<i class="fa fa-external-link-alt"></i></span></td><td>返回带有所有时区标识符的索引数组。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfbG9jYXRpb25fZ2V0LmFzcA==">timezone_location_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回指定时区的位置信息。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfbmFtZV9mcm9tX2FiYnIuYXNw">timezone_name_from_abbr()<i class="fa fa-external-link-alt"></i></span></td><td>根据时区缩略语返回时区名称。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfbmFtZV9nZXQuYXNw">timezone_name_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回时区的名称。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfb2Zmc2V0X2dldC5hc3A=">timezone_offset_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回相对于 GMT 的时区偏移。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfb3Blbi5hc3A=">timezone_open()<i class="fa fa-external-link-alt"></i></span></td><td>创建新的 DateTimeZone 对象。</td></tr><tr><td>timezone_transitions_get()</td><td>返回时区的所有转换。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3BocC9mdW5jX2RhdGVfdGltZXpvbmVfdmVyc2lvbl9nZXQuYXNw">timezone_version_get()<i class="fa fa-external-link-alt"></i></span></td><td>返回时区数据库的版本。</td></tr></tbody></table>

<hr>
<h2 id="其他-Others"><a href="#其他-Others" class="headerlink" title="其他(Others)"></a>其他(Others)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间</span></span><br><span class="line"><span class="variable">$startDate</span> = <span class="string">&quot;2020-01-01 12:00:00&quot;</span>; <span class="comment">// 开始时间</span></span><br><span class="line"><span class="variable">$endDate</span> = <span class="string">&quot;2020-02-02 11:00:00&quot;</span>; <span class="comment">// 结束时间</span></span><br><span class="line">(<span class="title function_ invoke__">strtotime</span>(<span class="variable">$endDate</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="variable">$startDate</span>)); <span class="comment">// 计算相差之秒数</span></span><br><span class="line"><span class="title function_ invoke__">round</span>((<span class="title function_ invoke__">strtotime</span>(<span class="variable">$endDate</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="variable">$startDate</span>)) / <span class="number">60</span>); <span class="comment">// 计算相差之分钟数</span></span><br><span class="line"><span class="title function_ invoke__">round</span>((<span class="title function_ invoke__">strtotime</span>(<span class="variable">$endDate</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="variable">$startDate</span>)) / (<span class="number">60</span> * <span class="number">60</span>), <span class="number">2</span>); <span class="comment">// 计算相差之小时数</span></span><br><span class="line"><span class="title function_ invoke__">round</span>((<span class="title function_ invoke__">strtotime</span>(<span class="variable">$endDate</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="variable">$startDate</span>)) / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>), <span class="number">2</span>); <span class="comment">// 计算相差之天数</span></span><br><span class="line"><span class="variable">$startDt</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-01 00:00:00&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="variable">$searchMonth</span>));</span><br><span class="line"><span class="variable">$endDt</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="variable">$startDt</span> . <span class="string">&quot;+1 month -1 day&quot;</span>));</span><br><span class="line"><span class="comment">// hour,week,month,year 等加不加 s 都可以。</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;now&quot;</span>)); <span class="comment">// 现在时间</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+5 hours&quot;</span>)); <span class="comment">// 现在时间 +5 小时</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+2 week&quot;</span>)); <span class="comment">// 现在时间 +2 星期</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+2 months&quot;</span>)); <span class="comment">// 现在时间 +2 月</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+1 week 3 days 7 hours 40 minutes 5 seconds&quot;</span>)); <span class="comment">// 现在时间 +1 星期 3 天 7 小时 40 分钟 5 秒</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;next Monday&quot;</span>)); <span class="comment">// 下个星期的星期一</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last Sunday&quot;</span>)); <span class="comment">// 上个星期的星期天</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="title function_ invoke__">array_intersect</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">//比较数组，返回交集（只比较键值）。</span></span><br><span class="line"><span class="title function_ invoke__">array_intersect_assoc</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">// 比较数组，返回交集（比较键名和键值）。</span></span><br><span class="line"><span class="title function_ invoke__">array_intersect_key</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">// 比较数组，返回交集（只比较键名）。</span></span><br><span class="line"><span class="title function_ invoke__">array_column</span>(<span class="variable">$input</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">array_diff</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">// 比较数组，返回差集（只比较键值）。</span></span><br><span class="line"><span class="title function_ invoke__">array_diff_assoc</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">// 比较数组，返回差集（比较键名和键值）。</span></span><br><span class="line"><span class="title function_ invoke__">array_diff_key</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">// 比较数组，返回差集（只比较键名）。</span></span><br><span class="line"><span class="title function_ invoke__">array_combine</span>(keys, values); <span class="comment">// 函数通过合并两个数组来创建一个新数组，其中的一个数组是键名，另一个数组的值为键值。</span></span><br><span class="line"><span class="title function_ invoke__">array_merge</span>(<span class="variable">$a1</span>, <span class="variable">$a2</span>); <span class="comment">// 把一个或多个数组合并为一个数组。</span></span><br><span class="line"><span class="title function_ invoke__">array_unique</span>(<span class="variable">$a1</span>); <span class="comment">// 删除数组中的重复值</span></span><br><span class="line"><span class="title function_ invoke__">array_values</span>(<span class="variable">$a1</span>); <span class="comment">// 返回数组中所有的值。</span></span><br><span class="line"><span class="title function_ invoke__">array_keys</span>(<span class="variable">$a1</span>); <span class="comment">// 返回数组中所有的键名。</span></span><br><span class="line"><span class="title function_ invoke__">array_flip</span>(<span class="variable">$a1</span>); <span class="comment">// 反转数组 keyvalue交换</span></span><br><span class="line"><span class="title function_ invoke__">array_slice</span>((<span class="keyword">array</span>) <span class="variable">$output</span>, <span class="variable">$start</span>, <span class="variable">$count</span>); <span class="comment">// 裁剪数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组排序</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArrByField</span>(<span class="params">&amp;<span class="variable">$array</span>, <span class="variable">$field</span>, <span class="variable">$desc</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$fieldArr</span> = [];</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="variable">$fieldArr</span>[<span class="variable">$k</span>] = <span class="variable">$v</span>[<span class="variable">$field</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$sortType</span> = <span class="variable">$desc</span> ? SORT_DESC : SORT_ASC;</span><br><span class="line">  <span class="title function_ invoke__">array_multisort</span>(<span class="variable">$fieldArr</span>, <span class="variable">$sortType</span>, <span class="variable">$array</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>, <span class="variable">$obj</span>-&gt;&#123;<span class="number">123</span>&#125;); <span class="comment">// 在 php 中，如果对象属性是数字，我们需要增加 `&#123;&#125;` 来获取值。</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">implode</span>(<span class="string">&quot;,&quot;</span>, <span class="variable">$optSql</span>); <span class="comment">// = js join</span></span><br><span class="line"><span class="title function_ invoke__">explode</span>(separator, <span class="keyword">string</span>, limit[<span class="literal">null</span> =&gt; all, <span class="number">0</span> =&gt; <span class="number">1</span>个, <span class="number">0</span> =&gt; n个, <span class="number">0</span> =&gt; n-<span class="number">1</span>个]); <span class="comment">// = js split</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">empty</span>(<span class="variable">$var</span>); <span class="comment">// 如果 var 是非空或非零的值，则 empty() 返回 false。&quot;&quot;、0、&quot;0&quot;、null、false、array() 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 true。</span></span><br><span class="line"><span class="comment">// 判断对象属性为可使用 isset 或者 get_object_vars [return count(array) === 0] 或者 empty。</span></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$var1</span>, <span class="variable">$var1</span>, ...); <span class="comment">// isset 不是函数，是语句。检测变量是否设置，若使用 isset() 测试一个被设置成 null 的变量，将返回 false。同时要注意的是一个 NULL 字节（&quot;\0&quot;）并不等同于 PHP 的 null 常量。</span></span><br><span class="line"><span class="comment">// 如果检查一个数组中是否存在某个 key，当数组中存在这个 key 且 value 不为 null 时返回 true。</span></span><br><span class="line"><span class="comment">// 如果变量不存在，isset() 和 empty() 都不会报错。而 is_null() 和 is_numeric() 会报错，二者用来判断常量会报错，比如：null，true，false...</span></span><br><span class="line"><span class="title function_ invoke__">is_null</span>(<span class="variable">$var</span>); <span class="comment">// 判断是否为 null。$var === null 更快。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常用方法</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>常用方法小结</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-ListView组件下拉刷新+滚动底部加载+缓存封装</title>
    <url>/flutter_list_view/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>Flutter的ListView组件，虽然很好用，但是数据量大的时候，在低配置的机器上会奇卡无比，所以我封装了一个ListView组件，对数据进行截断，并使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpYW5qaWFUZWNoL2tlZnJhbWU=">keframe<i class="fa fa-external-link-alt"></i></span> 插件进行流畅性优化，提升低配置设备的用户体验。</p>
<p>具体可直接查看代码示例，配有相关注释。</p>
</div>
<span id="more"></span>

<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><blockquote>
<p>以下为一台低配置的 Android6.0 设备上的预览效果，实际应该会更好。</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/flutter_list_view/flutter_list_view.gif"></p>
<video src="./flutter_list_view.mp4" preload="metadata" controls playsinline poster>Sorry, your browser does not support the video tag.</video>

<blockquote>
<p>大家也可以使用adb命令对设备进行录屏：<code>adb shell screenrecord /sdcard/test.mp4</code>，再转换为 gif 文件，推荐使用<span class="exturl" data-url="aHR0cHM6Ly9lemdpZi5jb20vdmlkZW8tdG8tZ2lm">https://ezgif.com/video-to-gif<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<h3 id="组件代码"><a href="#组件代码" class="headerlink" title="组件代码"></a>组件代码</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: hxb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/cupertino.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_easyloading/flutter_easyloading.dart&#x27;</span>;<span class="comment">//后续去除</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:keframe/size_cache_widget.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">可缓存+下拉刷新+滚动到底部自动加载的ListView组件（返回数据定义复杂是方便局部刷新）</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheTableList</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> tableList;</span><br><span class="line">  <span class="built_in">double</span> height;</span><br><span class="line">  ScrollController controller;</span><br><span class="line">  <span class="built_in">String</span> emptyMessage;</span><br><span class="line">  <span class="built_in">String</span> noMoreMessage;</span><br><span class="line">  <span class="built_in">Function</span> onRefresh; <span class="comment">//需返回完整的待渲染tablelist，方便组件局部刷新。</span></span><br><span class="line">  <span class="built_in">Function</span> createList; <span class="comment">//自定义的item建立事件</span></span><br><span class="line">  <span class="built_in">Function</span> getMoreData; <span class="comment">//需返回完整的待渲染tablelist，返回null表示无更多数据，方便组件局部刷新。</span></span><br><span class="line">  <span class="built_in">int</span> pageCount;</span><br><span class="line"></span><br><span class="line">  CacheTableList(</span><br><span class="line">      &#123;Key key,</span><br><span class="line">      <span class="meta">@required</span> <span class="keyword">this</span>.createList,</span><br><span class="line">      <span class="keyword">this</span>.tableList,</span><br><span class="line">      <span class="keyword">this</span>.onRefresh,</span><br><span class="line">      <span class="keyword">this</span>.controller,</span><br><span class="line">      <span class="keyword">this</span>.height,</span><br><span class="line">      <span class="keyword">this</span>.emptyMessage,</span><br><span class="line">      <span class="keyword">this</span>.noMoreMessage,</span><br><span class="line">      <span class="keyword">this</span>.pageCount,</span><br><span class="line">      <span class="keyword">this</span>.getMoreData&#125;)</span><br><span class="line">      <span class="comment">/// <span class="language-markdown">pageCount为静态数据懒加载，需配合tableList使用。getMoreData为动态加载数据，他与前者只能存在一种模式。</span></span></span><br><span class="line">      : <span class="keyword">assert</span>(getMoreData != <span class="keyword">null</span> || pageCount != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">assert</span>(pageCount == <span class="keyword">null</span> || tableList != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">assert</span>(pageCount != <span class="keyword">null</span> || tableList == <span class="keyword">null</span>), <span class="comment">//tableList与pageCount同在</span></span><br><span class="line">        <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CacheTableListState createState() =&gt; _CacheTableListState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CacheTableListState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CacheTableList</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> orginalTableList = [];</span><br><span class="line">  <span class="built_in">List</span> _tableList = [];</span><br><span class="line">  <span class="built_in">int</span> _pageCount = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">bool</span> _hasMore = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">double</span> _height;</span><br><span class="line">  ScrollController _controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    orginalTableList = widget.tableList ?? [];</span><br><span class="line">    _controller = widget.controller ?? <span class="keyword">new</span> ScrollController();</span><br><span class="line">    <span class="keyword">if</span> (widget.getMoreData != <span class="keyword">null</span> || widget.pageCount != <span class="number">0</span>) &#123;</span><br><span class="line">      _controller.addListener(() &#123;</span><br><span class="line">        <span class="keyword">if</span> (_controller.position.pixels == _controller.position.maxScrollExtent) &#123;</span><br><span class="line">          _getMoreData();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    _height = widget.height ?? <span class="number">300</span>; <span class="comment">//double.infinity,</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _controller.removeListener(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: _height,</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(color: Colors.white),</span><br><span class="line">      child: SizeCacheWidget(</span><br><span class="line">        estimateCount: _tableList.length,</span><br><span class="line">        child: </span><br><span class="line">        widget.onRefresh != <span class="keyword">null</span></span><br><span class="line">        ? RefreshIndicator(</span><br><span class="line">            onRefresh: _onRefresh, <span class="comment">//下拉刷新回调</span></span><br><span class="line">            displacement: <span class="number">10</span>, <span class="comment">//指示器显示时距顶部位置</span></span><br><span class="line">            color: Colors.white, <span class="comment">//指示器颜色，默认ThemeData.accentColor</span></span><br><span class="line">            backgroundColor: Colors.blueAccent, <span class="comment">//指示器背景颜色，默认ThemeData.canvasColor</span></span><br><span class="line">            notificationPredicate: defaultScrollNotificationPredicate, <span class="comment">//是否应处理滚动通知的检查（是否通知下拉刷新动作）</span></span><br><span class="line">            child: Scrollbar(</span><br><span class="line">              child: _createList(),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        : Scrollbar(</span><br><span class="line">            child: _createList(),</span><br><span class="line">          ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">创建list</span></span></span><br><span class="line">  Widget _createList() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_tableList.isEmpty &amp;&amp; _pageCount == <span class="number">0</span>) &#123;</span><br><span class="line">      _getMoreData();</span><br><span class="line">      <span class="keyword">return</span> CupertinoActivityIndicator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _tableList.isEmpty</span><br><span class="line">        ? Container(</span><br><span class="line">            height: _height - <span class="number">20</span>,</span><br><span class="line">            alignment: Alignment.topCenter,</span><br><span class="line">            margin: EdgeInsets.only(top: <span class="number">20</span>),</span><br><span class="line">            child: Text(</span><br><span class="line">              widget.emptyMessage ?? <span class="string">&#x27;暂无数据&#x27;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">15</span>, color: Colors.black38, fontWeight: FontWeight.bold),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        : ListView.builder(</span><br><span class="line">            controller: _controller,</span><br><span class="line">            cacheExtent: <span class="number">1000</span>,</span><br><span class="line">            itemCount: _tableList.length,</span><br><span class="line">            itemBuilder: (_, i) &#123;</span><br><span class="line">              <span class="keyword">if</span> (i == _tableList.length - <span class="number">1</span> &amp;&amp; _hasMore) &#123;</span><br><span class="line">                <span class="keyword">return</span> Padding(</span><br><span class="line">                  padding: EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">                  child: Center(</span><br><span class="line">                    child: CupertinoActivityIndicator(),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> widget.createList(i);<span class="comment">//自定义创建item事件</span></span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">加载更多数据</span></span></span><br><span class="line">  <span class="keyword">void</span> _getMoreData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_hasMore) &#123;</span><br><span class="line">      EasyLoading.showToast(widget.noMoreMessage ?? <span class="string">&#x27;已经到底了&#x27;</span>);</span><br><span class="line">      <span class="comment">// ScaffoldMessenger.of(context).showSnackBar(</span></span><br><span class="line">      <span class="comment">//   SnackBar(</span></span><br><span class="line">      <span class="comment">//     content: Text(widget.noMoreMessage ?? &#x27;已经到底了&#x27;),</span></span><br><span class="line">      <span class="comment">//   ),</span></span><br><span class="line">      <span class="comment">// );</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (widget.getMoreData != <span class="keyword">null</span>) &#123;</span><br><span class="line">      _pageCount = -<span class="number">1</span>; <span class="comment">//使用自定义方法加载数据，除第一次加载数据后则无需pageCount。</span></span><br><span class="line">      <span class="keyword">var</span> tempData = <span class="keyword">await</span> widget.getMoreData();</span><br><span class="line">      <span class="keyword">if</span> (tempData == <span class="keyword">null</span>) &#123;</span><br><span class="line">        _hasMore = <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _tableList = tempData;</span><br><span class="line">      &#125;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> nowLength = orginalTableList.length;</span><br><span class="line">    <span class="keyword">if</span> (_pageCount &lt;= nowLength) &#123;</span><br><span class="line">      _pageCount += widget.pageCount;</span><br><span class="line">      Future.delayed(<span class="built_in">Duration</span>(microseconds: <span class="number">500</span>)).then((e) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (_pageCount &lt;= nowLength) &#123;</span><br><span class="line">            _tableList = orginalTableList.sublist(<span class="number">0</span>, _pageCount);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _tableList = orginalTableList;</span><br><span class="line">            _hasMore = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">刷新时候的事件，需返回Future。</span></span></span><br><span class="line">  Future _onRefresh() &#123;</span><br><span class="line">    <span class="keyword">return</span> Future.<span class="keyword">sync</span>(() <span class="keyword">async</span> &#123;</span><br><span class="line">      _tableList = <span class="keyword">await</span> widget.onRefresh();</span><br><span class="line">      _pageCount = <span class="number">0</span>;</span><br><span class="line">      _hasMore = <span class="keyword">true</span>;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="静态加载数据模式-简单示例"><a href="#静态加载数据模式-简单示例" class="headerlink" title="静态加载数据模式-简单示例"></a>静态加载数据模式-简单示例</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">CacheTableList(</span><br><span class="line">  tableList: [<span class="string">&quot;列表内容1&quot;</span>,<span class="string">&quot;列表内容2&quot;</span>,<span class="string">&quot;列表内容3&quot;</span>,<span class="string">&quot;列表内容4&quot;</span>,<span class="string">&quot;列表内容5&quot;</span>,<span class="string">&quot;列表内容6&quot;</span>],</span><br><span class="line">  pageCount: <span class="number">3</span>,<span class="comment">//上面6笔静态数据，会以每三笔的方式加载。注意高度设定需符合要求</span></span><br><span class="line">  createList: (index) &#123;</span><br><span class="line">    <span class="keyword">return</span> FrameSeparateWidget(<span class="comment">//使用keframe进行单帧动画优化，提升低配置设备流畅性。</span></span><br><span class="line">      index: index,</span><br><span class="line">      placeHolder: Container(<span class="comment">//占位组件，尽量简单。</span></span><br><span class="line">        height: <span class="number">36</span>,</span><br><span class="line">        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">        margin: EdgeInsets.only(bottom: <span class="number">5</span>, top: <span class="number">5</span>),</span><br><span class="line">        child: Text(<span class="string">&quot;......&quot;</span>),</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">      ),</span><br><span class="line">      child: ListTile(title: Text(<span class="string">&quot;列表第<span class="subst">$index</span>项&quot;</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  onRefresh: () &#123;</span><br><span class="line">    <span class="comment">//下拉事件-&gt;重新渲染列表</span></span><br><span class="line">    <span class="keyword">return</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>), () &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&quot;列表内容1&quot;</span>,<span class="string">&quot;列表内容2&quot;</span>,<span class="string">&quot;列表内容3&quot;</span>,<span class="string">&quot;列表内容4&quot;</span>,<span class="string">&quot;列表内容5&quot;</span>,<span class="string">&quot;列表内容6&quot;</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="动态加载数据模式-简单示例"><a href="#动态加载数据模式-简单示例" class="headerlink" title="动态加载数据模式-简单示例"></a>动态加载数据模式-简单示例</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _tableList = [&quot;列表内容1&quot;,&quot;列表内容2&quot;,&quot;列表内容3&quot;,&quot;列表内容4&quot;,&quot;列表内容5&quot;,&quot;列表内容6&quot;];</span></span><br><span class="line">CacheTableList(</span><br><span class="line">  createList: (index) &#123;</span><br><span class="line">    <span class="keyword">return</span> FrameSeparateWidget(<span class="comment">//使用 keframe 进行单帧动画优化，提升低配置设备流畅性。</span></span><br><span class="line">      index: index,</span><br><span class="line">      placeHolder: Container(<span class="comment">//占位组件，尽量简单。</span></span><br><span class="line">        height: <span class="number">36</span>,</span><br><span class="line">        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">        margin: EdgeInsets.only(bottom: <span class="number">5</span>, top: <span class="number">5</span>),</span><br><span class="line">        child: Text(<span class="string">&quot;......&quot;</span>),</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">      ),</span><br><span class="line">      child: ListTile(title: Text(_tableList[index]))</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  getMoreData: () &#123;</span><br><span class="line">    _tableList.addAll(_tableList);</span><br><span class="line">    <span class="keyword">return</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>), () &#123;</span><br><span class="line">      <span class="keyword">return</span> _tableList.length &gt; <span class="number">100</span> ? <span class="keyword">null</span> : _tableList; <span class="comment">//为null表示数据到极限不再加载</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">onRefresh不配置时则不会有下拉事件</span></span></span><br><span class="line">  <span class="comment">//  onRefresh: () &#123;</span></span><br><span class="line">  <span class="comment">//    //下拉事件-&gt;重新渲染列表</span></span><br><span class="line">  <span class="comment">//    return Future.delayed(Duration(milliseconds: 1000), () &#123;</span></span><br><span class="line">  <span class="comment">//      return [&quot;列表内容1&quot;,&quot;列表内容2&quot;,&quot;列表内容3&quot;,&quot;列表内容4&quot;,&quot;列表内容5&quot;,&quot;列表内容6&quot;];</span></span><br><span class="line">  <span class="comment">//    &#125;);</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-Dart全局可拖动悬浮球</title>
    <url>/dart_public_ball/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>当我们全局都需要用到某个设定且随时需要根据需求改变时，那么全局悬浮球是一个最好的选择(可拖动)，参考其他大佬的文章，优化封装了一个简易的悬浮球，记录一下0.0。</p>
</div>
<span id="more"></span>

<h3 id="Dart全局悬浮球"><a href="#Dart全局悬浮球" class="headerlink" title="Dart全局悬浮球"></a>Dart全局悬浮球</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PubScaffold</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  PubScaffold(&#123;<span class="keyword">this</span>.child&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PubScaffoldState createState() =&gt; _PubScaffoldState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PubScaffoldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PubScaffold</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> _bottomSheetList = [<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>];</span><br><span class="line">  <span class="built_in">bool</span> dragAble = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// bottomSheet是否已经显示</span></span><br><span class="line">  <span class="built_in">bool</span> isShow = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静止状态下的offset</span></span><br><span class="line">  Offset idleOffset = Offset(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 本次移动的offset</span></span><br><span class="line">  Offset moveOffset = Offset(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 最后一次down事件的offset</span></span><br><span class="line">  Offset lastStartOffset = Offset(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> OverlayEntry entry;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">列表点击事件</span></span></span><br><span class="line">  selectItemCallBack(e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;选中<span class="subst">$&#123;e&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (isShow) &#123;</span><br><span class="line">      Navigator.pop(context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">显示一个底部弹窗，这里是一个测试列表。</span></span></span><br><span class="line">  showSelectList() <span class="keyword">async</span> &#123;</span><br><span class="line">    KeyboardBack.keyboardBack();</span><br><span class="line">    <span class="keyword">if</span> (isShow) &#123;</span><br><span class="line">      Navigator.pop(context);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="keyword">await</span> showModalBottomSheet(</span><br><span class="line">      isScrollControlled: <span class="keyword">true</span>,</span><br><span class="line">      context: context,</span><br><span class="line">      enableDrag: <span class="keyword">false</span>,</span><br><span class="line">      shape: RoundedRectangleBorder(</span><br><span class="line">        borderRadius: BorderRadius.only(</span><br><span class="line">          topLeft: Radius.circular(<span class="number">10.0</span>),</span><br><span class="line">          topRight: Radius.circular(<span class="number">10.0</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        isShow = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> SingleChildScrollView(</span><br><span class="line">          child: Container(</span><br><span class="line">            <span class="comment">// 返回一个有高度的组件，对话框高度就是此高度。</span></span><br><span class="line">            padding: MediaQuery.of(context).viewInsets,</span><br><span class="line">            height: <span class="number">285</span>,</span><br><span class="line">            child: ListView(</span><br><span class="line">              children: _bottomSheetList.map((e) =&gt; </span><br><span class="line">                Container(</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      border: Border(</span><br><span class="line">                        bottom: BorderSide(color: Color(<span class="number">0xFFe3e3e3</span>)),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                    child: ListTile(</span><br><span class="line">                      onTap: () =&gt; selectItemCallBack(e),</span><br><span class="line">                      title: Text(e),</span><br><span class="line">                    ),</span><br><span class="line">                )).toList()</span><br><span class="line">              ),</span><br><span class="line">          );</span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="keyword">null</span>) &#123;</span><br><span class="line">      isShow = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(</span><br><span class="line">      builder: (context, constraints) &#123;</span><br><span class="line">        <span class="comment">// 显示悬浮按钮</span></span><br><span class="line">        WidgetsBinding.instance.addPostFrameCallback((_) =&gt; _insertOverlay(context));</span><br><span class="line">        <span class="keyword">return</span> widget.child;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 悬浮按钮，可以拖拽（可自定义样式）</span></span><br><span class="line">  <span class="keyword">void</span> _insertOverlay(BuildContext context) &#123;</span><br><span class="line">    entry = OverlayEntry(builder: (context) &#123;</span><br><span class="line">      <span class="keyword">final</span> size = MediaQuery.of(context).size;</span><br><span class="line">      <span class="built_in">double</span> maxWidth = size.width - <span class="number">50</span>;</span><br><span class="line">      <span class="built_in">double</span> maxHeight = size.height - <span class="number">50</span>;</span><br><span class="line">      <span class="built_in">double</span> defaultX = size.width - <span class="number">70</span>;</span><br><span class="line">      <span class="built_in">double</span> defaultY = size.height - <span class="number">310</span>;</span><br><span class="line">      <span class="keyword">return</span> Positioned(</span><br><span class="line">        top: draggable</span><br><span class="line">            ? (moveOffset.dy &lt; <span class="number">0</span> <span class="comment">// 沉浸式如果超出屏幕，默认为 0。</span></span><br><span class="line">                ? <span class="number">0</span></span><br><span class="line">                : moveOffset.dy &gt; maxHeight <span class="comment">// 其他情况超出屏幕默认为 maxHeight。</span></span><br><span class="line">                    ? maxHeight</span><br><span class="line">                    : moveOffset.dy)</span><br><span class="line">            : defaultY,</span><br><span class="line">        left: draggable ? (moveOffset.dx &gt; maxWidth ? maxWidth : moveOffset.dx) : defaultX,</span><br><span class="line">        child: GestureDetector(</span><br><span class="line">          <span class="comment">// 移动开始</span></span><br><span class="line">          onPanStart: (DragStartDetails details) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              lastStartOffset = details.globalPosition;</span><br><span class="line">              dragAble = <span class="keyword">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">              count++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 移动中</span></span><br><span class="line">          onPanUpdate: (DragUpdateDetails details) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              moveOffset = details.globalPosition - lastStartOffset + idleOffset;</span><br><span class="line">              <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                moveOffset = Offset(max(<span class="number">0</span>, moveOffset.dx), moveOffset.dy);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                moveOffset = Offset(max(<span class="number">0</span>, moveOffset.dx + (size.width - <span class="number">70</span>)), moveOffset.dy + (size.height - <span class="number">310</span>));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 移动结束</span></span><br><span class="line">          onPanEnd: (DragEndDetails detail) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              idleOffset = moveOffset * <span class="number">1</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: BallContainer(</span><br><span class="line">            onPressed: () =&gt; showSelectList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">悬浮按钮的样式</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BallContainer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span> onPressed;</span><br><span class="line">  BallContainer(&#123;<span class="keyword">this</span>.onPressed&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Material(</span><br><span class="line">      color: Colors.transparent,</span><br><span class="line">      child: GestureDetector(</span><br><span class="line">        onTap: onPressed,</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">50</span>,</span><br><span class="line">          height: <span class="number">50</span>,</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            shape: BoxShape.circle,</span><br><span class="line">            color: Color(<span class="number">0x666889E6</span>),</span><br><span class="line">          ),</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">&#x27;球体内容&#x27;</span>,</span><br><span class="line">            style: TextStyle(color: Colors.white),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">关闭键盘，避免键盘与弹出列表冲突。</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyboardBack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> BuildContext context = navigatorKey.currentState.overlay.context;</span><br><span class="line">  <span class="keyword">static</span> FocusScopeNode currentFocus = FocusScope.of(context);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> keyboardBack() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!currentFocus.hasPrimaryFocus &amp;&amp; currentFocus.focusedChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">      FocusManager.instance.primaryFocus.unfocus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>在主程序 main.dart 套上我们的 PubScaffold 即可。</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      builder: EasyLoading.init(),</span><br><span class="line">      home: PubScaffold(child: ...略)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-Dart Dialog的简单封装与TTS的使用</title>
    <url>/dart_tts_confirm/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>之前开发时发现，Flutter 原生的 showDialog 虽然挺方便，但是仅适用于提示或者关闭后不用做任何处理的时候，如果增加一些事件或者需要传递结果判断时，就很容易因为结果为null而出现bug，所以我进行了一层比较不理智的封装哈哈。</p>
<p>另外记录一下 flutter_tts 的简单使用，后面用到比较多。</p>
</div>
<span id="more"></span> 

<h3 id="showDialog-Dialog"><a href="#showDialog-Dialog" class="headerlink" title="showDialog Dialog"></a>showDialog Dialog</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">showDialog 不理智封装 (╯‵□′)╯︵┻━┻</span></span></span><br><span class="line"><span class="keyword">static</span> Future showConfirm(&#123;</span><br><span class="line">    BuildContext context,</span><br><span class="line">    <span class="built_in">String</span> title,</span><br><span class="line">    Widget content,</span><br><span class="line">    <span class="built_in">String</span> cancelText,</span><br><span class="line">    <span class="built_in">String</span> confirmText,</span><br><span class="line">    <span class="built_in">Function</span> onCancel,</span><br><span class="line">    <span class="built_in">Function</span> onConfirm,</span><br><span class="line">    AlertDialog <span class="built_in">Function</span>(BuildContext context) builder</span><br><span class="line">  &#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="keyword">await</span> showDialog(</span><br><span class="line">    context: context,</span><br><span class="line">    builder: (BuildContext context) &#123;</span><br><span class="line">      <span class="keyword">return</span> AlertDialog(</span><br><span class="line">        title: title != <span class="keyword">null</span> &amp;&amp; title.isNotEmpty ? Text(title) : <span class="keyword">null</span>,</span><br><span class="line">        content: content,</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          TextButton(</span><br><span class="line">            onPressed: () =&gt; Navigator.of(context).pop(<span class="keyword">false</span>),</span><br><span class="line">            child: Text(cancelText ?? <span class="string">&#x27;Cancel&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          TextButton(</span><br><span class="line">            onPressed: () =&gt; Navigator.of(context).pop(<span class="keyword">true</span>),</span><br><span class="line">            child: Text(confirmText ?? <span class="string">&#x27;Confirm&#x27;</span>),</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (flag != <span class="keyword">null</span> &amp;&amp; flag) &#123;</span><br><span class="line">    onConfirm();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onCancel != <span class="keyword">null</span>) &#123;</span><br><span class="line">    onCancel();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flutter-tts-plugin-TTS"><a href="#flutter-tts-plugin-TTS" class="headerlink" title="flutter_tts plugin TTS"></a>flutter_tts plugin TTS</h3><ul>
<li>首先在 <code>pubspec.yaml</code> 配置插件 <span class="exturl" data-url="aHR0cHM6Ly9wdWIuZmx1dHRlci1pby5jbi9wYWNrYWdlcy9mbHV0dGVyX3R0cy9leGFtcGxl">flutter_tts<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter_tts: ^3.1.0</span><br></pre></td></tr></table></figure>

<ul>
<li>添加初始化插件类</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_tts/flutter_tts.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TTSUtil</span> </span>&#123;</span><br><span class="line">  TTSUtil._();</span><br><span class="line">  <span class="keyword">static</span> TTSUtil _manager;</span><br><span class="line">  <span class="keyword">factory</span> TTSUtil() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_manager == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _manager = TTSUtil._();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _manager;</span><br><span class="line">  &#125;</span><br><span class="line">  FlutterTts flutterTts;</span><br><span class="line"></span><br><span class="line">  initTTS() &#123;</span><br><span class="line">    flutterTts = FlutterTts();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future speak(<span class="built_in">String</span> text) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">设置语言</span></span></span><br><span class="line">    <span class="keyword">await</span> flutterTts.setLanguage(<span class="string">&quot;zh-CN&quot;</span>);</span><br><span class="line">    <span class="comment">// 需配置中文语音包，若没有请自行下载，讯飞语音包亲测可用。</span></span><br><span class="line">    <span class="comment">// 本站下载地址 &#123;root&#125;/dart_tts_confirm/kdxf_tts.apk</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// <span class="language-markdown">设置音量</span></span></span><br><span class="line">    <span class="keyword">await</span> flutterTts.setVolume(<span class="number">0.8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// <span class="language-markdown">设置语速</span></span></span><br><span class="line">    <span class="keyword">await</span> flutterTts.setSpeechRate(<span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// <span class="language-markdown">音调</span></span></span><br><span class="line">    <span class="keyword">await</span> flutterTts.setPitch(<span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (text.isNotEmpty) &#123;</span><br><span class="line">        <span class="keyword">await</span> _stop();</span><br><span class="line">        <span class="keyword">await</span> flutterTts.speak(text);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">暂停</span></span></span><br><span class="line">  Future _pause() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> flutterTts.pause();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">结束</span></span></span><br><span class="line">  Future _stop() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> flutterTts.stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化并使用，建议使用缓存保存对象，全局使用。</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Ttser = <span class="keyword">new</span> TTSUtil();</span><br><span class="line">Ttser.initTTS();</span><br><span class="line"></span><br><span class="line">Ttser.speak(<span class="string">&#x27;你好，世界！hello world!&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-Dart使用正则表达式格式化时间</title>
    <url>/dart_time/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>坑！！！在 <strong>VsCode</strong> 中使用 <code>Dart和Flutter</code> 插件，必须打开项目源代码的<code>根目录</code>(<code>main.dart</code> 所在目录)才有代码提示和相关检查与校验，单独的 <code>.dart 文件</code> 或者打开 <code>多级目录</code> 都是没有的(但是可能会突然有一小会又突然没有，薛定谔的提示0.0！)，呜呜呜呜呜…搞得我一直以为是电脑环境的问题，重装了好几次 VsCode 插件与 Flutter SDK。</p>
<p>另外在 Flutter 开发的时候，发现 Dart 对于时间的处理比较麻烦，又不想使用外部插件，所以自己动手，写了一个简单的时间处理方法。</p>
<p>话不多说，直接上代码，还请各位大佬指正。</p>
</div>
<span id="more"></span> 

<h3 id="Dart-正则表达式时间处理"><a href="#Dart-正则表达式时间处理" class="headerlink" title="Dart 正则表达式时间处理"></a>Dart 正则表达式时间处理</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">建议封装一个工具类，定义此静态方法。</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">格式化时间 @author: doubleam</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">默认时间格式为 年-月-日 时:分:秒，可自定义，具体对应关系可参考 PHP 时间处理。</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">String</span> dateFormat(<span class="built_in">DateTime</span> time, &#123;<span class="built_in">String</span> format = <span class="string">&quot;yyyy-mm-dd hh:ii:ss&quot;</span>&#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> dateObj = &#123;</span><br><span class="line">    <span class="string">&#x27;m+&#x27;</span>: time.month, <span class="comment">//月份</span></span><br><span class="line">    <span class="string">&#x27;d+&#x27;</span>: time.day, <span class="comment">//日</span></span><br><span class="line">    <span class="string">&#x27;h+&#x27;</span>: time.hour, <span class="comment">//小时</span></span><br><span class="line">    <span class="string">&#x27;i+&#x27;</span>: time.minute, <span class="comment">//分</span></span><br><span class="line">    <span class="string">&#x27;s+&#x27;</span>: time.second, <span class="comment">//秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">RegExp</span> yearReg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">r&quot;(y+)&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (yearReg.hasMatch(format)) &#123;</span><br><span class="line">    <span class="keyword">var</span> matches = yearReg.allMatches(format);</span><br><span class="line">    <span class="built_in">String</span> match = <span class="string">&quot;<span class="subst">$&#123;matches.elementAt(<span class="number">0</span>).group(<span class="number">1</span>)&#125;</span>&quot;</span>;</span><br><span class="line">    format = format.replaceAll(match, <span class="string">&quot;<span class="subst">$&#123;time.year&#125;</span>&quot;</span>.substring(<span class="number">4</span> - match.length));</span><br><span class="line">  &#125;</span><br><span class="line">  dateObj.forEach((key, value) &#123;</span><br><span class="line">    <span class="built_in">RegExp</span> replaceReg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">r&#x27;(&#x27;</span> + <span class="string">&quot;<span class="subst">$key</span>&quot;</span> + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (replaceReg.hasMatch(format)) &#123;</span><br><span class="line">      <span class="keyword">var</span> matches = replaceReg.allMatches(format);</span><br><span class="line">      <span class="built_in">String</span> match = <span class="string">&quot;<span class="subst">$&#123;matches.elementAt(<span class="number">0</span>).group(<span class="number">1</span>)&#125;</span>&quot;</span>;</span><br><span class="line">      format = format.replaceAll(match, (match.length == <span class="number">1</span>) ? <span class="string">&quot;<span class="subst">$value</span>&quot;</span> : <span class="string">&quot;00<span class="subst">$value</span>&quot;</span>.substring(<span class="string">&quot;<span class="subst">$value</span>&quot;</span>.length));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外博主有写一个人性化时间的 Dart 方法，可以参考文章<a href="http://a.biugle.cn/string_list_map_date_dart/#Date">Dart 常用方法</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>获取网站图标</title>
    <url>/logo/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>获取网站图标</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p>废话不多说，贴代码了。</p>

</blockquote>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> links = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;link[rel*=&#x27;icon&#x27;]&quot;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span>.<span class="title function_">call</span>(links, <span class="keyword">function</span>(<span class="params">link</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = link.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">2</span>) == <span class="string">&#x27;//&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c图标地址：%chttp:<span class="subst">$&#123;url&#125;</span>`</span>,<span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#3fa9f5;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">4</span>) == <span class="string">&#x27;http&#x27;</span> || url.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">5</span>) == <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(url);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> allurl = (url.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">&#x27;/&#x27;</span>) ?</span><br><span class="line">      <span class="string">&#x27;http://&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + url : </span><br><span class="line">      <span class="string">&#x27;http://&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + <span class="string">&#x27;/&#x27;</span> + url;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c图标地址：%c<span class="subst">$&#123;allurl&#125;</span>`</span>,<span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#3fa9f5;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>网站图标</tag>
      </tags>
  </entry>
  <entry>
    <title>Biugle主页---更纯粹的网址导航</title>
    <url>/biugle/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>Biugle主页～别开生面，纯粹自由。(2020/4/25)</p>
</div>
<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;本导航是博主的毕业设计，目前网站的基本功能已经实现，百度与谷歌的SEO正提交进行中，现在进入测试阶段。网站采用前后端分离开发，是使用Laravel+Vue实现的SPA应用，相较于传统网站，本网址导航全局操作都不会刷新页面。前端路由使用Vue-router进行管理，用户状态与数据的保持管理使用的是Vuex，前后端交互使用的则是Axios，用户的登录与操作权限认证采用OAuth2.0，使用的是Laravel Passport插件。本网站支持切换搜索源，添加站点、分类，自定义页面等功能，支持邮箱验证以及发送邮件重置密码功能。目前PC端的界面还是很不错的，移动端自适应也已经完成（部分页面还不是很完美），希望喜欢的大佬们帮忙测试一下网站的功能，目前服务器配置较低，加上静态资源未缓存，网站的访问速度有点慢，还请谅解，后续会进行优化。有问题可以联系我或者扫描底部二维码添加QQ群，非常感谢。</p>
<p>&emsp;&emsp;PS：注册的时候请使用正确的邮箱，否则不会收到邮箱验证信息，完成测试后，用户数据不会清空，我会同步到正式网站，如果有喜欢的朋友欢迎一直使用本网站，谢谢！</p>
<p><strong>【<span class="exturl" data-url="aHR0cDovL2JpdWdsZS5jbi8=">点击进入导航（biugle.cn）<i class="fa fa-external-link-alt"></i></span>】</strong></p>
<p><strong>【<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1lNDExczd0OC8=">点击观看视频介绍<i class="fa fa-external-link-alt"></i></span>】</strong></p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="游客使用"><a href="#游客使用" class="headerlink" title="游客使用"></a>游客使用</h4><p>&emsp;&emsp;如果您只是单纯的想使用网站的搜索功能的话，可以不进行注册，本站的搜索功能是可以直接使用的，并且支持多种搜索源切换。</p>
<p>&emsp;&emsp;预览</p>
<p><img data-src="/images/loading.gif" data-original="/biugle/1.jpg"></p>
<h4 id="注册使用"><a href="#注册使用" class="headerlink" title="注册使用"></a>注册使用</h4><p>&emsp;&emsp;如果您想添加自己喜欢的网站、分类以及使用网站的自定义界面功能，欢迎注册本站，本站只需要邮箱即可注册，注册成功后就可以开启这些功能，这样的话，在任何地方，不管你使用哪台电脑，都可以用上自己专属的网址导航啦~</p>
<p>&emsp;&emsp;预览</p>
<ul>
<li>注册</li>
</ul>
<p>&emsp;&emsp;注册成功后记得去邮箱验证。</p>
<p><img data-src="/images/loading.gif" data-original="/biugle/2.jpg"></p>
<ul>
<li>登录</li>
</ul>
<p>&emsp;&emsp;只有验证后的账号才可以登录。<br><img data-src="/images/loading.gif" data-original="/biugle/3.jpg"></p>
<ul>
<li>搜索界面</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/biugle/4.jpg"></p>
<ul>
<li>站点管理</li>
</ul>
<p>&emsp;&emsp;可以添加、修改、删除自己的站点。<br><img data-src="/images/loading.gif" data-original="/biugle/5.jpg"></p>
<ul>
<li>分类管理</li>
</ul>
<p>&emsp;&emsp;可以添加、修改、删除分类。<br><img data-src="/images/loading.gif" data-original="/biugle/6.jpg"></p>
<ul>
<li>自定义主题</li>
</ul>
<p>&emsp;&emsp;可以选择默认主题，也可以选择主题后自定义背景，只需填写背景图的URL，还可以设置标题栏颜色，只需填写对于的颜色值即可，填写格式参考<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2Nzc3JlZi9wcl90ZXh0X2NvbG9yLmFzcA==">css color<i class="fa fa-external-link-alt"></i></span>属性。<br><img data-src="/images/loading.gif" data-original="/biugle/7.jpg"></p>
<ul>
<li>修改资料</li>
</ul>
<p>&emsp;&emsp;可以修改用户名和昵称<br><img data-src="/images/loading.gif" data-original="/biugle/8.jpg"></p>
<p>&emsp;&emsp;修改后可以查看自己的用户资料<br><img data-src="/images/loading.gif" data-original="/biugle/9.jpg"></p>
<ul>
<li>修改密码</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/biugle/10.jpg"></p>
<ul>
<li>留言反馈</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/biugle/11.jpg"></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>&emsp;&emsp;邮箱验证，在注册时看到以下提示后，请前往邮箱查看邮件并点击验证邮箱链接。<br><img data-src="/images/loading.gif" data-original="/biugle/12.jpg"></p>
<p>&emsp;&emsp;忘记密码，如果你忘记了密码，可以通过邮箱重置密码。<br><img data-src="/images/loading.gif" data-original="/biugle/13.jpg"></p>
<p>&emsp;&emsp;【<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LnFxLmNvbS9wcm9kdWN0cy8xMzc0Njc=">点击了解更多<i class="fa fa-external-link-alt"></i></span>】</p>
<blockquote>
<p>2021年4月2日服务器未续费，已停机。刚好准备全面调整升级，采用服务端渲染，优化系统模块化开发架构，升级服务器性能，不久后将会上线<code>3.0</code>版本，敬请期待。</p>
</blockquote>
]]></content>
      <categories>
        <category>Biugle主页</category>
      </categories>
      <tags>
        <tag>网址导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome浏览器网页截屏的方式</title>
    <url>/screenshoot/</url>
    <content><![CDATA[<div class="note success"><p>Chrome浏览器网页截屏的方式</p>
</div>
<span id="more"></span>


<h2 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h2><h3 id="进入自己需要截图的网站"><a href="#进入自己需要截图的网站" class="headerlink" title="进入自己需要截图的网站"></a>进入自己需要截图的网站</h3><h3 id="打开开发者工具-F12-Ctrl-Shift-I-右键→开发者工具-点击右上角菜单选择开发者工具"><a href="#打开开发者工具-F12-Ctrl-Shift-I-右键→开发者工具-点击右上角菜单选择开发者工具" class="headerlink" title="打开开发者工具(F12/Ctrl+Shift+I/右键→开发者工具/点击右上角菜单选择开发者工具)"></a>打开开发者工具(F12/Ctrl+Shift+I/右键→开发者工具/点击右上角菜单选择开发者工具)</h3><h3 id="打开执行命令行-Ctrl-Shift-P-控制台右上角菜单选择Run-Command"><a href="#打开执行命令行-Ctrl-Shift-P-控制台右上角菜单选择Run-Command" class="headerlink" title="打开执行命令行(Ctrl+Shift+P/控制台右上角菜单选择Run Command)"></a>打开执行命令行(Ctrl+Shift+P/控制台右上角菜单选择Run Command)</h3><h3 id="输入screen，选择需要截图的类型。"><a href="#输入screen，选择需要截图的类型。" class="headerlink" title="输入screen，选择需要截图的类型。"></a>输入screen，选择需要截图的类型。</h3><p><img data-src="/images/loading.gif" data-original="/screenshoot/runcommand.png"></p>
<h3 id="点击对应的命令"><a href="#点击对应的命令" class="headerlink" title="点击对应的命令"></a>点击对应的命令</h3><h3 id="安静等待截图自动下载，大功告成。"><a href="#安静等待截图自动下载，大功告成。" class="headerlink" title="安静等待截图自动下载，大功告成。"></a>安静等待截图自动下载，大功告成。</h3>]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>网页截屏</tag>
      </tags>
  </entry>
  <entry>
    <title>常见请求头、响应头、ContentType整理</title>
    <url>/html_header/</url>
    <content><![CDATA[<div class="note warning"><p>(HTTP)常见请求头、响应头、ContentType整理</p>
</div>
<span id="more"></span>


<h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><table>
<thead>
<tr>
<th align="center"><strong>请求头</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Accept</strong></td>
<td align="left">浏览器支持的 MIME 媒体类型</td>
</tr>
<tr>
<td align="center"><strong>Accept-Charset</strong></td>
<td align="left">用于指定客户端接受的字符集</td>
</tr>
<tr>
<td align="center"><strong>Accept-Encoding</strong></td>
<td align="left">用于指定可接受的内容编码，如gzip/deflate。</td>
</tr>
<tr>
<td align="center"><strong>Accept-Language</strong></td>
<td align="left">用于指定一种自然语言，如zh-CN</td>
</tr>
<tr>
<td align="center"><strong>Host</strong></td>
<td align="left">用于指定被请求资源的Internet主机和端口号</td>
</tr>
<tr>
<td align="center"><strong>User-Agent</strong></td>
<td align="left">客户端将他的操作系统、浏览器和其他属性告诉服务器。</td>
</tr>
<tr>
<td align="center"><strong>Origin</strong></td>
<td align="left">告诉服务器请求从哪里发起的，仅包括协议和域名。CORS跨域请求中可以看到response有对应的header，Access-Control-Allow-Origin。</td>
</tr>
<tr>
<td align="center"><strong>Referer</strong></td>
<td align="left">请求来源，告诉服务器请求的原始资源的URI，其用于所有类型的请求，并且包括：协议+域名+查询参数。很多抢购服务会用这个做限制，必须通过某个入口来进来才有效。</td>
</tr>
<tr>
<td align="center"><strong>Cookie</strong></td>
<td align="left">表示服务端给客户端传的http请求状态，也是多个key=value形式组合，比如登录后的令牌等。</td>
</tr>
<tr>
<td align="center"><strong>Connection</strong></td>
<td align="left">当前连接是否保持，如Keep-Alive。</td>
</tr>
<tr>
<td align="center"><strong>Content-Type</strong></td>
<td align="left">HTTP请求提交的内容类型，一般只有post提交时才需要设置，比如文件上传，表单提交等。用来指定不同格式的请求格式响应信息俗称 MIME 媒体类型。</td>
</tr>
<tr>
<td align="center"><strong>Date</strong></td>
<td align="left">请求发送时间</td>
</tr>
<tr>
<td align="center"><strong>Cache相关</strong></td>
<td align="left">Etag/Last-Modified/(max-age/Expires)</td>
</tr>
</tbody></table>
<h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><table>
<thead>
<tr>
<th align="center"><strong>响应头</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Server</strong></td>
<td align="left">使用的服务器名称，如Nginx/Apache。</td>
</tr>
<tr>
<td align="center"><strong>Content-Type</strong></td>
<td align="left">用来指明发送给接收者的实体正文的 MIME 媒体类型</td>
</tr>
<tr>
<td align="center"><strong>Content-Encoding</strong></td>
<td align="left">与请求报头Accept-Encoding对应，告诉浏览器服务端采用的是什么压缩编码。</td>
</tr>
<tr>
<td align="center"><strong>Content-Language</strong></td>
<td align="left">描述了资源使用的自然语言，与Accept-Language对应。</td>
</tr>
<tr>
<td align="center"><strong>Content-Length</strong></td>
<td align="left">指明实体正文的长度，用以字节方式存储的十进制数字来表示。</td>
</tr>
<tr>
<td align="center"><strong>Keep-Alive</strong></td>
<td align="left">保持连接的时间，如Keep-Alive:timerout=5,max=120。</td>
</tr>
<tr>
<td align="center"><strong>Allow</strong></td>
<td align="left">服务器支持哪些请求方法</td>
</tr>
<tr>
<td align="center"><strong>Access-Control-Allow-Origin</strong></td>
<td align="left">服务端指定哪些站点可以参与跨站资源共享</td>
</tr>
<tr>
<td align="center"><strong>Location</strong></td>
<td align="left">表示客户应当到哪里去获取资源，一般同时设置状态代码为3xx重定向。</td>
</tr>
<tr>
<td align="center"><strong>Transfer-Encoding</strong></td>
<td align="left">chunked 表示输出的内容长度不能确定，静态网页一般没，基本出现在动态网页里面。</td>
</tr>
<tr>
<td align="center"><strong>Refresh</strong></td>
<td align="left">是否刷新</td>
</tr>
<tr>
<td align="center"><strong>Accept-Ranges</strong></td>
<td align="left">响应的 HTTP 标头是由服务器使用以通告其支持部分请求的标志物。此字段的值表示可用于定义范围的单位。</td>
</tr>
<tr>
<td align="center"><strong>Date</strong></td>
<td align="left">请求发送的日期和时间</td>
</tr>
<tr>
<td align="center"><strong>Cache相关</strong></td>
<td align="left">Etag/Last-Modified/(max-age/Expires)</td>
</tr>
</tbody></table>
<h2 id="ContentType"><a href="#ContentType" class="headerlink" title="ContentType"></a>ContentType</h2><table>
<thead>
<tr>
<th align="center"><strong>文件类型</strong></th>
<th align="center"><strong>ContentType</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>7z</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>adb</strong></td>
<td align="center"><code>text/x-adasrc</code></td>
</tr>
<tr>
<td align="center"><strong>avi</strong></td>
<td align="center"><code>video/x-msvideo</code></td>
</tr>
<tr>
<td align="center"><strong>bmp</strong></td>
<td align="center"><code>image/bmp</code></td>
</tr>
<tr>
<td align="center"><strong>bak</strong></td>
<td align="center"><code>application/x-trash</code></td>
</tr>
<tr>
<td align="center"><strong>bin</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>c</strong></td>
<td align="center"><code>text/x-csrc</code></td>
</tr>
<tr>
<td align="center"><strong>cpp</strong></td>
<td align="center"><code>text/x-c++src</code></td>
</tr>
<tr>
<td align="center"><strong>class</strong></td>
<td align="center"><code>application/x-java</code></td>
</tr>
<tr>
<td align="center"><strong>css</strong></td>
<td align="center"><code>text/css</code></td>
</tr>
<tr>
<td align="center"><strong>csv</strong></td>
<td align="center"><code>text/csv</code></td>
</tr>
<tr>
<td align="center"><strong>csv</strong></td>
<td align="center"><code>application/vnd.ms-excel</code></td>
</tr>
<tr>
<td align="center"><strong>conf</strong></td>
<td align="center"><code>text/plain</code></td>
</tr>
<tr>
<td align="center"><strong>conf</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>docx</strong></td>
<td align="center"><code>application/vnd.openxmlformats-officedocument.wordprocessingml.document</code></td>
</tr>
<tr>
<td align="center"><strong>doc</strong></td>
<td align="center"><code>application/msword</code></td>
</tr>
<tr>
<td align="center"><strong>dv</strong></td>
<td align="center"><code>video/dv</code></td>
</tr>
<tr>
<td align="center"><strong>dwg</strong></td>
<td align="center"><code>image/vnd.dwg</code></td>
</tr>
<tr>
<td align="center"><strong>exe</strong></td>
<td align="center"><code>application/x-msdownload</code></td>
</tr>
<tr>
<td align="center"><strong>fig</strong></td>
<td align="center"><code>image/x-xfig</code></td>
</tr>
<tr>
<td align="center"><strong>flac</strong></td>
<td align="center"><code>audio/x-flac</code></td>
</tr>
<tr>
<td align="center"><strong>flv</strong></td>
<td align="center"><code>video/x-flv</code></td>
</tr>
<tr>
<td align="center"><strong>gif</strong></td>
<td align="center"><code>image/gif</code></td>
</tr>
<tr>
<td align="center"><strong>html</strong></td>
<td align="center"><code>text/html</code></td>
</tr>
<tr>
<td align="center"><strong>ico</strong></td>
<td align="center"><code>image/x-icon</code></td>
</tr>
<tr>
<td align="center"><strong>iso</strong></td>
<td align="center"><code>application/x-cd-image</code></td>
</tr>
<tr>
<td align="center"><strong>iso9660</strong></td>
<td align="center"><code>application/x-cd-image</code></td>
</tr>
<tr>
<td align="center"><strong>ini</strong></td>
<td align="center"><code>text/plain</code></td>
</tr>
<tr>
<td align="center"><strong>ini</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>jpg</strong></td>
<td align="center"><code>image/jpeg</code></td>
</tr>
<tr>
<td align="center"><strong>js</strong></td>
<td align="center"><code>application/javascript</code></td>
</tr>
<tr>
<td align="center"><strong>js</strong></td>
<td align="center"><code>text/javascript</code></td>
</tr>
<tr>
<td align="center"><strong>jsonp</strong></td>
<td align="center"><code>application/jsonp</code></td>
</tr>
<tr>
<td align="center"><strong>json</strong></td>
<td align="center"><code>application/json</code></td>
</tr>
<tr>
<td align="center"><strong>log</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>mpp</strong></td>
<td align="center"><code>application/vnd.ms-project</code></td>
</tr>
<tr>
<td align="center"><strong>m4a</strong></td>
<td align="center"><code>audio/mp4</code></td>
</tr>
<tr>
<td align="center"><strong>mkv</strong></td>
<td align="center"><code>video/x-matroska</code></td>
</tr>
<tr>
<td align="center"><strong>mp3</strong></td>
<td align="center"><code>audio/mpeg</code></td>
</tr>
<tr>
<td align="center"><strong>mp4</strong></td>
<td align="center"><code>video/mp4</code></td>
</tr>
<tr>
<td align="center"><strong>m4v</strong></td>
<td align="center"><code>video/mp4</code></td>
</tr>
<tr>
<td align="center"><strong>moov</strong></td>
<td align="center"><code>video/quicktime</code></td>
</tr>
<tr>
<td align="center"><strong>mov</strong></td>
<td align="center"><code>video/quicktime</code></td>
</tr>
<tr>
<td align="center"><strong>movie</strong></td>
<td align="center"><code>video/x-sgi-movie</code></td>
</tr>
<tr>
<td align="center"><strong>md</strong></td>
<td align="center"><code>text/plain</code></td>
</tr>
<tr>
<td align="center"><strong>md</strong></td>
<td align="center"><code>application/x-genesis-rom</code></td>
</tr>
<tr>
<td align="center"><strong>nbm</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>obj</strong></td>
<td align="center"><code>application/x-tgif</code></td>
</tr>
<tr>
<td align="center"><strong>ocl</strong></td>
<td align="center"><code>text/x-ocl</code></td>
</tr>
<tr>
<td align="center"><strong>ogg</strong></td>
<td align="center"><code>video/x-theora+ogg</code></td>
</tr>
<tr>
<td align="center"><strong>oga</strong></td>
<td align="center"><code>audio/ogg</code></td>
</tr>
<tr>
<td align="center"><strong>ppk</strong></td>
<td align="center"><code>text/plain</code></td>
</tr>
<tr>
<td align="center"><strong>ppk</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>php</strong></td>
<td align="center"><code>application/x-php</code></td>
</tr>
<tr>
<td align="center"><strong>py</strong></td>
<td align="center"><code>text/x-python</code></td>
</tr>
<tr>
<td align="center"><strong>png</strong></td>
<td align="center"><code>image/png</code></td>
</tr>
<tr>
<td align="center"><strong>pptx</strong></td>
<td align="center"><code>application/vnd.openxmlformats-officedocument.presentationml.presentation</code></td>
</tr>
<tr>
<td align="center"><strong>ppt</strong></td>
<td align="center"><code>application/vnd.ms-powerpoint</code></td>
</tr>
<tr>
<td align="center"><strong>pdf</strong></td>
<td align="center"><code>application/pdf</code></td>
</tr>
<tr>
<td align="center"><strong>reg</strong></td>
<td align="center"><code>text/x-ms-regedit</code></td>
</tr>
<tr>
<td align="center"><strong>src</strong></td>
<td align="center"><code>application/x-wais-source</code></td>
</tr>
<tr>
<td align="center"><strong>so</strong></td>
<td align="center"><code>application/x-sharedlib</code></td>
</tr>
<tr>
<td align="center"><strong>svg</strong></td>
<td align="center"><code>image/svg+xml</code></td>
</tr>
<tr>
<td align="center"><strong>sub</strong></td>
<td align="center"><code>text/x-subviewer</code></td>
</tr>
<tr>
<td align="center"><strong>sql</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>sql</strong></td>
<td align="center"><code>text/x-sql</code></td>
</tr>
<tr>
<td align="center"><strong>tar.gz</strong></td>
<td align="center"><code>application/x-compressed-tar</code></td>
</tr>
<tr>
<td align="center"><strong>theme</strong></td>
<td align="center"><code>application/x-theme</code></td>
</tr>
<tr>
<td align="center"><strong>tgz</strong></td>
<td align="center"><code>application/x-compressed-tar</code></td>
</tr>
<tr>
<td align="center"><strong>ttf</strong></td>
<td align="center"><code>application/x-font-ttf</code></td>
</tr>
<tr>
<td align="center"><strong>tif</strong></td>
<td align="center"><code>image/tiff</code></td>
</tr>
<tr>
<td align="center"><strong>txt</strong></td>
<td align="center"><code>text/plain</code></td>
</tr>
<tr>
<td align="center"><strong>uri</strong></td>
<td align="center"><code>text/x-uri</code></td>
</tr>
<tr>
<td align="center"><strong>url</strong></td>
<td align="center"><code>text/x-uri</code></td>
</tr>
<tr>
<td align="center"><strong>wav</strong></td>
<td align="center"><code>audio/x-wav</code></td>
</tr>
<tr>
<td align="center"><strong>wbmp</strong></td>
<td align="center"><code>image/vnd.wap.wbmp</code></td>
</tr>
<tr>
<td align="center"><strong>webm</strong></td>
<td align="center"><code>video/webm</code></td>
</tr>
<tr>
<td align="center"><strong>wmv</strong></td>
<td align="center"><code>video/x-ms-wmv</code></td>
</tr>
<tr>
<td align="center"><strong>xls</strong></td>
<td align="center"><code>application/vnd.ms-excel</code></td>
</tr>
<tr>
<td align="center"><strong>xlsx</strong></td>
<td align="center"><code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code></td>
</tr>
<tr>
<td align="center"><strong>xhtml</strong></td>
<td align="center"><code>application/xhtml+xml</code></td>
</tr>
<tr>
<td align="center"><strong>xml</strong></td>
<td align="center"><code>text/xml</code></td>
</tr>
<tr>
<td align="center"><strong>xml</strong></td>
<td align="center"><code>application/xml</code></td>
</tr>
<tr>
<td align="center"><strong>xml</strong></td>
<td align="center"><code>application/opensearchdescription+xml</code></td>
</tr>
<tr>
<td align="center"><strong>xmind</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>yml</strong></td>
<td align="center"><code>text/plain</code></td>
</tr>
<tr>
<td align="center"><strong>yml</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>zip</strong></td>
<td align="center"><code>application/x-zip-compressed</code></td>
</tr>
<tr>
<td align="center"><strong>zip</strong></td>
<td align="center"><code>application/zip</code></td>
</tr>
<tr>
<td align="center"><strong>binary</strong></td>
<td align="center"><code>application/octet-stream</code></td>
</tr>
<tr>
<td align="center"><strong>defaultformdata</strong></td>
<td align="center"><code>application/x-www-form-urlencoded</code></td>
</tr>
<tr>
<td align="center"><strong>fileformdata</strong></td>
<td align="center"><code>multipart/form-data</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>ContentType</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode常用快捷键</title>
    <url>/shortcut_vscode/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>VSCode常用快捷键查询表</p>
</div>
<span id="more"></span>

<h1 id="VSCode常用快捷键"><a href="#VSCode常用快捷键" class="headerlink" title="VSCode常用快捷键"></a>VSCode常用快捷键</h1><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>F1或Ctrl+Shift+P</strong></td>
<td align="center">显示命令面板</td>
</tr>
<tr>
<td align="center"><strong>F2</strong></td>
<td align="center">快速重命名</td>
</tr>
<tr>
<td align="center"><strong>F3/Shift+F3</strong></td>
<td align="center">搜索下一个/上一个</td>
</tr>
<tr>
<td align="center"><strong>F5/Shift+F5</strong></td>
<td align="center">开始(继续)/停止</td>
</tr>
<tr>
<td align="center"><strong>F11/Shift+F11</strong></td>
<td align="center">下一步/上一步</td>
</tr>
<tr>
<td align="center"><strong>F8/Shift+F8</strong></td>
<td align="center">转到下一个/上一个错误或警告</td>
</tr>
<tr>
<td align="center"><strong>F9</strong></td>
<td align="center">切换断点</td>
</tr>
<tr>
<td align="center"><strong>F10</strong></td>
<td align="center">跳过</td>
</tr>
<tr>
<td align="center"><strong>F11</strong></td>
<td align="center">切换全屏</td>
</tr>
<tr>
<td align="center"><strong>F12或Ctrl+鼠标点击</strong></td>
<td align="center">转到定义</td>
</tr>
<tr>
<td align="center"><strong>Alt+F12</strong></td>
<td align="center">当前页面查看定义</td>
</tr>
<tr>
<td align="center"><strong>Alt+↑/↓</strong></td>
<td align="center">向上/向下移动行</td>
</tr>
<tr>
<td align="center"><strong>Alt+Enter</strong></td>
<td align="center">选中所有匹配项</td>
</tr>
<tr>
<td align="center"><strong>Alt+单击</strong></td>
<td align="center">多处插入光标</td>
</tr>
<tr>
<td align="center"><strong>Alt+←/→</strong></td>
<td align="center">返回/前进</td>
</tr>
<tr>
<td align="center"><strong>Alt+Z</strong></td>
<td align="center">整理文档(超出屏幕换行)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+,</strong></td>
<td align="center">打开设置</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+P</strong></td>
<td align="center">快速打开文件</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+N</strong></td>
<td align="center">新窗口/实例</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+W</strong></td>
<td align="center">关闭窗口/实例</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+X</strong></td>
<td align="center">剪切行（空选定）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+C</strong></td>
<td align="center">复制行（空选定）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+K</strong></td>
<td align="center">删除行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Enter</strong></td>
<td align="center">在下面插入行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Enter</strong></td>
<td align="center">在上面插入行</td>
</tr>
<tr>
<td align="center"><strong>(Ctrl+Shift+\)</strong></td>
<td align="center">跳到匹配的括号</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+]/[或者Shift+Tab/Tab</strong></td>
<td align="center">缩进/缩进行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+↑/↓</strong></td>
<td align="center">向上/向下滚动行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+[/]</strong></td>
<td align="center">折叠/展开区域</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K Ctrl+[/]</strong></td>
<td align="center">折叠/展开所有子区域</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K Ctrl+0</strong></td>
<td align="center">折叠所有区域</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K Ctrl+J</strong></td>
<td align="center">展开所有区域</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+G</strong></td>
<td align="center">转到行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+M</strong></td>
<td align="center">显示问题面板</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Tab</strong></td>
<td align="center">切换当前打开的编辑内容</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F</strong></td>
<td align="center">搜索</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+H</strong></td>
<td align="center">替换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+D</strong></td>
<td align="center">选择下一个当前选择值</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K Ctrl+D</strong></td>
<td align="center">将当前选择值撤销一步</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Alt+↑/↓</strong></td>
<td align="center">上/下插入光标</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+U</strong></td>
<td align="center">撤销上一个光标</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+L/Ctrl+F2</strong></td>
<td align="center">选择当前选中的所有出现</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Alt+箭头键</strong></td>
<td align="center">多列选择</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+空格</strong></td>
<td align="center">提示建议</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Space或Ctrl+鼠标悬停</strong></td>
<td align="center">参数提示</td>
</tr>
<tr>
<td align="center"><strong>Ctrl K Ctrl+F</strong></td>
<td align="center">格式化选定区域</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+.</strong></td>
<td align="center">快速修复</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F4或Ctrl+W</strong></td>
<td align="center">关闭当前编辑</td>
</tr>
<tr>
<td align="center"><strong>(Ctrl+\)</strong></td>
<td align="center">拆分当前编辑</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+N</strong></td>
<td align="center">新文件</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+O</strong></td>
<td align="center">打开文件</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+S</strong></td>
<td align="center">保存</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+S</strong></td>
<td align="center">另存为</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K S</strong></td>
<td align="center">全部保存</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K Ctrl+W</strong></td>
<td align="center">关闭所有</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+T</strong></td>
<td align="center">重新打开关闭的编辑器</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Tab</strong></td>
<td align="center">打开下一个</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Tab</strong></td>
<td align="center">打开上一个</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+-/+</strong></td>
<td align="center">缩小/放大</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+B</strong></td>
<td align="center">切换侧栏可见性</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+F</strong></td>
<td align="center">显示搜索</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+D</strong></td>
<td align="center">显示调试</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+G</strong></td>
<td align="center">显示Git</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+X</strong></td>
<td align="center">显示扩展</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+H</strong></td>
<td align="center">文件内容批量替换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+C</strong></td>
<td align="center">打开新命令提示符/终端</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+U</strong></td>
<td align="center">显示输出面板</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+V</strong></td>
<td align="center">切换Markdown预览</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K V</strong></td>
<td align="center">从旁边打开Markdown预览</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+`</strong></td>
<td align="center">显示集成终端</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+`</strong></td>
<td align="center">创建新终端</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+5</strong></td>
<td align="center">拆分集成终端</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+C</strong></td>
<td align="center">复制选定</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+V</strong></td>
<td align="center">粘贴到活动端子</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Backspace</strong></td>
<td align="center">删除上一个单词</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+/</strong></td>
<td align="center">添加/解除注释</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Home/Ctrl+End</strong></td>
<td align="center">转到文件首/文件尾</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+PgUp/Ctrl+PgDown</strong></td>
<td align="center">向前/向后切换标签页</td>
</tr>
<tr>
<td align="center"><strong>Home/End</strong></td>
<td align="center">转到行首/行尾</td>
</tr>
<tr>
<td align="center"><strong>PgUp/PgDown</strong></td>
<td align="center">向上/向下滚动页面</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+A</strong></td>
<td align="center">添加/解除块注释</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+↓/↑</strong></td>
<td align="center">向上/向下复制行</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+I</strong></td>
<td align="center">在选定的每一行末尾插入光标</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+→/←</strong></td>
<td align="center">展开/缩小选择</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+拖动鼠标/按住鼠标中键拖动</strong></td>
<td align="center">多列选择</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+F</strong></td>
<td align="center">格式化文档</td>
</tr>
<tr>
<td align="center"><strong>(Ctrl+K Ctrl+R)</strong></td>
<td align="center">查看官方快捷键参考文档</td>
</tr>
<tr>
<td align="center"><strong>(Github Shift+/)</strong></td>
<td align="center">查看Github官方快捷键参考文档</td>
</tr>
<tr>
<td align="center"><strong>(Github .或Shift+.或Shift+&gt;)</strong></td>
<td align="center">在线查看编辑(.com 改成了 .dev)仓库代码 vscode-remotehub 利器</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS 基础知识</title>
    <url>/vue/</url>
    <content><![CDATA[<div class="note success"><p>2019年实习时的 VueJS基础知识 备份</p>
</div>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv">Vue<i class="fa fa-external-link-alt"></i></span> 是一套用于构建用户界面的渐进式框架，数据驱动视图，只关注视图层，采用自底向上增量开发的设计。</li>
</ul>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 原生引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul>
<li>组件名为多个单词</li>
<li>私有 property 名使用 $_ 前缀，并附带一个命名空间以避免冲突。</li>
<li>单文件组件的文件名始终单词大写开头，或者横线链接。</li>
<li>特定样式和约定组件全部以一个特定的前缀开头</li>
<li>和父组件紧密耦合的子组件应该以父组件名作为前缀命名</li>
<li>组件名倾向完整单词，避免缩写。</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="基本顺序"><a href="#基本顺序" class="headerlink" title="基本顺序"></a>基本顺序</h3><blockquote>
<p>创建→挂载→更新→销毁</p>
</blockquote>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><table>
<thead>
<tr>
<th align="center">State</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>beforeCreate</code></td>
<td align="left">创建前：此阶段为实例初始化，此时的数据观察和事件机制都未形成，不能获得 DOM 节点。</td>
</tr>
<tr>
<td align="center"><code>created</code></td>
<td align="left">创建后：实例初始化完毕，页面还没开始渲染，但可以操作数据(data,prop,发送请求获取数据)。</td>
</tr>
<tr>
<td align="center"><code>beforeMount</code></td>
<td align="left">挂载前：在这一阶段，我们虽然依然得不到具体的 DOM 元素，但 vue 挂载的根节点已经创建，之后对 DOM 的操作将围绕这个根元素继续进行，这个阶段是过渡性的，一般一个项目只能用到一两次。</td>
</tr>
<tr>
<td align="center"><code>mounted</code></td>
<td align="left">挂载后：在这个阶段，数据和 DOM 都已被渲染。</td>
</tr>
<tr>
<td align="center"><code>beforeUpdate</code></td>
<td align="left">更新前：这一阶段遵循数据驱动 DOM 的原则，函数在数据更新后虽然没立即更新数据，但是 DOM 中的数据会改变</td>
</tr>
<tr>
<td align="center"><code>updated</code></td>
<td align="left">更新后：在这一阶段 DOM 会和更改过的内容同步。</td>
</tr>
<tr>
<td align="center"><code>beforeDestroy</code></td>
<td align="left">销毁前：在上一阶段 vue 已经成功的通过数据驱动 DOM 更新，当我们不再需要 vue 操纵 DOM 时，就要销毁 vue ,也就是清除 vue 实例与 DOM 的关联，调 destroy 方法可以销毁当前组件，在销毁前会触发 beforeDestroy 钩子函数。(此时记得解除绑定事件，销毁定时器与全局变量等等。)</td>
</tr>
<tr>
<td align="center"><code>destroyed</code></td>
<td align="left">销毁后：在销毁后，会触发 destroyed 钩子函数。</td>
</tr>
</tbody></table>
<ul>
<li>生命周期图示</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/vue/lifecycle.png"></p>
<h3 id="父子组件执行顺序"><a href="#父子组件执行顺序" class="headerlink" title="父子组件执行顺序"></a>父子组件执行顺序</h3><ul>
<li>加载渲染过程</li>
</ul>
<blockquote>
<p>父beforeCreate→父created→父beforeMount→子beforeCreated→子created→子beforeMount→子mounted→父mounted</p>
</blockquote>
<ul>
<li>更新过程</li>
</ul>
<blockquote>
<p>父beforeUpdate→子beforeUpdate→子updated→父updated</p>
</blockquote>
<ul>
<li>销毁过程</li>
</ul>
<blockquote>
<p>父beforeDestroy→子beforeDestroy→子destroyed→父destroyed</p>
</blockquote>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="v-text-文本填充"><a href="#v-text-文本填充" class="headerlink" title="v-text 文本填充"></a>v-text 文本填充</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&#123;&#123; 双大括号也会将数据解释为纯文本 &#125;&#125;--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-html-html填充"><a href="#v-html-html填充" class="headerlink" title="v-html html填充"></a>v-html html填充</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-bind-动态地绑定一个或多个特性，或一个组件-prop-的表达式。"><a href="#v-bind-动态地绑定一个或多个特性，或一个组件-prop-的表达式。" class="headerlink" title="v-bind 动态地绑定一个或多个特性，或一个组件 prop 的表达式。"></a>v-bind 动态地绑定一个或多个特性，或一个组件 prop 的表达式。</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--当data里面定义的isActive等于true时，is-active这个类才会被添加起作用--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--当data里面定义的hasError等于true时，text-danger这个类才会被添加起作用--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--也可以写表达式：例如三元运算符等等--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;is-active&#x27;:isActive, &#x27;text-danger&#x27;:hasError&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其他写法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;单个类可写 :class=&quot;&#123;&#x27;bg-danger text-light&#x27;:true&#125;&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;多个类可写 :class=&quot;&#123;&#x27;bg-danger text-light&#x27;:true&#125;&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;xxx == xxxxx ? &#x27;bg-danger&#x27; : &#x27;bg-light&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;message-item-user&#x27;, &#123;&#x27;order-last&#x27;: xxx == xxxxx&#125;, &#123;xxx == xxxxx ? &#x27;bg-danger&#x27; : &#x27;bg-light&#x27;&#125;]&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">hasError</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-on-用于监听指定元素的-DOM-事件，绑定事件监听器。"><a href="#v-on-用于监听指定元素的-DOM-事件，绑定事件监听器。" class="headerlink" title="v-on 用于监听指定元素的 DOM 事件，绑定事件监听器。"></a>v-on 用于监听指定元素的 DOM 事件，绑定事件监听器。</h3><ul>
<li>常用 v-on 事件</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="left">Description</th>
<th align="center">Name</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>click</code></td>
<td align="left">点击元素</td>
<td align="center"><code>mouseenter</code></td>
<td align="left">鼠标移入元素</td>
</tr>
<tr>
<td align="center"><code>dbclick</code></td>
<td align="left">双击元素</td>
<td align="center"><code>mouseleave</code></td>
<td align="left">鼠标移出元素</td>
</tr>
<tr>
<td align="center"><code>focus</code></td>
<td align="left">元素获得焦点</td>
<td align="center"><code>mousemove</code></td>
<td align="left">鼠标在元素内移动</td>
</tr>
<tr>
<td align="center"><code>blur</code></td>
<td align="left">元素失去焦点</td>
<td align="center"><code>mousedown</code></td>
<td align="left">在元素上按下鼠标</td>
</tr>
<tr>
<td align="center"><code>keydown</code></td>
<td align="left">按下键盘</td>
<td align="center"><code>mouseup</code></td>
<td align="left">在元素上释放鼠标</td>
</tr>
<tr>
<td align="center"><code>keyup</code></td>
<td align="left">释放键盘</td>
<td align="center"><code>submit</code></td>
<td align="left">提交元素</td>
</tr>
<tr>
<td align="center"><code>input</code></td>
<td align="left">在元素内输入内容</td>
<td align="center"><code>scroll</code></td>
<td align="left">滚动元素</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;consoleLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">consoleLog</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-model-实现表单输入和应用状态之间的双向绑定。"><a href="#v-model-实现表单输入和应用状态之间的双向绑定。" class="headerlink" title="v-model 实现表单输入和应用状态之间的双向绑定。"></a>v-model 实现表单输入和应用状态之间的双向绑定。</h3><p>示例：</p>
<p>原理：<code>&lt;input type=&quot;text&quot; :value=&quot;datax&quot; @input=&quot;datax = $event.target.value&quot;&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;somebody&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello &#123;&#123;somebody&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">somebody</span>: <span class="string">&#x27;world&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-for-循环遍历，基于一个数组或者对象渲染一个列表。"><a href="#v-for-循环遍历，基于一个数组或者对象渲染一个列表。" class="headerlink" title="v-for 循环遍历，基于一个数组或者对象渲染一个列表。"></a>v-for 循环遍历，基于一个数组或者对象渲染一个列表。</h3><p>示例：</p>
<blockquote>
<p>有以下两种遍历方式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> //使用in，index是一个可选参数，表示当前项的索引。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>//使用of。</span><br><span class="line">//遍历对象时是按照Object.keys()的顺序进行遍历，即ascii顺序。</span><br></pre></td></tr></table></figure>

<h3 id="v-if-根据表达式的值的真假条件渲染元素"><a href="#v-if-根据表达式的值的真假条件渲染元素" class="headerlink" title="v-if 根据表达式的值的真假条件渲染元素"></a>v-if 根据表达式的值的真假条件渲染元素</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-else-搭配v-if使用"><a href="#v-else-搭配v-if使用" class="headerlink" title="v-else 搭配v-if使用"></a>v-else 搭配v-if使用</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-show-根据表达式的真假值展示元素"><a href="#v-show-根据表达式的真假值展示元素" class="headerlink" title="v-show 根据表达式的真假值展示元素"></a>v-show 根据表达式的真假值展示元素</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-pre-跳过这个元素和它的子元素的编译过程"><a href="#v-pre-跳过这个元素和它的子元素的编译过程" class="headerlink" title="v-pre 跳过这个元素和它的子元素的编译过程"></a>v-pre 跳过这个元素和它的子元素的编译过程</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> //这条语句不进行编译</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-once-只渲染元素和组件一次"><a href="#v-once-只渲染元素和组件一次" class="headerlink" title="v-once 只渲染元素和组件一次"></a>v-once 只渲染元素和组件一次</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> //单个元素</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>//有子元素</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once:comment</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> //组件</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;i in list&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用于处理 DOM 事件的事件修饰符</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Instructions</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.stop</code></td>
<td align="left">阻止事件继续传播</td>
</tr>
<tr>
<td align="center"><code>.prevent</code></td>
<td align="left">事件不再重载页面</td>
</tr>
<tr>
<td align="center"><code>.capture</code></td>
<td align="left">使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。</td>
</tr>
<tr>
<td align="center"><code>.self</code></td>
<td align="left">只当在 event.target 是当前元素自身时触发处理函数</td>
</tr>
<tr>
<td align="center"><code>.once</code></td>
<td align="left">事件将只会触发一次</td>
</tr>
<tr>
<td align="center"><code>.passive</code></td>
<td align="left">告诉浏览器你不想阻止事件的默认行为</td>
</tr>
</tbody></table>
<ul>
<li><code>@keyup.enter.native=&quot;toNextInput&quot;</code> 常用按键绑定</li>
</ul>
<h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><ul>
<li>el：指示 vue 编译器从什么地方开始解析 vue 语法，相当于一个占位符。</li>
<li>data：组织从 view 中抽象出来的属性，将视图的数据抽象出来存放在 data 中。</li>
<li>template：设置模板，可以用于替换页面元素。</li>
<li>method：放置页面中的业务逻辑，js 方法一般都放在 method 中。</li>
<li>render：创建真正的 Virtual Dom。</li>
<li>computed：根据已经存在的属性计算出新的属性，对于相同的数据会缓存，当依赖的属性值发生变化时，这个属性的值也会自动更新。</li>
<li>watch：监听 data 中的数据变化。</li>
</ul>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul>
<li>在两个大括号中<ul>
<li><code>&#123;&#123;message | capitalize&#125;&#125;</code></li>
</ul>
</li>
<li>在 v-bind 指令中<ul>
<li><code>v-bind:id=&quot;rawId | formatId&quot;</code></li>
</ul>
</li>
<li>串联<ul>
<li><code>&#123;&#123;message | filterA | filter&#125;&#125;</code></li>
</ul>
</li>
<li>接受参数<ul>
<li><code>&#123;&#123;message | filterA('arg1',arg2)&#125;&#125;</code></li>
</ul>
</li>
</ul>
<h2 id="计算属性和监听器"><a href="#计算属性和监听器" class="headerlink" title="计算属性和监听器"></a>计算属性和监听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul>
<li>computed</li>
<li>属性默认只有 getter，不过在需要的时候也可以提供一个 setter。</li>
<li>computed 和 methods 的区别：computed 是基于依赖缓存，只有相关依赖发生改变时才会重新取值。methods 是在重新渲染的时候，函数总会重新调用执行。</li>
</ul>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>first: &#123;&#123;first&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>last: &#123;&#123;last&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>result: &#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onclick&quot;</span>&gt;</span>更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">first</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">ast</span>: <span class="number">10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">result</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 监听 data 中的 first 和 last, 得到新变量 result。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 注意：只有当值改变时才会执行。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="variable language_">this</span>.<span class="property">last</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// set方法作用：通过参数修改计算的依赖属性 first 和 last 值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">first</span> = newValue;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">last</span> = newValue;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onclick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 调用计算属性的 set 方法，修改 first 和 last 的值。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">result</span> = <span class="number">15</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h3><ul>
<li>watch 实时监听数据变化并改变自身的值。</li>
<li>允许执行异步操作，限制执行该操作频率。</li>
</ul>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">value</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newVal != oldVal) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sum</span> = newVal;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="computed-watch-区别"><a href="#computed-watch-区别" class="headerlink" title="computed/watch 区别"></a>computed/watch 区别</h3><blockquote>
<p>computed</p>
</blockquote>
<ul>
<li>支持缓存，只有依赖数据发生改变，才会重新进行计算。</li>
<li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化。</li>
<li>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值。</li>
<li>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用 computed</li>
<li>如果 computed 属性属性值是函数，那么默认会走 get 方法，函数的返回值就是属性的属性值。在 computed 中的，属性都有一个 get 和一个 set 方法(自己配置)，当数据变化时，调用 set 方法。</li>
</ul>
<blockquote>
<p>watch</p>
</blockquote>
<ul>
<li>不支持缓存，发生改变，直接会触发监听事件。</li>
<li>watch 支持异步；</li>
<li>监听的函数接收两个参数，第一个参数是最新的值，第二个参数是输入之前的值。</li>
<li>当一个属性发生变化时，需要执行对应的操作。</li>
<li>监听数据必须是data中声明过或者父组件传递过来的 props 中的数据，当数据变化时，触发其他操作，函数有两个参数：<ul>
<li>immediate：组件加载立即触发回调函数执行。</li>
<li>deep：深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变(监听数组的变动不需要这么做)。注意：Vue 2 中 deep 无法监听到数组的变动和对象的新增，参考 <span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvbGlzdC5odG1sIyVFNiU5NSVCMCVFNyVCQiU4NCVFNiU5QiVCNCVFNiU5NiVCMCVFNiVBMyU4MCVFNiVCNSU4Qg==">Vue 数组更新检测<i class="fa fa-external-link-alt"></i></span>，只有以响应式的方式触发才会被监听到。</li>
</ul>
</li>
</ul>
<h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1s">官方文档<i class="fa fa-external-link-alt"></i></span>介绍如下</li>
</ul>
<p>&emsp;&emsp;当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的 property，并使用 <code>Object.defineProperty</code> 把这些 property 全部转为 <strong>getter/setter</strong>。<code>Object.defineProperty</code> 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>
<p>&emsp;&emsp;这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 <em><strong>vue-devtools</strong></em> 来获取对检查数据更加友好的用户界面。</p>
<p>&emsp;&emsp;每个组件实例都对应一个 <code>watcher</code> 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p>
<p><img data-src="/images/loading.gif" data-original="/vue/data_vm.png"></p>
<ul>
<li>博主 BB</li>
</ul>
<blockquote>
<p><code>Vue 2</code> 文档中提到：由于 JavaScript 的限制，Vue <strong>不能检测数组和对象</strong>的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p>
</blockquote>
<p>&emsp;&emsp;其实出现这个问题的主要原因就是 <code>Object.defineProperty</code>，因为 <code>Object.defineProperty</code>是采用数据劫持的方式进行数据监听，即必须提供监听数据的 <code>key</code>，才能进行数据拦截并监听，但是数组对象是变化的，所以存在这个缺陷。而 ES6 中的 <code>Proxy</code>，是通过直接代理数据的方式进行监听，所以没有此问题。</p>
<p>&emsp;&emsp;另外 <code>Vue 3</code> 中，<code>Object.defineProperty</code> 已改用为 ES6 <code>Proxy</code>。官方文档说明，当我们从一个组件的 <code>data</code> 函数中返回一个普通的 JavaScript 对象时，Vue 会将该对象包裹在一个带有 <code>get 和 set</code> 处理程序的 <code>Proxy</code> 中。<code>Proxy</code> 是在 ES6 中引入的，它使 <code>Vue 3</code> 避免了 Vue 早期版本中<strong>存在的一些响应性问题</strong>。</p>
<h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><blockquote>
<p>前面响应式原理中有提到虚拟 DOM(Virtual DOM)，那么如何理解它呢？</p>
</blockquote>
<p>&emsp;&emsp;虚拟 DOM 其实就是用普通 JavaScript 对象来描述 DOM 结构，因为不是真实DOM，所以称之为虚拟 DOM。<br>&emsp;&emsp;虚拟 DOM 是相对于浏览器所渲染出来的真实 DOM 而言的，在 <code>React/Vue</code> 等技术出现之前，我们要改变页面展示的内容只能通过遍历查询 DOM 树的方式找到需要修改的 DOM 然后修改样式行为或者结构，来达到更新页面的目的。<br>&emsp;&emsp;DOM 树的实现模块和 JavaScript 模块是分开的，这些跨模块的通讯增加了资源耗费成本，而且这种方式操作会引起浏览器的回流和重绘，使得性能开销巨大，同时每次查询 DOM 几乎都需要遍历整颗 DOM 树。<br>&emsp;&emsp;但若建立一个与 DOM 树对应的虚拟 DOM 对象( JavaScript 对象)，以对象嵌套的方式来表示 DOM 树及其层级结构，那么每次 DOM 的更改就变成了对 <strong>DOM 对象的属性的增删改查</strong>，这样一来查找 JavaScript 对象的属性变化要比查询 DOM 树的性能开销小。<br>&emsp;&emsp;所以 React/Vue 都采用虚拟 DOM 的方式来渲染页面，当监测页面触发了渲染事件或者数据变化后，会重新生成一个新的虚拟 DOM，然后对比新旧虚拟 DOM 进行渲染，至于<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMwMTg2MDcyMS9hbnN3ZXIvNTM1NTg1MTMw">渲染方案与生成方案<i class="fa fa-external-link-alt"></i></span>需要自己去了解啦。</p>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><blockquote>
<p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p>
</blockquote>
<p>&emsp;&emsp;因为 Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，所以若要在视图更新之后，基于新的视图进行操作，则需要用到 nextTick。</p>
<ul>
<li>使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">testText</span> = <span class="string">&#x27;更新后文本&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;changeDom&quot;</span>).<span class="property">innerHTML</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// &#x27;更新前文本&#x27;</span></span><br><span class="line"><span class="comment">/* ------------------------------ */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">testText</span> = <span class="string">&#x27;更新后文本&#x27;</span>;</span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;changeDom&quot;</span>).<span class="property">innerHTML</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// &#x27;更新后文本&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件的定义使用"><a href="#组件的定义使用" class="headerlink" title="组件的定义使用"></a>组件的定义使用</h3><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个 &lt;vue-demo&gt; 组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;vue-demo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//设置显示模板</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 &lt;vue-demo&gt; 组件</span></span><br><span class="line"><span class="comment">//HTML 文件中引入使用</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">vue-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-demo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">//JS 文件中初始化</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="父子组件的传值方式"><a href="#父子组件的传值方式" class="headerlink" title="父子组件的传值方式"></a>父子组件的传值方式</h3><ul>
<li>props/$emit<ul>
<li>父组件传值给子组件：父组件通过一个属性，将其 data 上的值于该属性进行绑定，子组件通过 props 接受这个属性，就能获取这个属性的值。</li>
<li>子组件传值给父组件：子组件通过实践触发的方式向父组件传值，当子组件的数值发生变化时，向外发射一个事件，然后父组件监听该事件名称，并在父组件的 data中去定义这个函数名的函数体</li>
<li>注册组件</li>
<li>全局组件：所有实例都能使用。</li>
<li>局部组件：只能在实例的选项中使用。</li>
<li>Prop。</li>
<li>Prop 验证：type 可以是原生构造器，也可以是自定义构造器。</li>
<li>自定义事件。</li>
<li>父组件使用 props 传递数据给子组件，子组件将数据传递回去则需要使用到自定义事件。</li>
<li>使用 v-on 绑定自定义事件，每个 Vue 实例都实现了事件接口（Events interface）。</li>
<li>父组件可以在使用子组件的地方直接用 v-on 监听子组件触发的事件。</li>
</ul>
</li>
<li>$children/$parent</li>
<li>provide/inject</li>
<li>$refs</li>
<li>eventBus <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMzYzNjE1Mw==">思否<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC83Mjc3Nzk1MQ==">知乎<i class="fa fa-external-link-alt"></i></span></li>
<li>Vuex</li>
<li>html5Storage</li>
<li>$attrs/$listeners</li>
</ul>
<h2 id="props-methods-data-computed-watch-优先级"><a href="#props-methods-data-computed-watch-优先级" class="headerlink" title="props/methods/data/computed/watch 优先级"></a>props/methods/data/computed/watch 优先级</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 src\core\instance\init.js 源码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initState</span> (<span class="params">vm: Component</span>) &#123;</span><br><span class="line">  vm.<span class="property">_watchers</span> = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.<span class="property">$options</span></span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">props</span>) <span class="title function_">initProps</span>(vm, opts.<span class="property">props</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">methods</span>) <span class="title function_">initMethods</span>(vm, opts.<span class="property">methods</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="title function_">initData</span>(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">observe</span>(vm.<span class="property">_data</span> = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">computed</span>) <span class="title function_">initComputed</span>(vm, opts.<span class="property">computed</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">watch</span> &amp;&amp; opts.<span class="property">watch</span> !== nativeWatch) &#123;</span><br><span class="line">    <span class="title function_">initWatch</span>(vm, opts.<span class="property">watch</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们可以看到优先级是 <code>props &gt; methods &gt; data &gt; computed &gt; watch</code></p>
</blockquote>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><blockquote>
<p>除了默认设置的核心指令（ v-model 和 v-show），Vue 也允许注册自定义指令。</p>
</blockquote>
<h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><table>
<thead>
<tr>
<th align="center">Funtion</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>bind</strong></td>
<td align="left">只调用一次，指令第一次绑定到元素时调用.</td>
</tr>
<tr>
<td align="center"><strong>inserted</strong></td>
<td align="left">被绑定元素插入父节点时调用</td>
</tr>
<tr>
<td align="center"><strong>update</strong></td>
<td align="left">被绑定元素所在的模板更新时调用</td>
</tr>
<tr>
<td align="center"><strong>componentUpdated</strong></td>
<td align="left">被绑定元素所在模板完成一次更新周期时调用</td>
</tr>
<tr>
<td align="center"><strong>unbind</strong></td>
<td align="left">只调用一次，指令与元素解绑时调用。</td>
</tr>
</tbody></table>
<h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><table>
<thead>
<tr>
<th align="center">Parameter</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>el</strong></td>
<td align="left">指令所绑定的元素，可以直接用来操作 DOM。</td>
</tr>
<tr>
<td align="center"><strong>binding</strong></td>
<td align="left">一个对象</td>
</tr>
<tr>
<td align="center"><strong>vnode</strong></td>
<td align="left">Vue 编译生成的虚拟节点</td>
</tr>
<tr>
<td align="center"><strong>oldVnode</strong></td>
<td align="left">上一个虚拟节点，仅在 update 和 componentUpdateed 中可用。</td>
</tr>
</tbody></table>
<h3 id="binding属性"><a href="#binding属性" class="headerlink" title="binding属性"></a>binding属性</h3><table>
<thead>
<tr>
<th align="center">Attribute</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>name</strong></td>
<td align="left">指令名</td>
</tr>
<tr>
<td align="center"><strong>value</strong></td>
<td align="left">指令的绑定值</td>
</tr>
<tr>
<td align="center"><strong>oldValue</strong></td>
<td align="left">指令绑定的前一个值</td>
</tr>
<tr>
<td align="center"><strong>expression</strong></td>
<td align="left">绑定值的表达式或变量名</td>
</tr>
<tr>
<td align="center"><strong>arg</strong></td>
<td align="left">传给指令的参数</td>
</tr>
<tr>
<td align="center"><strong>modifiers</strong></td>
<td align="left">一个包含修饰符的对象</td>
</tr>
</tbody></table>
<h2 id="路由-Route"><a href="#路由-Route" class="headerlink" title="路由(Route)"></a>路由(Route)</h2><blockquote>
<p> router-link 是一个用于设置一个导航链接的组件，实现路由的跳转。</p>
</blockquote>
<h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><table>
<thead>
<tr>
<th align="center">Attribute</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>to</strong></td>
<td align="left">目标路由的链接</td>
</tr>
<tr>
<td align="center"><strong>replace/push</strong></td>
<td align="left">调用 router.replace()，导航后不会留下 history 记录。</td>
</tr>
<tr>
<td align="center"><strong>append</strong></td>
<td align="left">在当前（相对）路径前添加其路径</td>
</tr>
<tr>
<td align="center"><strong>tag</strong></td>
<td align="left">将 <router-link> 渲染成某种标签</router-link></td>
</tr>
<tr>
<td align="center"><strong>active-class</strong></td>
<td align="left">设置链接激活时使用的 CSS 类名</td>
</tr>
<tr>
<td align="center"><strong>exact-active-class</strong></td>
<td align="left">配置当链接被精确匹配的时候应该激活的 class</td>
</tr>
<tr>
<td align="center"><strong>event</strong></td>
<td align="left">声明可以用来除法导航的事件</td>
</tr>
</tbody></table>
<blockquote>
<p>router-view 是一个用于渲染页面的组件，实现指定路由对应组件的渲染，相当于一个占位的作用，配合 router-link 使用</p>
</blockquote>
<h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;@/views/a.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">&#x27;@/views/b.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> C <span class="keyword">from</span> <span class="string">&#x27;@/views/c.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/a&#x27;</span>) <span class="comment">//可去后缀//其他：require(&#x27;./views/index&#x27;).default</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: A,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requireAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/b&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: B</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/c&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: C</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Login.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;register&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Register&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requireGuest</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/helper&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;login.helper&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Helper&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requireGuest</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Error&#x27;</span>) <span class="comment">//命名规范最好大写，驼峰。</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;hash&#x27;</span>, <span class="comment">//history</span></span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VueRouterPush</span> = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>;</span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">to</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">VueRouterPush</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, to).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requireAuth</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">from</span>.<span class="property">meta</span>.<span class="property">requireGuest</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">html</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">body</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-enter</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-leave-to</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-enter-active</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-leave-active</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transition</span>: opacity <span class="number">0.15s</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="comment">/* 此处过渡与动画效果参考后文 */</span></span><br></pre></td></tr></table></figure>

<h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><blockquote>
<p>模板调用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;name: &#x27;home&#x27;&#125;&quot;</span>&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path: &#x27;/home&#x27;&#125;&quot;&gt; // name,path 都行，建议用 name。</span><br><span class="line">// 注意：router-link 中链接如果是 &#x27;/&#x27; 开始就是从根路由开始，如果开始不带&#x27;/&#x27;，则从当前路由开始。</span><br><span class="line"></span><br><span class="line">// 带参数</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;, params: &#123;id: 99&#125;&#125;&quot;&gt;</span><br><span class="line">// params 传参数 (类似 post)</span><br><span class="line">// 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot;</span><br><span class="line">// 不配置 path，第一次可请求，刷新页面 id 会消失。</span><br><span class="line">// 配置 path，刷新页面 id 会保留。</span><br><span class="line">// html 取参 $route.params.id</span><br><span class="line">// script 取参 this.$route.params.id</span><br><span class="line"></span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;, query: &#123;id: 99&#125;&#125;&quot;&gt;</span><br><span class="line">// query 传参数 (类似 get,url 后面会显示参数)</span><br><span class="line">// 路由可不配置</span><br><span class="line">// html 取参 $route.query.id</span><br><span class="line">// script 取参 this.$route.query.id</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数调用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// query传参 </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,<span class="attr">query</span>: &#123;<span class="attr">id</span>: <span class="number">99</span>&#125;&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">query</span>: &#123;<span class="attr">id</span>: <span class="number">99</span>&#125;&#125;);</span><br><span class="line"><span class="comment">// query 传参数 (类似 get,url 后面会显示参数)</span></span><br><span class="line"><span class="comment">// 路由可不配置</span></span><br><span class="line"><span class="comment">// html 取参 $route.query.id</span></span><br><span class="line"><span class="comment">// script 取参 this.$route.query.id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// params传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,<span class="attr">params</span>: &#123;<span class="attr">id</span>: <span class="number">99</span>&#125;&#125;); <span class="comment">// 只能用 name</span></span><br><span class="line"><span class="comment">// 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot;</span></span><br><span class="line"><span class="comment">// 不配置 path，第一次可请求，刷新页面 id 会消失。</span></span><br><span class="line"><span class="comment">// 配置 path，刷新页面 id 会保留。</span></span><br><span class="line"><span class="comment">// html 取参 $route.params.id</span></span><br><span class="line"><span class="comment">// script 取参 this.$route.params.id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// query 和 params 区别</span></span><br><span class="line">query 类似 get，跳转之后页面 url 后面会拼接参数，例如 ?id=<span class="number">1</span>，非重要性数据的可以这样传，刷新后数据还在，密码之类还是用 params。</span><br><span class="line">params 类似 post，跳转之后页面 url 后面不会拼接参数，但是刷新后数据消失。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他方法，用法同上 push。</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(n); <span class="comment">// -1 为退回上一页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别</span></span><br><span class="line">push：跳转到指定 url 路径，并向 history 栈中添加一个记录，点击后退会返回到上一个页面。</span><br><span class="line">replace：跳转到指定 url 路径，但是 history 栈中不会有记录，点击返回会跳转到上上个页面(就是直接替换了当前页面)。</span><br><span class="line">go：向前或者向后跳转 n 个页面，n 可为正整数或负整数。</span><br></pre></td></tr></table></figure>

<h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;nameoftransition&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 定义进入前与离开后状态</span><br><span class="line">.nameoftransition-enter, .nameoftransition-leave-to &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">// 定义离开前与进入后状态</span><br><span class="line">.nameoftransition-leave, .nameoftransition-enter-to &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">// 定义进出过程</span><br><span class="line">.nameoftransition-enter-active, .nameoftransition-leave-active &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="切换类"><a href="#切换类" class="headerlink" title="切换类"></a>切换类</h3><table>
<thead>
<tr>
<th align="center">Class</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>v-enter</strong></td>
<td align="left">定义进入过渡的开始状态</td>
</tr>
<tr>
<td align="center"><strong>v-enter-active</strong></td>
<td align="left">定义进入过渡生效时的状态</td>
</tr>
<tr>
<td align="center"><strong>v-enter-to</strong></td>
<td align="left">定义进入过渡的结束状态</td>
</tr>
<tr>
<td align="center"><strong>v-leave</strong></td>
<td align="left">定义离开过渡的开始状态</td>
</tr>
<tr>
<td align="center"><strong>v-leave-active</strong></td>
<td align="left">定义离开过渡生效时的状态</td>
</tr>
<tr>
<td align="center"><strong>v-leave-to</strong></td>
<td align="left">定义离开过渡的结束状态</td>
</tr>
</tbody></table>
<h3 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h3><ul>
<li>enter-class</li>
<li>enter-active-class</li>
<li>enter-to-class (2.1.8+)</li>
<li>leave-class</li>
<li>leave-active-class</li>
<li>leave-to-class (2.1.8+)</li>
</ul>
<h3 id="同时使用过渡和动画"><a href="#同时使用过渡和动画" class="headerlink" title="同时使用过渡和动画"></a>同时使用过渡和动画</h3><ul>
<li>必须设置相应的时间监听器来知道过渡的完成</li>
<li>监听器可以是 transitionend 或 animationend</li>
<li>同时设置两种过渡效果时，需使用 type 特性设置 animation 或 transition 来明确声明需要监听的类型</li>
</ul>
<h2 id="全局状态管理-Vuex"><a href="#全局状态管理-Vuex" class="headerlink" title="全局状态管理(Vuex)"></a>全局状态管理(Vuex)</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="comment">//相当于Vuex中的data，使用：</span></span><br><span class="line">  <span class="comment">//this.store.state.test;</span></span><br><span class="line">  <span class="attr">test</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">//相当于vuex中的数据处理methods，只能处理同步事件，异步操作使用actions配合进行。</span></span><br><span class="line">  <span class="comment">//也可以同模组管理一样，统一使用mutations_type管理Mutations。[import * as types from &#x27;@/mutation-type&#x27;;]</span></span><br><span class="line">  <span class="comment">//使用即可type.MUTATIONS_TYPE。</span></span><br><span class="line">  <span class="comment">//使用：</span></span><br><span class="line">  <span class="comment">// this.store.commit(&#x27;MUTATIONS_TYPE&#x27;,&#x27;hello world&#x27;);</span></span><br><span class="line">  <span class="comment">// this.store.commit(&#123;</span></span><br><span class="line">  <span class="comment">//   type: &#x27;MUTATIONS_TYPE&#x27;,</span></span><br><span class="line">  <span class="comment">//   payload: &#x27;hello world&#x27;//推荐写成对象</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  [<span class="string">&#x27;MUTATIONS_TYPE&#x27;</span>](state, payload) &#123;</span><br><span class="line">    <span class="comment">//也可以不写成常量，自己定义成普通方法。</span></span><br><span class="line">    state.<span class="property">test</span> = payload;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">//Action 提交的是 mutation，而不是直接变更状态。</span></span><br><span class="line">  <span class="comment">//Action 可以包含任意异步操作。使用：</span></span><br><span class="line">  <span class="comment">// this.store.dispatch(&#x27;actionsName&#x27;, &#123;...&#125;);</span></span><br><span class="line">  <span class="comment">// this.store.dispatch(&#123;</span></span><br><span class="line">  <span class="comment">//   type: &#x27;actionsName&#x27;,</span></span><br><span class="line">  <span class="comment">//   payload: &#123;...&#125;</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">actionsName</span>(<span class="params">store, payload = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; commit, dispatch, state, rootState, rootGetters &#125; = store; <span class="comment">//也可直接写到方法参数中解构赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rootGetters[<span class="string">&#x27;others/get&#x27;</span>]); <span class="comment">// 打印其他模块的 getters</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: &#123; code, data &#125;</span><br><span class="line">      &#125; = <span class="keyword">await</span> api.<span class="title function_">post</span>(<span class="string">&#x27;api/example&#x27;</span>, payload);</span><br><span class="line">      <span class="keyword">if</span> (code === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;MUTATIONS_TYPE&#x27;</span>, data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">//相当于vuex中的computed，使用：</span></span><br><span class="line">  <span class="comment">//this.store.getters.testMore;</span></span><br><span class="line">  <span class="title function_">testMore</span>(<span class="params">state, getters, rootState, rootGetters</span>) &#123;</span><br><span class="line">    <span class="comment">//使用namespaced后，通过rootState可获取其他模块state等数据。</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">test</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="模块化示例"><a href="#模块化示例" class="headerlink" title="模块化示例"></a>模块化示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参考 [https://gitee.com/doubleam/biugle/tree/main/resources/js/store]</span></span><br><span class="line"><span class="comment">//modules更多使用请参考 [https://vuex.vuejs.org/zh/guide/modules.html]</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"><span class="comment">//也可通过引入js文件的方式，独立此文件为index.js/建立同级文件夹modules管理模块/统一一个mutation_type管理Mutations</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,<span class="comment">//访问与引入不同模块需加上命名空间 state.moduleA / [actions](&#x27;moduleA/xxx&#x27;)</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">moduleA</span>: moduleA,</span><br><span class="line">    <span class="attr">moduleB</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="引入与使用"><a href="#引入与使用" class="headerlink" title="引入与使用"></a>引入与使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">b</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]),</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line">      <span class="attr">add</span>: <span class="string">&#x27;mutationsType&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.store.commit(&#x27;mutationsType&#x27;)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="main-模板"><a href="#main-模板" class="headerlink" title="main 模板"></a>main 模板</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store.js&#x27;</span>; <span class="comment">// js 可省略</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/css/reset.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span>; <span class="comment">// lang i18n</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>, &#123; locale &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = <span class="title class_">Axios</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">debug</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">devtools</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#main-container&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="basic-vue-模板"><a href="#basic-vue-模板" class="headerlink" title="basic.vue 模板"></a>basic.vue 模板</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;HelloBiugle&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">xxx</span>: xxx</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">firstMsg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// getter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&#x27;first msg is&#x27;</span> + <span class="variable language_">this</span>.<span class="property">msg</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// setter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">msg</span> = newValue;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">msg</span>(<span class="params">newMsg, oldMsg</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">msg</span> = newMsg + <span class="string">&#x27;=&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">oldMsg</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3><ul>
<li>自定义指令</li>
<li>更多传值方式(前面提到未[举栗子])</li>
<li>混入</li>
<li>插槽</li>
<li>路由钩子与鉴权机制实现</li>
<li>SSR</li>
<li>Vue-cli</li>
</ul>
<blockquote>
<p>篇幅有限，这些需自己深入了解啦。</p>
</blockquote>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>BootStrap基础知识</title>
    <url>/bootstrap/</url>
    <content><![CDATA[<div class="note info no-icon"><p>2019年实习时的 BootStrap(4.x)基础知识 备份<br>BootStrap5六角学院文档： <span class="exturl" data-url="aHR0cHM6Ly9ib290c3RyYXA1LmhleHNjaG9vbC5jb20vZG9jcy81LjAvZ2V0dGluZy1zdGFydGVkL2ludHJvZHVjdGlvbi8=">HexSchool<i class="fa fa-external-link-alt"></i></span><br>顺便推荐一个程序员段子网站 <span class="exturl" data-url="aHR0cDovL3d3dy50ZWNodWcuY29tLw==">techug.com<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span>

<h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><h3 id="栅格类"><a href="#栅格类" class="headerlink" title="栅格类"></a>栅格类</h3><ul>
<li>例：<code>&lt;div class=&quot;col-5&quot;&gt;&lt;/div&gt;</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">适用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.col-*</code></td>
<td align="center">针对所有设备</td>
</tr>
<tr>
<td align="center"><code>.col-sm-*</code></td>
<td align="center">平板 - 荧幕宽度等于或大于 576px</td>
</tr>
<tr>
<td align="center"><code>.col-md-*</code></td>
<td align="center">桌面显示器 - 荧幕宽度等于或大于 768px</td>
</tr>
<tr>
<td align="center"><code>.col-lg-*</code></td>
<td align="center">大桌面显示器 - 荧幕宽度等于或大于 992px</td>
</tr>
<tr>
<td align="center"><code>.col-xl-*</code></td>
<td align="center">超大桌面显示器 - 荧幕宽度等于或大于 1200px</td>
</tr>
</tbody></table>
<h3 id="栅格规则"><a href="#栅格规则" class="headerlink" title="栅格规则"></a>栅格规则</h3><ol>
<li>栅格每一行需要放在设置了 <code>.container 或 .container-fluid </code>类的容器中，这样就可以自动设置一些外边距与内边距。</li>
<li>使用行来创建水平的列组。</li>
<li>内容需要放置在列中，并且只有列可以是行的直接子节点。</li>
<li>预定义的类如 <code>.row</code> 和 <code>.col-*</code> 可用于快速制作栅格布局。</li>
<li>列通过填充创建列内容之间的间隙。 这个间隙是通过 <code>.row</code> 类上的负边距设置第一行和最后一列的偏移。</li>
<li>栅格列是通过跨越指定的 <strong>12</strong> 个列来创建。 例如，设置三个相等的列，需要使用用三个<code>.col-4</code> 来设置。</li>
</ol>
<h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-flex bg-secondary text-white&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-2 bg-info&quot;</span>&gt;</span>Flex item A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-2 bg-warning&quot;</span>&gt;</span>Flex item B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-2 bg-primary&quot;</span>&gt;</span>Flex item C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><code>d-flex</code> 类创建一个弹性盒子容器</li>
<li><code>d-inline-flex</code> 创建显示在同一行上的弹性盒子容器可以使用 </li>
<li><code>flex-row</code> 可以设置弹性子元素水平显示(预设)</li>
<li><code>flex-row-reverse</code> 类用于设置右对齐显示，即与 <code>.flex-row</code> 方向相反。</li>
<li><code>flex-column</code> 类用于设置弹性子元素垂直方向显示</li>
<li><code>flex-column-reverse</code> 用于翻转子元素</li>
<li><code>justify-content-*</code> 类用于修改弹性子元素的排列方式，<code>*</code> 号允许的值有：<code>start (默认), end, center, between 或 around</code>。</li>
<li><code>flex-fill</code> 类强制设置各个弹性子元素的宽度是一样的</li>
<li><code>flex-grow-1</code> 用于设置子元素使用剩下的空间，以下实例中前面两个子元素只设置了它们所需要的空间，最后一个获取剩余空间。</li>
<li><code>flex-shrink-1</code> 用于设置子元素的收缩规则</li>
<li><code>order</code> 类可以设置弹性子元素的排序，从 <code>.order-1 到 .order-12</code>，数字越低权重越高( <code>.order-1</code> 排在 <code>.order-2</code> 之前)，若要在最前面或者最后面使用 <code>.order-first/.order-last</code>。</li>
<li><code>mr-auto</code> 类可以设置子元素右外边距为 <code>auto=margin-right: auto!important;</code></li>
<li><code>ml-auto</code> 类可以设置子元素左外边距为 <code>auto=margin-left: auto!important;</code></li>
<li>弹性容器中包裹子元素可以使用以下三个类：<code>.flex-nowrap (默认), .flex-wrap 或 .flex-wrap-reverse</code>。设置 flex 容器是单行或者多行。</li>
<li><code>align-items-*</code> 设置单行的子元素对齐。<code>*</code>包含的值有：<code>.align-items-start, .align-items-end, .align-items-center, .align-items-baseline, 和 .align-items-stretch (默认)</code>。</li>
<li><code>align-self-*</code> 设置指定子元素对齐对齐。<code>*</code>包含的值有：<code>.align-self-start, .align-self-end, .align-self-center, .align-self-baseline, 和 .align-self-stretch (默认)</code>。</li>
</ul>
<h3 id="Flex类作用介绍"><a href="#Flex类作用介绍" class="headerlink" title="Flex类作用介绍"></a>Flex类作用介绍</h3><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>d-*-flex</code></td>
<td align="left">根据不同的荧幕设备创建弹性盒子容器</td>
</tr>
<tr>
<td align="center"><code>d-*-inline-flex</code></td>
<td align="left">根据不同的荧幕设备创建行内弹性盒子容器</td>
</tr>
<tr>
<td align="center"><code>flex-*-row</code></td>
<td align="left">根据不同的荧幕设备在水平方向显示弹性子元素</td>
</tr>
<tr>
<td align="center"><code>flex-*-row-reverse</code></td>
<td align="left">根据不同的荧幕设备在水平方向显示弹性子元素且右对齐</td>
</tr>
<tr>
<td align="center"><code>flex-*-column</code></td>
<td align="left">根据不同的荧幕设备在垂直方向显示弹性子元素</td>
</tr>
<tr>
<td align="center"><code>flex-*-column-reverse</code></td>
<td align="left">根据不同的荧幕设备在垂直方向显示弹性子元素且方向相反</td>
</tr>
<tr>
<td align="center"><code>justify-content-*-start</code></td>
<td align="left">根据不同荧幕设备在开始位置显示弹性子元素 (左对齐)</td>
</tr>
<tr>
<td align="center"><code>justify-content-*-end</code></td>
<td align="left">根据不同荧幕设备在尾部显示弹性子元素 (右对齐)</td>
</tr>
<tr>
<td align="center"><code>justify-content-*-center</code></td>
<td align="left">根据不同荧幕设备在 flex 容器中居中显示子元素</td>
</tr>
<tr>
<td align="center"><code>justify-content-*-between</code></td>
<td align="left">根据不同荧幕设备使用 “between” 显示弹性子元素</td>
</tr>
<tr>
<td align="center"><code>justify-content-*-around</code></td>
<td align="left">根据不同荧幕设备使用 “around” 显示弹性子元素</td>
</tr>
<tr>
<td align="center"><code>flex-*-fill</code></td>
<td align="left">根据不同的荧幕设备强制等宽</td>
</tr>
<tr>
<td align="center"><code>flex-*-grow-0</code></td>
<td align="left">不同的荧幕设备不设置扩展</td>
</tr>
<tr>
<td align="center"><code>flex-*-grow-1</code></td>
<td align="left">不同的荧幕设备设置扩展</td>
</tr>
<tr>
<td align="center"><code>flex-*-shrink-0</code></td>
<td align="left">不同的荧幕设备不设置收缩</td>
</tr>
<tr>
<td align="center"><code>flex-*-shrink-1</code></td>
<td align="left">不同的荧幕设备设置收缩</td>
</tr>
<tr>
<td align="center"><code>flex-*-nowrap</code></td>
<td align="left">不同的荧幕设备不设置包裹元素</td>
</tr>
<tr>
<td align="center"><code>flex-*-nowrap</code></td>
<td align="left">不同的荧幕设备不设置包裹元素</td>
</tr>
<tr>
<td align="center"><code>flex-*-wrap</code></td>
<td align="left">不同的荧幕设备设置包裹元素</td>
</tr>
<tr>
<td align="center"><code>flex-*-wrap-reverse</code></td>
<td align="left">不同的荧幕设备反转包裹元素</td>
</tr>
<tr>
<td align="center"><code>align-content-*-start</code></td>
<td align="left">根据不同荧幕设备在起始位置堆叠元素</td>
</tr>
<tr>
<td align="center"><code>align-content-*-end</code></td>
<td align="left">根据不同荧幕设备在结束位置堆叠元素</td>
</tr>
<tr>
<td align="center"><code>align-content-*-center</code></td>
<td align="left">根据不同荧幕设备在中间位置堆叠元素</td>
</tr>
<tr>
<td align="center"><code>align-content-*-around</code></td>
<td align="left">根据不同荧幕设备，使用 “around” 堆叠元素。</td>
</tr>
<tr>
<td align="center"><code>align-content-*-stretch</code></td>
<td align="left">根据不同荧幕设备，通过伸展元素来堆叠。</td>
</tr>
<tr>
<td align="center"><code>align-items-*-start</code></td>
<td align="left">根据不同荧幕设备，让元素在头部显示在同一行。</td>
</tr>
<tr>
<td align="center"><code>align-items-*-end</code></td>
<td align="left">根据不同荧幕设备，让元素在尾部显示在同一行。</td>
</tr>
<tr>
<td align="center"><code>align-items-*-center</code></td>
<td align="left">根据不同荧幕设备，让元素在中间位置显示在同一行。</td>
</tr>
<tr>
<td align="center"><code>align-items-*-baseline</code></td>
<td align="left">根据不同荧幕设备，让元素在基线上显示在同一行。</td>
</tr>
<tr>
<td align="center"><code>align-items-*-stretch</code></td>
<td align="left">根据不同荧幕设备，让元素延展高度并显示在同一行。</td>
</tr>
</tbody></table>
<h2 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-1&quot;</span>&gt;</span>标题可以输出更大更粗的字体样式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font-weight-bold&quot;</span>&gt;</span>加粗文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span>右对齐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="默认设置"><a href="#默认设置" class="headerlink" title="默认设置"></a>默认设置</h3><ul>
<li>Bootstrap(4.x) 默认的 <code>font-size 为 16px, line-height 为 1.5</code>。</li>
<li>默认的 <code>font-family</code> 为 <code>&quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif</code>。</li>
<li>此外，所有的 <code>&lt;p&gt;</code> 元素 <code>margin-top: 0 、 margin-bottom: 1rem (16px)</code>。</li>
</ul>
<h2 id="标签及类名"><a href="#标签及类名" class="headerlink" title="标签及类名"></a>标签及类名</h2><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">类名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>h1</strong></td>
<td align="center">/</td>
<td align="left">1级标题<code>(2.5rem = 40px)</code></td>
</tr>
<tr>
<td align="center"><strong>h2</strong></td>
<td align="center">/</td>
<td align="left">2级标题<code>(2rem = 32px)</code></td>
</tr>
<tr>
<td align="center"><strong>h3</strong></td>
<td align="center">/</td>
<td align="left">3级标题<code>(1.75rem = 28px)</code></td>
</tr>
<tr>
<td align="center"><strong>h4</strong></td>
<td align="center">/</td>
<td align="left">4级标题<code>(1.5rem = 24px)</code></td>
</tr>
<tr>
<td align="center"><strong>h5</strong></td>
<td align="center">/</td>
<td align="left">5级标题<code>(1.25rem = 20px)</code></td>
</tr>
<tr>
<td align="center"><strong>h6</strong></td>
<td align="center">/</td>
<td align="left">6级标题<code>(1rem = 16px)</code></td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.display-1</strong></td>
<td align="left">使用在h1-h6标签使标题字体更大更粗</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.display-2</strong></td>
<td align="left">使用在h1-h6标签使标题字体更大更粗</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.display-3</strong></td>
<td align="left">使用在h1-h6标签使标题字体更大更粗</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.display-4</strong></td>
<td align="left">使用在h1-h6标签使标题字体更大更粗</td>
</tr>
<tr>
<td align="center"><strong>small</strong></td>
<td align="center">/</td>
<td align="left">创建字体更小颜色更淡的字体</td>
</tr>
<tr>
<td align="center"><strong>mark</strong></td>
<td align="center">/</td>
<td align="left">用来高亮字体</td>
</tr>
<tr>
<td align="center"><strong>abbr</strong></td>
<td align="center">/</td>
<td align="left">用来使引用更加明显</td>
</tr>
<tr>
<td align="center"><strong>dl/dt/dd</strong></td>
<td align="center">/</td>
<td align="left">创建不同样式的列表</td>
</tr>
<tr>
<td align="center"><strong>code</strong></td>
<td align="center">/</td>
<td align="left">创建代码块</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.font-weight-bold</strong></td>
<td align="left">加粗文本</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.font-weight-normal</strong></td>
<td align="left">普通文本</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.font-weight-light</strong></td>
<td align="left">更细的文本</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.font-italic</strong></td>
<td align="left">斜体文本</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.lead</strong></td>
<td align="left">让段落更突出</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.small</strong></td>
<td align="left">指定更小文本 (为父元素的 85% )</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-left</strong></td>
<td align="left">左对齐</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-center</strong></td>
<td align="left">居中</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-right</strong></td>
<td align="left">右对齐</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-justify</strong></td>
<td align="left">设定文本对齐，段落中超出荧幕部分文字自动换行。</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-nowrap</strong></td>
<td align="left">段落中超出荧幕部分不换行</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-lowercase</strong></td>
<td align="left">设定文本小写</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.text-capitalize</strong></td>
<td align="left">设定单词首字母大写</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.initialism</strong></td>
<td align="left">显示在 <code>&lt;abbr&gt;</code> 元素中的文本以小号字体展示，且可以将小写字母转换为大写字母。</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.list-unstyled</strong></td>
<td align="left">移除预设的清单样式，清单项中左对齐 ( <code>&lt;ul&gt;</code> 和 <code>&lt;ol&gt;</code> 中)。 <br> 这个类仅适用于直接子列表项 (如果需要移除嵌套的清单项，你需要在嵌套的清单中使用该样式)</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.list-inline</strong></td>
<td align="left">将所有列表项放置同一行</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><strong>.pre-scrollable</strong></td>
<td align="left">使 <code>&lt;pre&gt;</code> 元素可滚动，代码块区域最大高度为<code>340px</code>，一旦超出这个高度，就会在Y轴出现卷轴。</td>
</tr>
</tbody></table>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>执行成功的文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>警告链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-dark text-white&quot;</span>&gt;</span>深灰背景颜色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h3><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>text-muted</code></td>
<td align="center">柔和的文本</td>
</tr>
<tr>
<td align="center"><code>text-primary</code></td>
<td align="center">重要的文本</td>
</tr>
<tr>
<td align="center"><code>text-success</code></td>
<td align="center">执行成功的文本</td>
</tr>
<tr>
<td align="center"><code>text-info</code></td>
<td align="center">代表一些提示信息的文本</td>
</tr>
<tr>
<td align="center"><code>text-warning</code></td>
<td align="center">警告文本</td>
</tr>
<tr>
<td align="center"><code>text-danger</code></td>
<td align="center">危险操作文本</td>
</tr>
<tr>
<td align="center"><code>text-secondary</code></td>
<td align="center">副标题</td>
</tr>
<tr>
<td align="center"><code>text-dark</code></td>
<td align="center">深灰色文字</td>
</tr>
<tr>
<td align="center"><code>text-light</code></td>
<td align="center">浅灰色文本(白色背景上看不清楚)</td>
</tr>
<tr>
<td align="center"><code>text-white</code></td>
<td align="center">白色文本(白色背景上看不清楚)</td>
</tr>
</tbody></table>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>bg-primary</code></td>
<td align="center">重要的背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-success</code></td>
<td align="center">执行成功背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-info</code></td>
<td align="center">信息提示背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-warning</code></td>
<td align="center">警告背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-danger</code></td>
<td align="center">危险背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-secondary</code></td>
<td align="center">副标题背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-dark</code></td>
<td align="center">深灰背景颜色</td>
</tr>
<tr>
<td align="center"><code>bg-light</code></td>
<td align="center">浅灰背景颜色</td>
</tr>
</tbody></table>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-dark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>table</code></td>
<td align="center">基础表格</td>
</tr>
<tr>
<td align="center"><code>table-striped</code></td>
<td align="center">条纹表格</td>
</tr>
<tr>
<td align="center"><code>table-bordered</code></td>
<td align="center">带边框表格</td>
</tr>
<tr>
<td align="center"><code>table-hover</code></td>
<td align="center">鼠标悬停状态表格</td>
</tr>
<tr>
<td align="center"><code>table-dark</code></td>
<td align="center">黑色背景表格</td>
</tr>
</tbody></table>
<h3 id="颜色类"><a href="#颜色类" class="headerlink" title="颜色类"></a>颜色类</h3><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>table-primary</code></td>
<td align="center">蓝色: 指定这是一个重要的操作</td>
</tr>
<tr>
<td align="center"><code>table-success</code></td>
<td align="center">绿色: 指定这是一个允许执行的操作</td>
</tr>
<tr>
<td align="center"><code>table-danger</code></td>
<td align="center">红色: 指定这是可以危险的操作</td>
</tr>
<tr>
<td align="center"><code>table-info</code></td>
<td align="center">浅蓝色: 表示内容已变更</td>
</tr>
<tr>
<td align="center"><code>table-warning</code></td>
<td align="center">橘色: 表示需要注意的操作</td>
</tr>
<tr>
<td align="center"><code>table-active</code></td>
<td align="center">灰色: 用于鼠标悬停效果</td>
</tr>
<tr>
<td align="center"><code>table-secondary</code></td>
<td align="center">灰色: 表示内容不怎么重要</td>
</tr>
<tr>
<td align="center"><code>table-light</code></td>
<td align="center">浅灰色，可以是表格行的背景</td>
</tr>
<tr>
<td align="center"><code>table-dark</code></td>
<td align="center">可以是表格行的背景</td>
</tr>
</tbody></table>
<h3 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h3><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>thead-inverse</code></td>
<td align="left">给表头添加黑色背景</td>
</tr>
<tr>
<td align="center"><code>thead-default</code></td>
<td align="left">给表头添加灰色背景</td>
</tr>
<tr>
<td align="center"><code>table-sm</code></td>
<td align="left">通过减少内边距来设置较小的表格</td>
</tr>
<tr>
<td align="center"><code>table-responsive</code></td>
<td align="left">创建回应式表格：在荧幕宽度 <code>小于 992px</code> 时会创建水平卷轴， <br> 如果可视区域宽度 <code>大于 992px</code> 则显示不同效果(没有卷轴)。</td>
</tr>
<tr>
<td align="center"><code>table-responsive-sm</code></td>
<td align="left"><code>&lt; 576px</code>荧幕宽度下显示卷轴</td>
</tr>
<tr>
<td align="center"><code>table-responsive-md</code></td>
<td align="left"><code>&lt; 768px</code>荧幕宽度下显示卷轴</td>
</tr>
<tr>
<td align="center"><code>table-responsive-lg</code></td>
<td align="left"><code>&lt; 992px</code>荧幕宽度下显示卷轴</td>
</tr>
<tr>
<td align="center"><code>table-responsive-xl</code></td>
<td align="left"><code>&lt; 1200px</code>荧幕宽度下显示卷轴</td>
</tr>
</tbody></table>
<h2 id="图像形状"><a href="#图像形状" class="headerlink" title="图像形状"></a>图像形状</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;test.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;rounded&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Cinque Terre&quot;</span>&gt;</span>//圆角</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;test.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Cinque Terre&quot;</span>&gt;</span>//缩略图</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>rounded</code></td>
<td align="center">让图片显示圆角效果</td>
</tr>
<tr>
<td align="center"><code>rounded-circle</code></td>
<td align="center">设置椭圆形图片</td>
</tr>
<tr>
<td align="center"><code>img-thumbnail</code></td>
<td align="center">设置图片缩略图(图片有边框)</td>
</tr>
<tr>
<td align="center"><code>float-right</code></td>
<td align="center">设置图片右对齐</td>
</tr>
<tr>
<td align="center"><code>float-left</code></td>
<td align="center">设置图片左对齐</td>
</tr>
<tr>
<td align="center"><code>img-fluid</code></td>
<td align="center">设置回应式图片</td>
</tr>
</tbody></table>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="霸屏-Jumbotron"><a href="#霸屏-Jumbotron" class="headerlink" title="霸屏(Jumbotron)"></a>霸屏(Jumbotron)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>内容A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容内容内容内容内容内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Jumbotron(霸屏)会创建一个大的灰色背景框，里面可以设置一些特殊的内容和信息。</li>
<li>Jumbotron 里头可以放一些 HTML标签，也可以是 Bootstrap 的元素。</li>
<li>可以通过在 <code>&lt;div&gt;</code> 元素 中添加 <code>.jumbotron</code> 类来创建 jumbotron。</li>
<li>如果想创建一个没有圆角的全荧幕，可以在 <code>.jumbotron-fluid</code> 类里头的 div添加 <code>.container 或 .container-fluid</code> 类来实现。</li>
</ul>
<h3 id="信息提示框-Alert"><a href="#信息提示框-Alert" class="headerlink" title="信息提示框(Alert)"></a>信息提示框(Alert)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-success alert-dismissible&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>成功!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>提示框可以使用 .alert 类, 后面加上 <code>.alert-success, .alert-info, .alert-warning, .alert-danger, .alert-primary, .alert-secondary, .alert-light 或 .alert-dark</code> 类来实现。</li>
<li>提示框中在链接的标签上添加 <code>alert-link</code> 类来设置匹配提示框颜色的链接</li>
<li>可以在提示框中的 div 中添加 <code>.alert-dismissible</code> 类，然后在关闭按钮的链接上添加 <code>class=&quot;close&quot;</code> 和 <code>data-dismiss=&quot;alert&quot;</code> 类来设置提示框的关闭操作。</li>
<li>提示: <code>&amp;times; (×)</code> 是 HTML 实体字符，来表示关闭操作，而不是字母 “x”。</li>
<li>提示框可以设置淡入淡出动画，各个版本使用参考官方文档。</li>
</ul>
<h3 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮(Button)"></a>按钮(Button)</h3><h4 id="基础按钮"><a href="#基础按钮" class="headerlink" title="基础按钮"></a>基础按钮</h4><blockquote>
<p>btn类为基本按钮，一般是与其他类联合使用。</p>
</blockquote>
<ul>
<li>例：</li>
</ul>
<p><code>&lt;button class=&quot;btn btn-primary&quot;&gt;xxx&lt;/button&gt;</code></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>btn</code></td>
<td align="center">基本按钮</td>
</tr>
<tr>
<td align="center"><code>btn-primary</code></td>
<td align="center">主要按钮</td>
</tr>
<tr>
<td align="center"><code>btn-secondary</code></td>
<td align="center">次要按钮</td>
</tr>
<tr>
<td align="center"><code>btn-success</code></td>
<td align="center">成功</td>
</tr>
<tr>
<td align="center"><code>btn-info</code></td>
<td align="center">信息</td>
</tr>
<tr>
<td align="center"><code>btn-warning</code></td>
<td align="center">警告</td>
</tr>
<tr>
<td align="center"><code>btn-danger</code></td>
<td align="center">危险</td>
</tr>
<tr>
<td align="center"><code>btn-dark</code></td>
<td align="center">黑色</td>
</tr>
<tr>
<td align="center"><code>btn-light</code></td>
<td align="center">浅色</td>
</tr>
<tr>
<td align="center"><code>btn-link</code></td>
<td align="center">链接</td>
</tr>
<tr>
<td align="center"><code>btn-lg</code></td>
<td align="center">大号按钮</td>
</tr>
<tr>
<td align="center"><code>btn-sm</code></td>
<td align="center">小号按钮</td>
</tr>
<tr>
<td align="center"><code>btn-block</code></td>
<td align="center">块级按钮</td>
</tr>
<tr>
<td align="center"><code>active</code></td>
<td align="center">设置按钮是可用的</td>
</tr>
<tr>
<td align="center"><code>disabled</code></td>
<td align="center">设置按钮是不可点击的(注意 <code>&lt;a&gt;</code> 元素不支援 disabled 属性，<br> 你可以通过添加 <code>.disabled</code> 类来禁止链接的点击)</td>
</tr>
</tbody></table>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>按钮类可用于 <code>&lt;a&gt;, &lt;button&gt;, 或 &lt;input&gt;</code> 元素上</li>
<li>可在<code>btn-primary</code>类名内插入<code>outline</code>为按钮设置边框比如：<code>btn-outline-primary</code>。</li>
</ul>
<h4 id="按钮组-Button-group"><a href="#按钮组-Button-group" class="headerlink" title="按钮组(Button-group)"></a>按钮组(Button-group)</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-dark&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以在 <code>&lt;div&gt;</code> 元素上添加 <code>.btn-group</code> 类来创建按钮组。通过添加 <code>.table-striped</code> 类，将在 <code>&lt;tbody&gt;</code> 内的行上看到条纹&gt;</li>
<li>可以使用 <code>.btn-group-lg | sm</code> 类来设置按钮组的大小</li>
<li>可以使用 <code>.btn-group-vertical</code> 类来创建垂直的按钮组</li>
</ul>
<h3 id="进度条-Progress"><a href="#进度条-Progress" class="headerlink" title="进度条(Progress)"></a>进度条(Progress)</h3><h4 id="创建一个基本的进度条的步骤"><a href="#创建一个基本的进度条的步骤" class="headerlink" title="创建一个基本的进度条的步骤"></a>创建一个基本的进度条的步骤</h4><ul>
<li>添加一个带有 <code>.progress</code> 类的 <code>&lt;div&gt;</code></li>
<li>接着，在上面的 <code>&lt;div&gt;</code> 内，添加一个带有 class .progress-bar 的空的 <code>&lt;div&gt;</code>。</li>
<li>添加一个带有百分比表示的宽度的 style 属性，例如 style=”width:70%” 表示进度条在 70% 的位置。</li>
</ul>
<h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:70%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进度条高度预设为 <code>16px</code>。我们可以使用 CSS 的 height 属性来修改他</li>
<li>可以在进度条内添加文本，如进度的百分比</li>
<li>默认情况下进度条为蓝色，可以使用：<code>bg-success、bg-info、bg-warning、bg-danger</code>类调整进度条颜色</li>
<li>可以使用 <code>.progress-bar-striped</code> 类来设置条纹进度条</li>
<li>使用 <code>.progress-bar-animated</code> 类可以为进度条添加动画</li>
</ul>
<h3 id="分页-Pagination"><a href="#分页-Pagination" class="headerlink" title="分页(Pagination)"></a>分页(Pagination)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在ul标签使用 <code>pagination</code> 类，并在其下的 <code>li</code> 标签内使用 <code>page-item</code> 类创建分页</li>
<li>当前页可以使用 <code>.active</code> 类来高亮显示</li>
<li><code>disabled</code> 类可以设置分页链接不可点击</li>
<li>可以将分页条目设置为不同的大小</li>
<li><code>.pagination-lg</code> 类设置大字体的分页条目，<code>.pagination-sm</code> 类设置小字体的分页条目:后在 <code>&lt;li&gt;</code> 元素上添加 .page-item 类</li>
<li>breadcrumb 和 .breadcrumb-item 类用于设置面包屑导航</li>
</ul>
<h3 id="列表组-List-group"><a href="#列表组-List-group" class="headerlink" title="列表组(List-group)"></a>列表组(List-group)</h3><ul>
<li>例:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>大部分基础列表组都是无序的</li>
<li>要创建列表组，可以在 <code>&lt;ul&gt;</code> 元素上添加 <code>.list-group</code> 类, 在 <code>&lt;li&gt;</code> 元素上添加 <code>.list-group-item</code> 类。</li>
<li>通过添加 <code>.active</code> 类来设置启动状态的清单项</li>
<li><code>.disabled</code> 类用于设置禁用的列表项</li>
<li>要创建一个链接的清单项，可以将 <code>&lt;ul&gt;</code> 替换为 <code>&lt;div&gt;</code> ， <code>&lt;a&gt;</code> 替换 <code>&lt;li&gt;</code>。如果你想鼠标悬停显示灰色背景就添加.list-group-item-action 类。</li>
<li>列表项目的颜色可以通过以下列来设置</li>
</ul>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>list-group-item-success</code></td>
<td align="center">成功列表项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-secondary</code></td>
<td align="center">次要列表项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-info</code></td>
<td align="center">信息清单项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-warning</code></td>
<td align="center">警告列表项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-danger</code></td>
<td align="center">危险列表项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-primary</code></td>
<td align="center">主要列表项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-dark</code></td>
<td align="center">深灰色列表项</td>
</tr>
<tr>
<td align="center"><code>list-group-item-light</code></td>
<td align="center">浅色列表项</td>
</tr>
</tbody></table>
<h3 id="卡片-Card"><a href="#卡片-Card" class="headerlink" title="卡片(Card)"></a>卡片(Card)</h3><h4 id="基础卡片"><a href="#基础卡片" class="headerlink" title="基础卡片"></a>基础卡片</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span>简单的卡片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以通过 Bootstrap4 的 <code>.card</code> 与 <code>.card-body</code> 类来创建一个简单的卡片</li>
<li>Bootstrap4 的卡片类似 Bootstrap 3 中的面板、图片缩略图、well</li>
<li><code>.card-header</code>类用于创建卡片的头部样式，<code>.card-footer</code> 类用于创建卡片的底部样式。</li>
<li>可以使用 <code>bg-primary, bg-success, bg-info, bg-warning, bg-danger, bg-secondary, bg-dark 和 bg-light</code>类来改变卡片的背景颜色</li>
<li>可以在头部元素上使用 <code>.card-title</code> 类来设置卡片的标题 。 <code>.card-text</code> 类用于设置卡片正文的内容。 <code>.card-link</code> 类用于给链接设置颜色。</li>
<li>我们可以给 <code>&lt;img&gt;</code> 添加 <code>.card-img-top(图片在文字上方)</code> 或 <code>.card-img-bottom</code></li>
<li>如果图片要设置为背景，可以使用 <code>.card-img-overlay</code> 类。</li>
</ul>
<h4 id="卡片组-Card-group"><a href="#卡片组-Card-group" class="headerlink" title="卡片组(Card-group)"></a>卡片组(Card-group)</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Last updated 3 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Last updated 3 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Last updated 3 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Last updated 3 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Last updated 3 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Last updated 3 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用卡片群组将一系列卡片呈现为具有等宽、高栏位的单一、链接元素。卡片群组由堆叠开始，并透过 <code>display: flex;</code> 从 <code>sm</code> 的断点后开始以统一的尺寸相连接。</li>
<li>当在卡片群组使用页尾，它们的内容将会自动对齐。</li>
</ul>
<h3 id="吐司-Toasts"><a href="#吐司-Toasts" class="headerlink" title="吐司(Toasts)"></a>吐司(Toasts)</h3><h4 id="HTML部份"><a href="#HTML部份" class="headerlink" title="HTML部份"></a>HTML部份</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">aria-live</span>=<span class="string">&quot;assertive&quot;</span> <span class="attr">aria-atomic</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;rounded&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;me-auto&quot;</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>11 mins ago<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;toast&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-body&quot;</span>&gt;</span></span><br><span class="line">    Hello, world! This is a toast message.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>吐司是轻量级通知，目的在于模仿行动版和桌面版作业系统的推播通知。它们是用 <code>flexbox</code> 构建的，因此很容易对齐和定位。</li>
<li>出于效能原因吐司是选择性加入的，所以您必须自己将它们初始化。</li>
<li>如果你没有指定 <code>autohide: false</code>，吐司会自动隐藏。</li>
<li>可以透过将吐司包装于 <code>&lt;div class=&quot;toast-container&quot;/&gt;&lt;div&gt;</code> 来推叠它们，这将会在垂直方向上增加一些间距。</li>
<li>可以透过移除子元件、调整通用类别、增加组件或是增加标记以自定义吐司</li>
<li>根据需求，使用自定义的 CSS 指定吐司位置。右上角通常用于通知，顶部的中间也是如此。如果一次只要展示一个吐司，请将定位样式放在 <code>.toast</code> 上。</li>
<li>当使用 <code>autohide: false</code> 时，必须增加一个关闭的按钮，让用户可以关闭吐司。</li>
</ul>
<h4 id="JS部份"><a href="#JS部份" class="headerlink" title="JS部份"></a>JS部份</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> toastElList = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.toast&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> toastList = toastElList.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">toastEl</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> bootstrap.<span class="title class_">Toast</span>(toastEl, option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>展示一个元素的吐司。在吐司实际被展示前回传给调用者 (即在 <code>shown.bs.toast</code> 事件发生前)。 你必须手动调用此方法，否则吐司不会被展示。<code>toast.show()</code></li>
<li>隐藏吐司的元素。 在吐司元素实际隐藏之前 (即在 <code>hidden.bs.toast</code> 事件发生之前) 回传给调用者。如果让 <code>autohide = false</code>，你必须手动调用这个方法。<code>toast.hide()</code></li>
<li>隐藏一个元素的吐司。您的吐司元件将保留在 DOM 上，但不会再显示。<code>toast.dispose()</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">事件类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>show.bs.toast</code></td>
<td align="center">当调用 show 方法时，此事件会立即触发。</td>
</tr>
<tr>
<td align="center"><code>hown.bs.toast</code></td>
<td align="center">当用户可看见吐司元素时，会触发此事件。</td>
</tr>
<tr>
<td align="center"><code>hide.bs.toast</code></td>
<td align="center">当调用 hide 方法时，此事件会立即触发。</td>
</tr>
<tr>
<td align="center"><code>hidden.bs.toast</code></td>
<td align="center">当隐藏了一个吐司元素时，会触发此事件。</td>
</tr>
</tbody></table>
<ul>
<li>例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myToastEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myToast&#x27;</span>);</span><br><span class="line">myToastEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hidden.bs.toast&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="手风琴-Accordion"><a href="#手风琴-Accordion" class="headerlink" title="手风琴(Accordion)"></a>手风琴(Accordion)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accordionExample&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;accordion-header&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion-button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#collapseOne&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseOne&quot;</span>&gt;</span></span><br><span class="line">        Accordion Item #1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;accordion-collapse collapse show&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingOne&quot;</span> <span class="attr">data-bs-parent</span>=<span class="string">&quot;#accordionExample&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is the first item&#x27;s accordion body.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;accordion-header&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingTwo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion-button collapsed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#collapseTwo&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseTwo&quot;</span>&gt;</span></span><br><span class="line">        Accordion Item #2</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;accordion-collapse collapse&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingTwo&quot;</span> <span class="attr">data-bs-parent</span>=<span class="string">&quot;#accordionExample&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is the second item&#x27;s accordion body.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;accordion-header&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingThree&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion-button collapsed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#collapseThree&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseThree&quot;</span>&gt;</span></span><br><span class="line">        Accordion Item #3</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;accordion-collapse collapse&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingThree&quot;</span> <span class="attr">data-bs-parent</span>=<span class="string">&quot;#accordionExample&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordion-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is the third item&#x27;s accordion body.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>手风琴使用折叠使他可以做到折叠效果。要呈现展开的效果，请在 <code>.accordion 加上 .open</code> 类别。</li>
<li>加上 <code>.accordion-flush</code> 来移除预设 <code>background-color</code>、 外框和圆角使该手风琴能和父容器紧邻。</li>
</ul>
<h3 id="标签-Badge"><a href="#标签-Badge" class="headerlink" title="标签(Badge)"></a>标签(Badge)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example heading <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-secondary&quot;</span>&gt;</span>New<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">  Notifications <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-secondary&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge rounded-pill bg-primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标签通过<code>相对字体大小和 em 单位</code>来缩放以符合直属父元素的大小。在 <code>v5 版本</code>中的标签链接不再拥有 <code>focus 或 hover</code> 样式。</li>
<li>标签可以作为链接或按钮的一部分，用于计数器。</li>
<li>使用背景通用类别来快速修改标签的外观。请注意当使用 Bootstrap 预设的 <code>.bg-light</code> 时，你会需要一个适当的文字色彩，例如 <code>.text-dark</code>。这是因为背景通用类别只有 <code>ackground-color</code> 的设定。</li>
<li>使用 <code>.rounded-pill</code> 通用类别可以透过 <code>border-radius</code> 使标签增加圆角。</li>
</ul>
<h3 id="轮播-Carousel"><a href="#轮播-Carousel" class="headerlink" title="轮播(Carousel)"></a>轮播(Carousel)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carouselExampleCaptions&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-bs-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#carouselExampleCaptions&quot;</span> <span class="attr">data-bs-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#carouselExampleCaptions&quot;</span> <span class="attr">data-bs-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#carouselExampleCaptions&quot;</span> <span class="attr">data-bs-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item active&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-block w-100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption d-none d-md-block&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>First slide label<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nulla vitae elit libero, a pharetra augue mollis interdum.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-block w-100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption d-none d-md-block&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>Second slide label<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-block w-100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption d-none d-md-block&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>Third slide label<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Praesent commodo cursus magna, vel scelerisque nisl consectetur.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-prev&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carouselExampleCaptions&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-prev-icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-next&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carouselExampleCaptions&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-next-icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>轮播是一个用于循环显示一系列内容的幻灯片，由 CSS 的 3D transform 以及一些 JavaScript 建构而成。它适用于一系列图片、文本或自定义的标记，并包括对上一个 /下一个控制项和指示器的支援。</li>
<li>在支持 Page Visibility API 的浏览器中，当网页对用户不可见时，轮播将避免滑动(例如浏览器分页不是启用状态、浏览器视窗最小化时等)。</li>
<li>需要将 <code>.active</code> 添加到其中一个轮播元素上，否则轮播将不可见。另外一定要在 <code>.carousel</code> 上为控制项元件设置一个唯一的 id，特别是当你在一个页面上使用多个轮播的时候。控制项和指示器元素必须具有与 <code>.carousel</code> 元素的 id 符合的 <code>data-bs-target</code> 属性 (或是链接的 href)。</li>
<li>将 <code>.carousel-fade</code> 加到轮播中，以使用淡入淡出的取代滑动的动画效果。</li>
<li>在 <code>.carousel-item</code> 上添加 <code>data-bs-interval=&quot;&quot;</code> 以更改自动循环至下一个项目的延迟时间。</li>
<li>在 <code>.carousel</code> 上添加 <code>.carousel-dark</code> 以获得暗色系的控制项、指示器及字幕。控制项已透过 CSS 属性 filter 从它们预设的白色充填反转。字幕与控制项具有用来自定义 color 及 <code>background-color</code> 的额外 Sass 变量。</li>
</ul>
<ul>
<li>例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCarousel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCarousel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> carousel = <span class="keyword">new</span> bootstrap.<span class="title class_">Carousel</span>(myCarousel);</span><br></pre></td></tr></table></figure>

<ul>
<li>可以透过资料属性或 JavaScript 调整选项。对于资料属性，将选项名称附加到 <code>data-bs-</code>，如 <code>data-bs-interval=&quot;&quot;</code>。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">名字</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>interval</strong></td>
<td align="center"><strong>number</strong></td>
<td align="center"><strong>5000</strong></td>
<td align="left">在一个自动循环的轮播中，项目之间所延迟的时间。 如果为 false，轮播不会自动重播。</td>
</tr>
<tr>
<td align="center"><strong>keyboard</strong></td>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>true</strong></td>
<td align="left">轮播是否应该回应键盘事件</td>
</tr>
<tr>
<td align="center"><strong>pause</strong></td>
<td align="center"><strong>string 或 boolean</strong></td>
<td align="center"><strong>“hover”</strong></td>
<td align="left">如果设定为 <code>&quot;hover&quot;</code>, 轮播会因为 <code>mouseenter</code> 而暂停﹑并在 <code>mouseleave</code>之时再度执行。如果设定为false，滑入时将不会停止轮播。当在触控装置上设定为 <code>&quot;hover&quot;</code>，则在重播恢复之前，轮播将会停止于 <code>touchend (直到用户完成与轮播的互动)</code>。请注意，这是上述鼠标行为的扩充。</td>
</tr>
<tr>
<td align="center"><strong>slide</strong></td>
<td align="center"><strong>string 或 boolean</strong></td>
<td align="center"><strong>false</strong></td>
<td align="left">当用户手动循环第一个元件之后，轮播将自动循环。如果为 “轮播”, 则在载入后自动播放。</td>
</tr>
<tr>
<td align="center"><strong>wrap</strong></td>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>true</strong></td>
<td align="left">轮播是否应该连续循环，或是会停止。</td>
</tr>
<tr>
<td align="center"><strong>touch</strong></td>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>true</strong></td>
<td align="left">在触控装置上轮播是否支持向左/向右的交互滑动。</td>
</tr>
</tbody></table>
<blockquote>
<p>可以使用轮播建构函式来建立一个范例。如下例，使用额外的选项初始化，并让项目开始循环。</p>
</blockquote>
<ul>
<li>例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCarousel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCarousel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> carousel = <span class="keyword">new</span> bootstrap.<span class="title class_">Carousel</span>(myCarousel, &#123;</span><br><span class="line">  <span class="attr">interval</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="attr">wrap</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>cycle</code></td>
<td align="center">由左至右循环播放</td>
</tr>
<tr>
<td align="center"><code>pause</code></td>
<td align="center">将对象的循环从轮播中停止。</td>
</tr>
<tr>
<td align="center"><code>prev</code></td>
<td align="center">将轮播指向前一个对象。 在前一个对象显示前回传给调用者 (e.g., 在 slid.bs.carousel 事件发生之前)。</td>
</tr>
<tr>
<td align="center"><code>next</code></td>
<td align="center">将轮播指向下一个对象。 在后一个对象显示前回传给调用者 (e.g., 在 slid.bs.carousel 事件发生之前)。</td>
</tr>
<tr>
<td align="center"><code>nextWhenVisible</code></td>
<td align="center">如果页面或是其父层不可见，就停止将轮播循环到下一个。在目标项目显示前回传给调用者。</td>
</tr>
<tr>
<td align="center"><code>to</code></td>
<td align="center">将轮播指向特定的索引。(与数组相同，从 0 开始). 在目标项目显示前回传给调用者 (e.g., 在 slid.bs.carousel 事件发生之前)。</td>
</tr>
<tr>
<td align="center"><code>dispose</code></td>
<td align="center">销毁一个元素的轮播。 (移除 DOM 元素上储存的资料)</td>
</tr>
<tr>
<td align="center"><code>getInstance</code></td>
<td align="center">允许你取得与 DOM 元素关联之轮播范例的静态方法。</td>
</tr>
</tbody></table>
<ul>
<li><p>Bootstrap 提供了两个事件给予轮播使用。 两个事件都具有以下附加属性：</p>
<ul>
<li><code>direction</code>: 轮播滑动的方向 (<code>&quot;left&quot; 或 &quot;right&quot;</code>)。</li>
<li><code>relatedTarget</code>: 被作为启用的对象的 DOM 元素。</li>
<li><code>from</code>: 当前对象的索引</li>
<li><code>to</code>: 下一个对象的索引</li>
</ul>
</li>
<li><p>所有轮播事件都在轮播本身(即 <code>&lt;div class=&quot;carousel&quot;&gt;</code>)下被触发。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">事件类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>slide.bs.carousel</code></td>
<td align="center">当调用 slide 方法时，此事件会立即触发。</td>
</tr>
<tr>
<td align="center"><code>slid.bs.carousel</code></td>
<td align="center">轮播完成切换后，此事件就被触发。</td>
</tr>
</tbody></table>
<h3 id="读取图示-Spinners"><a href="#读取图示-Spinners" class="headerlink" title="读取图示(Spinners)"></a>读取图示(Spinners)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-border&quot;</span> <span class="attr">role</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>The border 读取图示使用 currentColor 来当作它的 border-color，这代表你可以使用 文字颜色通用类别 来自定义它的颜色。你可以在标准的读取图示上使用任何通用类别中的颜色。</li>
<li>如果你不喜欢 border 读取图示，可以切换到渐变读取图示。虽然技术上来说，它不会旋转，但它会反覆渐变显示！</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-grow&quot;</span> <span class="attr">role</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 Bootstrap 中的读取图示是用 <code>rem, currentColor 和 display: inline-flex</code>。这意味着它们可以轻易地调整大小、颜色以及快速对齐。</li>
<li>使用 <code>margin utilities</code> 像是 <code>.m-5</code> 简单地增加间隔。</li>
<li>使用 <code>flexbox</code> 通用类别、<code>float</code> 通用类别，或是 文字排版 在任何情况下都可以将读取图示精确地放置在您需要的位置上。</li>
<li>增加 <code>.spinner-border-sm</code> 和 <code>.spinner-grow-sm</code> 制作一个较小的读取图示，让它可以在其他元件中快速地被使用。</li>
<li>在按钮内使用读取图示是表示当前正在处理或正在进行操作。您也可以依照需求使用 button text 来更换读取图示的文字。</li>
</ul>
<h3 id="下拉菜单-Dropdowns"><a href="#下拉菜单-Dropdowns" class="headerlink" title="下拉菜单(Dropdowns)"></a>下拉菜单(Dropdowns)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary dropdown-toggle dropdown-toggle-split&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tablet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Smartphone<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>dropdown 类用来指定一个下拉式功能表</li>
<li>使用一个按钮或链接来打开下拉式功能表，按钮或链接需要添加 <code>.dropdown-toggle</code> 和 <code>data-toggle=&quot;dropdown&quot;</code> 属性。</li>
<li><code>&lt;div&gt;</code> 元素上添加 <code>.dropdown-menu</code> 类来设置实际下拉式功能表，然后在下拉式功能表的选项中添加 <code>.dropdown-item</code> 类。</li>
<li>可以在 <code>&lt;a&gt;</code> 标签中使用</li>
<li><code>dropdown-divider</code> 类用于在下拉式功能表中创建一个水平的分割线</li>
<li><code>dropdown-header</code> 类用于在下拉式功能表中添加标题</li>
<li><code>active</code> 类会让下拉式功能表的选项高亮显示 (添加蓝色背景)</li>
<li>要禁用下拉式功能表的选项，可以使用 <code>.disabled</code> 类。</li>
<li>在元素上的 <code>.dropdown-menu</code> 类后添加 <code>.dropdown-menu-right</code> 类，使下拉式功能表右对齐。</li>
<li><code>dropright</code>类，下拉式功能表向右弹出。</li>
<li><code>dropup</code>类，上拉功能表向上弹出。</li>
<li><code>dropleft</code>类，下拉式功能表向上弹出。</li>
</ul>
<h3 id="折叠-Collapse"><a href="#折叠-Collapse" class="headerlink" title="折叠(Collapse)"></a>折叠(Collapse)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#demo&quot;</span>&gt;</span>折叠<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse&quot;</span>&gt;</span></span><br><span class="line">  text....</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>collapse 类用于指定一个折叠元素，点击按钮后会在隐藏与显示之间切换。控制内容的隐藏与显示，需要在 <code>&lt;a&gt;</code> 或 <code>&lt;button&gt;</code> 元素上添加 <code>data-toggle=&quot;collapse&quot;</code> 属性。 <code>data-target=&quot;#id&quot;</code> 属性是对应折叠的内容 (<code>&lt;div id=&quot;demo&quot;&gt;</code>)。</li>
<li><code>&lt;a&gt;</code> 元素上你可以使用 href 属性来代替 <code>data-target</code> 属性。</li>
<li>默认情况下折叠的内容是隐藏的，你可以添加 <code>.show</code> 类让内容预设显示。</li>
</ul>
<h3 id="导航-Navbar"><a href="#导航-Navbar" class="headerlink" title="导航(Navbar)"></a>导航(Navbar)</h3><blockquote>
<p>在父元素上添加<code>nav</code>类，在子元素上添加<code>nav-item</code>类，在链接上添加<code>nav-link</code>类来创建导航。</p>
</blockquote>
<ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link disabled&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>justify-content-center</code></td>
<td align="center">类设置导航居中显示</td>
</tr>
<tr>
<td align="center"><code>justify-content-end</code></td>
<td align="center">类设置导航右对齐</td>
</tr>
<tr>
<td align="center"><code>flex-column</code></td>
<td align="center">垂直导航</td>
</tr>
<tr>
<td align="center"><code>nav-tabs</code></td>
<td align="center">将导航转化为选项卡</td>
</tr>
<tr>
<td align="center"><code>active</code></td>
<td align="center">标记导航卡中当前选中选项</td>
</tr>
<tr>
<td align="center"><code>nav-pills</code></td>
<td align="center">将导航项设置成胶囊形状</td>
</tr>
<tr>
<td align="center"><code>nav-justified</code></td>
<td align="center">设置导航项齐行等宽显示</td>
</tr>
</tbody></table>
<h3 id="表单-Form"><a href="#表单-Form" class="headerlink" title="表单(Form)"></a>表单(Form)</h3><blockquote>
<p>表单元素 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, 和 <code>&lt;select&gt;</code> elements 在使用 .form-control 类的情况下，宽度都是设置为 100%。</p>
</blockquote>
<ul>
<li>内联表单需要在 <code>&lt;form&gt;</code> 元素上添加 <code>.form-inline</code> 类</li>
<li>所有内联表单中的元素都是左对齐的</li>
<li>在荧幕宽度 <code>小于 576px</code> 时为垂直堆叠，如果荧幕宽度 <code>大于等于 576px</code> 时表单元素才会显示在同一个水平线上。</li>
</ul>
<h4 id="输入框组-Input-group"><a href="#输入框组-Input-group" class="headerlink" title="输入框组(Input-group)"></a>输入框组(Input-group)</h4><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Your Email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-append&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>@runoob.com<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>input-group</code></td>
<td align="center">用来向表单输入框中添加更多的样式</td>
</tr>
<tr>
<td align="center"><code>input-group-prepend</code></td>
<td align="center">可以在输入框的的前面添加文本信息</td>
</tr>
<tr>
<td align="center"><code>input-group-append</code></td>
<td align="center">在输入框的后面添加文本信息</td>
</tr>
<tr>
<td align="center"><code>input-group-text</code></td>
<td align="center">来设置文本的样式</td>
</tr>
</tbody></table>
<h3 id="提示框-Tooltip"><a href="#提示框-Tooltip" class="headerlink" title="提示框(Tooltip)"></a>提示框(Tooltip)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我是提示内容!&quot;</span>&gt;</span>鼠标移动到我这<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提示框是一个小小的弹窗，在鼠标移动到元素上显示，鼠标移到元素外就消失。</p>
<ul>
<li>通过向元素添加 data-toggle=”tooltip” 来来创建提示框。</li>
<li>title 属性的内容为提示框显示的内容</li>
<li>提示框要写在 jQuery 的初始化代码里: 然后在指定的元素上调用 <code>tooltip()</code> 方法。</li>
<li>预设情况下提示框显示在元素上方</li>
<li>使用 <code>data-placement</code> 属性来设定提示框显示的方向: <code>top, bottom, left 或 right</code>。</li>
</ul>
<h3 id="模态框-Modal"><a href="#模态框-Modal" class="headerlink" title="模态框(Modal)"></a>模态框(Modal)</h3><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按钮：用于打开模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span></span><br><span class="line">  打开模态框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- 模态框头部 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>模态框头部<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 模态框主体 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">        模态框内容..</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- 模态框底部 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="弹出框-Popover"><a href="#弹出框-Popover" class="headerlink" title="弹出框(Popover)"></a>弹出框(Popover)</h3><blockquote>
<p>弹出框控制项类似于提示框，它在鼠标点击到元素后显示，与提示框不同的是它可以显示更多的内容。</p>
</blockquote>
<ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Header&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Content&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Header&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Content&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Header&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;left&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Content&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Header&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;right&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Content&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>向元素添加 <code>data-toggle=&quot;popover&quot;</code> 来创建弹出框。</li>
<li>title 属性的内容为弹出框的标题，<code>data-content</code> 属性显示了弹出框的文本内容。</li>
<li>预设情况下弹出框显示在元素右侧</li>
<li>可以使用 <code>data-placemen</code>t 属性来设定弹出框显示的方向: <code>top, bottom, left 或 right</code>。</li>
<li>预设情况下，弹出框在再次点击指定元素后就会关闭，你可以使用 <code>data-trigger=&quot;focus&quot;</code> 属性来设置在鼠标点击元素外部区域来关闭弹出框。</li>
<li>如果你想实现在鼠标移动到元素上显示，移除后消失的效果，可以使用 <code>data-trigger</code> 属性，并设置值为 <code>&quot;hover&quot;</code>。</li>
</ul>
<h2 id="Scroll滚动监听"><a href="#Scroll滚动监听" class="headerlink" title="Scroll滚动监听"></a>Scroll滚动监听</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可滚动区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data-spy</span>=<span class="string">&quot;scroll&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;navbar&quot;</span> <span class="attr">data-offset</span>=<span class="string">&quot;50&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- The navbar - The &lt;a&gt; elements are used to jump to a section in the scrollable area --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-expand-sm bg-dark navbar-dark fixed-top&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section1&quot;</span>&gt;</span>Section 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第一部分内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Section 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this page and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>向想要监听的元素(通常是 body)添加 <code>data-spy=&quot;scroll&quot;</code> 。</li>
<li>然后添加 <code>data-target</code> 属性，它的值为巡览列的 <code>id 或 class (.navbar)</code>。这样就可以联系上可滚动区域。</li>
<li>注意可滚动项元素上的 id (<code>&lt;div id=&quot;section1&quot;&gt;</code>) 必须匹配巡览列上的链接选项 (<code>&lt;a href=&quot;#section1&quot;&gt;</code>)。</li>
<li>可选项 <code>data-offset</code> 属性用于计算滚动位置时，距离顶部的偏移图元。 默认为 <code>10px</code>。</li>
<li>设置相对定位: 使用 <code>data-spy=&quot;scroll&quot;</code> 的元素需要将其 CSS position 属性设置为 <code>&quot;relative&quot;</code> 才能起作用。</li>
</ul>
<h2 id="其他小工具"><a href="#其他小工具" class="headerlink" title="其他小工具"></a>其他小工具</h2><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>border</code></td>
<td align="center">添加边框</td>
</tr>
<tr>
<td align="center"><code>border border-0</code></td>
<td align="center">去除边框</td>
</tr>
<tr>
<td align="center"><code>border border-top-0</code></td>
<td align="center">添加边框并去除上方边框</td>
</tr>
<tr>
<td align="center"><code>border border-right-0</code></td>
<td align="center">添加边框并去除右方边框</td>
</tr>
<tr>
<td align="center"><code>border border-bottom-0</code></td>
<td align="center">添加边框并去除左方边框</td>
</tr>
<tr>
<td align="center"><code>border border-left-0</code></td>
<td align="center">添加边框并去除右方边框</td>
</tr>
<tr>
<td align="center"><code>border border-primary</code></td>
<td align="center">重要的颜色的边框</td>
</tr>
<tr>
<td align="center"><code>border border-secondary</code></td>
<td align="center">加粗的边框</td>
</tr>
<tr>
<td align="center"><code>border border-success</code></td>
<td align="center">执行成功的颜色的边框</td>
</tr>
<tr>
<td align="center"><code>border border-danger</code></td>
<td align="center">危险的颜色的边框</td>
</tr>
<tr>
<td align="center"><code>border border-warning</code></td>
<td align="center">警告的颜色的边框</td>
</tr>
<tr>
<td align="center"><code>border border-info</code></td>
<td align="center">提示信息的颜色的边框</td>
</tr>
<tr>
<td align="center"><code>border border-light</code></td>
<td align="center">浅灰色边框</td>
</tr>
<tr>
<td align="center"><code>border border-dark</code></td>
<td align="center">深灰色边框</td>
</tr>
<tr>
<td align="center"><code>border border-white</code></td>
<td align="center">白色边框</td>
</tr>
<tr>
<td align="center"><code>rounded</code></td>
<td align="center">添加圆角边框(需配合以上border使用，下同。)</td>
</tr>
<tr>
<td align="center"><code>rounded-top</code></td>
<td align="center">上方两个角添加圆角</td>
</tr>
<tr>
<td align="center"><code>rounded-right</code></td>
<td align="center">右方两个角添加圆角</td>
</tr>
<tr>
<td align="center"><code>rounded-bottom</code></td>
<td align="center">下方两个角添加圆角</td>
</tr>
<tr>
<td align="center"><code>rounded-left</code></td>
<td align="center">左方两个角添加圆角</td>
</tr>
<tr>
<td align="center"><code>rounded-circle</code></td>
<td align="center">椭圆形边框</td>
</tr>
<tr>
<td align="center"><code>rounded-0</code></td>
<td align="center">去除圆角</td>
</tr>
<tr>
<td align="center"><code>float-right</code></td>
<td align="center">设置元素右浮动</td>
</tr>
<tr>
<td align="center"><code>float-left</code></td>
<td align="center">设置元素左浮动</td>
</tr>
<tr>
<td align="center"><code>clearfix</code></td>
<td align="center">用于清除浮动</td>
</tr>
<tr>
<td align="center"><code>mx-auto</code></td>
<td align="center">设置居中对齐</td>
</tr>
<tr>
<td align="center"><code>my-auto</code></td>
<td align="center">上下<strong>margin</strong></td>
</tr>
<tr>
<td align="center"><code>m-* .p-*</code></td>
<td align="center">四周<strong>margin/padding</strong></td>
</tr>
<tr>
<td align="center"><code>w-* (.w-25, .w-50, .w-75, .w-100, .mw-100)</code></td>
<td align="center">设置宽度</td>
</tr>
<tr>
<td align="center"><code>h-* (.h-25, .h-50, .h-75, .h-100, .mh-100)</code></td>
<td align="center">设置高度</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>由最佳化资料表功能而引出的大坑(DataFree)</title>
    <url>/datafree/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>之前使用PHP编写最佳化资料表功能，发现一个关于<code>InnoDB DataFree</code>的问题，供大家参考。</p>
</div>
<span id="more"></span> 

<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="资料分散"><a href="#资料分散" class="headerlink" title="资料分散"></a>资料分散</h3><blockquote>
<p>资料分散其实就是产生了碎片空间，MySQL具有相当多不同种类的存储引擎来实现列表中的数据存储功能。 每当MySQL从你的列表中删除了一行内容，该段空间就会被留空。而在一段时间内的大量删除操作，会使这种留空的空间变得比存储列表内容所使用的空间更大。当MySQL对数据进行扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。</p>
</blockquote>
<blockquote>
<p>这种额外的破碎的存储空间在读取效率方面比正常占用的空间要低得多，我们也称其为碎片空间，他的大小就是数据库中显示的资料分散的大小。</p>
</blockquote>
<h3 id="最佳化资料表"><a href="#最佳化资料表" class="headerlink" title="最佳化资料表"></a>最佳化资料表</h3><blockquote>
<p>当出现了碎片空间后，我们可以通过phpmyadmin来进行最佳化资料表操作去清除碎片空间，对应的语句如下参考<a href="http://a.biugle.cn/sql/">SQL总结</a>：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> `tablename1`,`dbname`.`tablename2`;</span><br><span class="line">ANALYZE <span class="keyword">TABLE</span> `tablename1`,`dbname`.`tablename2`;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MySQL列表，包括MyISAM和InnoDB这两种最常见的类型，而根据经验来说，其碎片的产生及消除都是随机的。碎片会在你的表格中留下明显的空白，而这会给列表扫描工作带来相当大的困扰。对你的列表进行优化，这样会使列表的全面及分区扫描工作进行得更有效率。(之前InnoDB是不能最佳化的，后面MySQL开放了对他的支持。)</p>
</blockquote>
<h2 id="查询表的碎片空间"><a href="#查询表的碎片空间" class="headerlink" title="查询表的碎片空间"></a>查询表的碎片空间</h2><blockquote>
<p>一般我们通过查询information_schema.TABLES 中 DataFree 来查看表的碎片空间大小(MyISAM/InnoDB)</p>
</blockquote>
<p>&emsp;&emsp;但是问题来了，一次偶然的机会发现，数据库中的某些表虽然现实的碎片空间为0，但是DataFree的栏位并不是0。后面检查发现这些表全都是InnoDB表。</p>
<p>&emsp;&emsp;所以我又跑到<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2luZm9ybWF0aW9uLXNjaGVtYS10YWJsZXMtdGFibGUuaHRtbA==">MySQL文档<i class="fa fa-external-link-alt"></i></span>查询发现：</p>
<blockquote>
<p>DataFree表示</p>
</blockquote>
<ol>
<li>已分配但未使用的字节数。</li>
<li>InnoDB表报告表所属的表空间的可用空间。对于位于共享表空间中的表，这是共享表空间的可用空间。如果您使用多个表空间，并且表具有自己的表空间，则可用空间仅用于该表。可用空间是指完全可用范围中的字节数减去安全容量。即使可用空间显示为0，只要不需要分配新的盘区，也可以插入行。对于NDB群集，DATA_FREE显示磁盘上为磁盘数据表或磁盘上的碎片分配但未使用的空间。 （内存数据资源的使用情况由DATA_LENGTH列报告。）对于分区表，此值仅是估计值，可能不是绝对正确。在这种情况下，获取此信息的一种更准确的方法是查询INFORMATION_SCHEMA PARTITIONS表，如本例所示：从INFORMATION_SCHEMA.PARTITIONS中选择SELECT SUM（DATA_FREE），其中TABLE_SCHEMA =’mydb’并且TABLE_NAME =’mytable’;<br><img data-src="/images/loading.gif" data-original="/datafree/DATAFREE.png"></li>
</ol>
<h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p><code>因此我们的错误原因就找到了</code></p>
<ul>
<li>Innodb有共享表空间和独立表空间两种类型。</li>
<li>若表的表空间管理方式是共享表空间时：<code>information_schema.TABLES 中 DataFree 表示共享表空间的大小</code><br><img data-src="/images/loading.gif" data-original="/datafree/InnoDB.png"></li>
</ul>
<h3 id="表空间管理方式查询"><a href="#表空间管理方式查询" class="headerlink" title="表空间管理方式查询"></a>表空间管理方式查询</h3><h4 id="查看当前数据库的表空间管理类型"><a href="#查看当前数据库的表空间管理类型" class="headerlink" title="查看当前数据库的表空间管理类型"></a>查看当前数据库的表空间管理类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>MySQL现在InnoDB默认为独立表空间</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> &quot;innodb_file_per_table&quot;;</span><br><span class="line"><span class="keyword">ON</span>代表独立表空间管理，OFF代表共享表空间管理；</span><br></pre></td></tr></table></figure>
<h4 id="查看单表的表空间管理方式"><a href="#查看单表的表空间管理方式" class="headerlink" title="查看单表的表空间管理方式"></a>查看单表的表空间管理方式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看单表的表空间管理方式，需要查看每个表是否有单独的数据档。(.ibd档)</span><br><span class="line">或者查看 information_schema 该表中 DATA_LENGTH 的值是否与另外的表相同的情况(不推荐)</span><br></pre></td></tr></table></figure>

<h3 id="如何改变表空间管理方式"><a href="#如何改变表空间管理方式" class="headerlink" title="如何改变表空间管理方式"></a>如何改变表空间管理方式</h3><h4 id="修改数据库的表空间管理方式"><a href="#修改数据库的表空间管理方式" class="headerlink" title="修改数据库的表空间管理方式"></a>修改数据库的表空间管理方式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">修改innodb_file_per_table的参数值即可，但是修改不能影响之前已经使用过的共享表空间和独立表空间。</span><br><span class="line">innodb_file_per_table<span class="operator">=</span><span class="number">1</span> 为使用独占表空间</span><br><span class="line">innodb_file_per_table<span class="operator">=</span><span class="number">0</span> 为使用共享表空间</span><br></pre></td></tr></table></figure>

<h4 id="共享表空间转化为独立表空间的方法"><a href="#共享表空间转化为独立表空间的方法" class="headerlink" title="共享表空间转化为独立表空间的方法"></a>共享表空间转化为独立表空间的方法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(参数innodb_file_per_table<span class="operator">=</span><span class="number">1</span>需要先设置)</span><br><span class="line">单个表的转换操作：</span><br><span class="line"><span class="keyword">ALTER TABLE</span> `table_name` ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>也可用于清理碎片空间</span><br><span class="line">查看数据库目录下相应的InnoDB表是不是有自己的.ibd档，如果有则修改完成。</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>所以，我们如果要实现最佳化资料表的功能，查询<strong>information_schema.TABLES 中 DataFree</strong>只能查询出<strong>MyISAM表</strong>的分散程度，MyISAM 因为索引和资料是分开的，所以 OPTIMIZE 可以整理资料档案，并重排索引。而<strong>InnoDB表</strong>最好通过其他方式查询其碎片空间，再决定是否最佳化。</p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>FontAwesome基础知识</title>
    <url>/fontawesome/</url>
    <content><![CDATA[<div class="note danger"><p>2019年实习时的 FontAwesome基础知识 备份</p>
</div>
<span id="more"></span>

<h2 id="基本介绍及用法"><a href="#基本介绍及用法" class="headerlink" title="基本介绍及用法"></a>基本介绍及用法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>FontAwesome是一套绝佳的图标字体库</li>
<li>提供可缩放的矢量图标</li>
<li>可以使用CSS提供的所有特性进行更改，包括：大小、颜色、阴影或者其他支持的效果。</li>
<li>一个字库，图标种类丰富、高分屏完美呈现。</li>
<li>无需依赖JavaScript、完美兼容其他框架。</li>
<li>无限缩放、CSS控制。</li>
</ol>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote>
<p>官网地址：<span class="exturl" data-url="aHR0cHM6Ly9mb250YXdlc29tZS5jb20v">https://fontawesome.com<i class="fa fa-external-link-alt"></i></span><br>Pro破解版下载：<span class="exturl" data-url="aHR0cHM6Ly9wcm93ZWJiZXIucnUvaW50ZXJuZXQvaS1zY3JpcHRzLzIxNjUwLWZvbnQtYXdlc29tZS1wcm8uaHRtbA==">https://prowebber.ru/internet/i-scripts/21650-font-awesome-pro.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="5-x-版本介绍"><a href="#5-x-版本介绍" class="headerlink" title="5.x 版本介绍"></a>5.x 版本介绍</h3><table>
<thead>
<tr>
<th align="center">New Prefix</th>
<th align="center">Icon Style</th>
<th align="center">SVG + JS Filename</th>
<th align="center">Web Font Filename</th>
<th align="center">Availability</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fab</td>
<td align="center">Font Awesome品牌</td>
<td align="center">brands.js</td>
<td align="center">fa-brands-400.*</td>
<td align="center">免费</td>
</tr>
<tr>
<td align="center">fas or fa(旧版)</td>
<td align="center">Font Awesome实心</td>
<td align="center">solid.js</td>
<td align="center">fa-solid-900.*</td>
<td align="center">免费</td>
</tr>
<tr>
<td align="center">far</td>
<td align="center">Font Awesome常规</td>
<td align="center">regular.js</td>
<td align="center">fa-regular-400.*</td>
<td align="center">仅专业版</td>
</tr>
<tr>
<td align="center">fal</td>
<td align="center">Font Awesome细体</td>
<td align="center">light.js</td>
<td align="center">fa-light-300.*</td>
<td align="center">仅专业版</td>
</tr>
<tr>
<td align="center">fad</td>
<td align="center">Font Awesome双色</td>
<td align="center">duotone.js</td>
<td align="center">fa-duotone-300.*</td>
<td align="center">仅专业版</td>
</tr>
</tbody></table>
<p><code>注意：fa前缀最新版本中已弃用。新的默认设置是实心的fas样式和品牌的fab样式。</code></p>
<h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 引用所有</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/all.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 先引入fontawesome</span><br><span class="line">// 再引入需要的图标类别</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/fontawesome.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/solid.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/regular.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/brands.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/duotone.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./fontawesome/css/regular.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 同上，顺序相反。</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/solid.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/regular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/brands.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/duotone.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/regular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./fontawesome/js/fontawesome.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图标备忘录"><a href="#图标备忘录" class="headerlink" title="图标备忘录"></a>图标备忘录</h3><ul>
<li>可在官方网址上搜索自己想要的图标</li>
<li>也可直接下载为离线PDF文档搜索自己想要的图标。</li>
<li>本站友情下载：<a target="_blank" href="./pdf/solid.pdf" title="实心" style="text-decoration: underline !important;color: orange !important;margin: 0 6px !important;display: inline-block !important;">solid-pdf</a><a target="_blank" href="./pdf/brands.pdf" title="品牌" style="text-decoration: underline !important;color: orange !important;margin: 0 6px !important;display: inline-block !important;">brands-pdf</a><a target="_blank" href="./pdf/regular.pdf" title="常规" style="text-decoration: underline !important;color: orange !important;margin: 0 6px !important;display: inline-block !important;">regular-pdf</a><a target="_blank" href="./pdf/light.pdf" title="细体" style="text-decoration: underline !important;color: orange !important;margin: 0 6px !important;display: inline-block !important;">light-pdf</a><a target="_blank" href="./pdf/duotone.pdf" title="双色" style="text-decoration: underline !important;color: orange !important;margin: 0 6px !important;display: inline-block !important;">duotone-pdf</a></li>
</ul>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><table>
<thead>
<tr>
<th align="center">Style</th>
<th align="center">Class</th>
<th align="center">Prefix</th>
<th align="center">Example</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实心</td>
<td align="center">fas fa-camera</td>
<td align="center">fas</td>
<td align="center"><code>&lt;i class=&quot;fas fa-camera&quot;&gt;&lt;/i&gt;</code></td>
</tr>
<tr>
<td align="center">细体</td>
<td align="center">fal fa-camera</td>
<td align="center">fal</td>
<td align="center"><code>&lt;i class=&quot;fal fa-camera&quot;&gt;&lt;/i&gt;</code></td>
</tr>
<tr>
<td align="center">双色</td>
<td align="center">fad fa-camera</td>
<td align="center">fad</td>
<td align="center"><code>&lt;i class=&quot;fad fa-camera&quot;&gt;&lt;/i&gt;</code></td>
</tr>
<tr>
<td align="center">品牌</td>
<td align="center">fab fa-camera</td>
<td align="center">fab</td>
<td align="center"><code>&lt;i class=&quot;fab fa-camera&quot;&gt;&lt;/i&gt;</code></td>
</tr>
<tr>
<td align="center">常规</td>
<td align="center">far fa-camera</td>
<td align="center">far</td>
<td align="center"><code>&lt;i class=&quot;far fa-camera&quot;&gt;&lt;/i&gt;</code></td>
</tr>
</tbody></table>
<blockquote class="blockquote-center">
<p>预览实心solid <i class="fas fa-camera"></i></p>

</blockquote>


<h3 id="伪类用法"><a href="#伪类用法" class="headerlink" title="伪类用法"></a>伪类用法</h3><blockquote>
<p>使用伪类设计添加想要的图标，适用于不想改变文档结构的情况，例如：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.icon</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-variant</span>: normal;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-rendering</span>: auto;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.twitter</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: <span class="string">&quot;Font Awesome 5 Brands&quot;</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;\f099&quot;</span>;<span class="comment">/* 通过文档查询对应编码 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon twitter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="图标大小-Sizing-Icons"><a href="#图标大小-Sizing-Icons" class="headerlink" title="图标大小(Sizing Icons)"></a>图标大小(Sizing Icons)</h3><ul>
<li>图标继承其父容器的字体大小，通过以下类，可增大或减小图标大小。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">fa-xs</th>
<th align="center">fa-sm</th>
<th align="center">fa-lg</th>
<th align="center">fa-(1-10)x</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0.75em</td>
<td align="center">0.875em</td>
<td align="center">2em</td>
<td align="center">1-10em</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-xs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-camera fa-(1-10)x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="固定宽度-Fixed-Width-Icons"><a href="#固定宽度-Fixed-Width-Icons" class="headerlink" title="固定宽度(Fixed-Width Icons)"></a>固定宽度(Fixed-Width Icons)</h3><ul>
<li> 在引用的图标的HTML元素上添加fa-fw类，将一个或多个图标设为相同的固定宽度1.25em。</li>
</ul>
<h3 id="列表中的图标"><a href="#列表中的图标" class="headerlink" title="列表中的图标"></a>列表中的图标</h3><ul>
<li>使用<code>fa-ul</code>和<code>fa-li</code>替换无序列表中的默认项目符号。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;fa-ul&quot;</span>&gt;</span>      </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>        </span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-li&quot;</span>&gt;</span>         </span><br><span class="line">       <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-square &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>        </span><br><span class="line">     <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     &lt;-- 文本 --&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span>      </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-li&quot;</span>&gt;</span>          </span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-check-square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &lt;-- 文本 --&gt;  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="动态图标-Animated-Icons"><a href="#动态图标-Animated-Icons" class="headerlink" title="动态图标(Animated Icons)"></a>动态图标(Animated Icons)</h3><ul>
<li>使用 fa-spin 使任意图标旋转，还可以使用 fa-pulse 使其进行多方位旋转。尤其适合 spinner, refresh, 和 fas-cog。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">图标旋转</th>
<th align="center">多方位旋转</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fa-spin</td>
<td align="center">fa-pulse</td>
</tr>
</tbody></table>
<h3 id="旋转-Rotating-Icons"><a href="#旋转-Rotating-Icons" class="headerlink" title="旋转(Rotating Icons)"></a>旋转(Rotating Icons)</h3><ul>
<li>在引用图标时使用<code>fa-rotate-90/180/270</code>类实现旋转（顺时针），或<code>fa-flip-horizontal/vertical/both</code>类实现翻转。</li>
</ul>
<h3 id="边框-拖动图标-Bordered-Pulled-Icons）"><a href="#边框-拖动图标-Bordered-Pulled-Icons）" class="headerlink" title="边框+拖动图标(Bordered+Pulled Icons）"></a>边框+拖动图标(Bordered+Pulled Icons）</h3><ul>
<li>使用fa-pull-left和fa-pull-right可实现图标左右浮动， fa-border可给图片添加外框。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Class</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fa-border</td>
<td align="center">图标添加外框</td>
</tr>
<tr>
<td align="center">fa-pull-right</td>
<td align="center">图标向右浮动</td>
</tr>
<tr>
<td align="center">fa-pull-left</td>
<td align="center">图标向左浮动</td>
</tr>
</tbody></table>
<h3 id="堆叠-Stacking-Icons"><a href="#堆叠-Stacking-Icons" class="headerlink" title="堆叠(Stacking Icons)"></a>堆叠(Stacking Icons)</h3><ul>
<li>要堆叠多个图标，请使用父级上的 .fa-stack 类，.fa-stack-1x 类用于常规大小的图标，fa-stack-2x 用于较大的图标。 <code>.fa-inverse</code> 可以与 <code>.fa-stack-1x</code> 或 <code>.fa-stack-2x</code> 一起添加到图标中，使图标颜色为白色。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-stack&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-* fa-stack-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-* fa-stack-1x fa-inverse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图标遮罩-Masking-Icons"><a href="#图标遮罩-Masking-Icons" class="headerlink" title="图标遮罩(Masking Icons)"></a>图标遮罩(Masking Icons)</h3><ul>
<li>将两个图标结合起来可以创建一种单色形状，可以与强化变形结合。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fas fa-*&quot; data-fa-transform=&quot;shrink-* up-*&quot; data-fa-mask=&quot;fas fa-*&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：图标屏蔽要求使用SVG + JS版本的FontAwesome。</code></p>
<h3 id="强化变形-Power-Transform"><a href="#强化变形-Power-Transform" class="headerlink" title="强化变形(Power Transform)"></a>强化变形(Power Transform)</h3><ul>
<li>借助Font Awesome 5中SVG的强大功能，现在可以使用data-fa-transform元素属性任意缩放、定位、翻转和旋转图标。</li>
<li>缩放比例：放大或缩小图标</li>
<li>定位：改变图标位置</li>
<li>旋转与翻转</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fas fa-*&quot; data-fa-transform=&quot;shrink/grow-* up/right/down/left-* rotate-* flip-v flip-h&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<h3 id="分层-文本和计数器-Layering-Text-and-Counters"><a href="#分层-文本和计数器-Layering-Text-and-Counters" class="headerlink" title="分层/文本和计数器(Layering,Text and Counters)"></a>分层/文本和计数器(Layering,Text and Counters)</h3><ul>
<li>图层是一种将图标和文本视觉上彼此叠加的新方法。通过这种新方法，可以使用2个以上的图标。</li>
</ul>
<p><code>注意：分层、文本和计数器也要求使用SVG + JS版本的FontAwesome。</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--图标数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-layers&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:red&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bath fa-inverse&quot;</span> <span class="attr">data-fa-transform</span>=<span class="string">&quot;shrink-10 left-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bed fa-inverse&quot;</span> <span class="attr">data-fa-transform</span>=<span class="string">&quot;shrink-10 right-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-layers&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:red&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fas fa-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-layers-text fa-inverse&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight:100&quot;</span> <span class="attr">data-fa-transform</span>=<span class="string">&quot;shrink-7&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<table>
<thead>
<tr>
<th align="center">Layering Components</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fa-layers</td>
<td align="center">包装图标或文字堆叠</td>
</tr>
<tr>
<td align="center">Inner icons</td>
<td align="center">在fa-layers元素内添加任意数量的图标</td>
</tr>
<tr>
<td align="center">fa-layers-text</td>
<td align="center">在fa-layers元素内添加以将文本放在图标顶部</td>
</tr>
<tr>
<td align="center">fa-layers-counter</td>
<td align="center">在图标右上方添加一个计数器</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>FontAwesome</tag>
      </tags>
  </entry>
  <entry>
    <title>UUID 简介</title>
    <url>/uuid/</url>
    <content><![CDATA[<div class="note success no-icon"><p>UUID 简介（PHP为例）</p>
</div>
<span id="more"></span> 

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>名称：Universally Unique Identifier（通用唯一标识符）</li>
<li>简介<ul>
<li>UUID 是一串全球唯一的(16进制)数字串。</li>
<li> UUID 由开源软件基金会 (Open Software Foundation, OSF) 定义，是分布式计算环境 (Distributed Computing Environment, DCE) 的一个组成部分。</li>
<li>UUID 的标准格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx”，五个部分分别为8个字符、4个字符、4个字符、4个字符、12个字符，中间用“-”号间隔。常见的 GUID(Globally Unique Identifier)是微软对 UUID 标准的一种实现。</li>
</ul>
</li>
<li>目的<ul>
<li>让每个使用者都能生成不跟其他人重复的唯一码</li>
</ul>
</li>
<li>组成<ul>
<li>【xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx】UUID是16进制128bit长的数字，通常以36字节的字符串表示。</li>
<li>其中 M 与 N 都有特殊含义M 表示 UUID 版本，目前只有五个版本，即只会出现 1，2，3，4，5。数字 N 的一至三个最高有效位表示 UUID 变体，目前只会出现 8，9，a，b 四种情况。</li>
</ul>
</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>很多应用场景需要一个id，但是又不要求这个id有具体的意义，仅仅用来标识一个对象。</li>
<li>常见的例子有：<ul>
<li>数据库表的id字段</li>
<li>Linux 系统配置档</li>
<li>阿里云、腾讯云的API 界面中的请求Id（requestId）</li>
<li>…etc</li>
</ul>
</li>
</ul>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><h3 id="UUID版本-Version-1"><a href="#UUID版本-Version-1" class="headerlink" title="UUID版本 (Version 1)"></a>UUID版本 (Version 1)</h3><ul>
<li>基于时间的 UUID<ul>
<li>基于时间的 UUID 通过计算当前时间戳、随机数和机器 MAC 地址得到。由于在算法中使用了 MAC 地址，这个版本的 UUID 可以保证在全球范围的唯一性。但与此同时，使用 MAC 地址会带来安全性问题，这就是这个版本 UUID 受到批评的地方。如果应用只是在局域网中使用，也可以使用退化的算法，以IP地址来代替MAC地址。</li>
</ul>
</li>
</ul>
<h3 id="UUID版本-Version-2"><a href="#UUID版本-Version-2" class="headerlink" title="UUID版本 (Version 2)"></a>UUID版本 (Version 2)</h3><ul>
<li>DCE 安全的 UUID<ul>
<li>分布式计算环境（Distributed Computing Environment) 安全的 UUID 和基于时间的 UUID 算法相同，但会把时间戳的前 4 位置换为 POSIX 的 UID 或 GID。这个版本的UUID在实际中较少用到。</li>
</ul>
</li>
</ul>
<h3 id="UUID版本-Version-3"><a href="#UUID版本-Version-3" class="headerlink" title="UUID版本 (Version 3)"></a>UUID版本 (Version 3)</h3><ul>
<li>基于名字的 UUID（MD5）</li>
<li>基于名字的 UUID 通过计算名字和命名空间的 MD5 散列值得到。这个版本的 UUID 保证了：<ul>
<li>相同命名空间中不同名字生成的 UUID 的唯一性；</li>
<li>不同命名空间中的 UUID 的唯一性；</li>
<li>相同命名空间中相同名字的 UUID 重复生成是相同的。</li>
</ul>
</li>
</ul>
<h3 id="UUID版本-Version-4"><a href="#UUID版本-Version-4" class="headerlink" title="UUID版本 (Version 4)"></a>UUID版本 (Version 4)</h3><ul>
<li>随机 UUID<ul>
<li>根据随机数，或者伪随机数生成 UUID。</li>
<li>这种UUID产生重复的概率是可以计算出来的。</li>
</ul>
</li>
</ul>
<h3 id="UUID版本-Version-5"><a href="#UUID版本-Version-5" class="headerlink" title="UUID版本 (Version 5)"></a>UUID版本 (Version 5)</h3><ul>
<li>基于名字的 UUID（SHA1）<ul>
<li>和版本 3 的 UUID 算法类似，只是散列值计算使用 SHA1（Secure Hash Algorithm 1）算法。</li>
</ul>
</li>
</ul>
<h2 id="UUID-版本对比"><a href="#UUID-版本对比" class="headerlink" title="UUID 版本对比"></a>UUID 版本对比</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>V1</strong></th>
<th align="center"><strong>V2</strong></th>
<th align="center"><strong>V4</strong></th>
<th align="center"><strong>V3</strong></th>
<th align="center"><strong>V5</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>长度组成</strong></td>
<td align="center">48bit 主机的 Mac 地址<br>60bit 时间戳 (13-14bit 作为时间序列)</td>
<td align="center">48bit 主机的 Mac 地址<br>40bit 域名/ID<br>28bit 时间戳（6bit 作为时间序列）</td>
<td align="center">6bit 标记版本<br>122bit 随机数</td>
<td align="center">将值与指定的命名空间拼接后，做 hash 运算，再做一些额外的固定变换得到最终的 UUID<br>V5 区别于 V3 是使用了更不容易碰撞的 hash 算法，前者 sha1，后者 md5。<br>注意值不变的情况下生成的 UUID 相同</td>
<td align="center">同前</td>
</tr>
<tr>
<td align="center"><strong>重复率</strong></td>
<td align="center">每个节点每秒钟可生成 1630 亿个，也就是说每毫秒 163 个。</td>
<td align="center">允许一个节点存在 1 万亿个 域名/ID 对象，每个对象每 7 秒产生一个 UUID。</td>
<td align="center">每秒生成 10 亿个，大约需要 85 年才有重复的可能，所以在正常应用情形下这种碰撞概率可以忽略。</td>
<td align="center">—</td>
<td align="center">—</td>
</tr>
<tr>
<td align="center"><strong>选择</strong></td>
<td align="center">有暴露MAC地址的危险，需要反向解析主机 Mac 地址。</td>
<td align="center">一般不会用到</td>
<td align="center">首选<br>最简单实用的版本</td>
<td align="center">需要根据特定的值生成，而且在值不变的情况下生成的 UUID 不变。</td>
<td align="center">同前</td>
</tr>
</tbody></table>
<h2 id="UUID-的选择"><a href="#UUID-的选择" class="headerlink" title="UUID 的选择"></a>UUID 的选择</h2><ul>
<li>从UUID的不同版本可以看出：<ul>
<li>Version 1/2适合应用于分布式计算环境下，具有高度的唯一性；</li>
<li>Version 3/5适合于一定范围内名字唯一，且需要或可能会重复生成UUID的环境下；</li>
<li>Version 4，虽然重复率可计算，但是它是最简单最方便的。</li>
</ul>
</li>
</ul>
<h2 id="UUID-的生成（PHP）"><a href="#UUID-的生成（PHP）" class="headerlink" title="UUID 的生成（PHP）"></a>UUID 的生成（PHP）</h2><ul>
<li>使用类库或者插件（常用方法）<ul>
<li>PECL::Package::uuid （插件）</li>
<li>ramsey/uuid （类库）</li>
<li>WebComandAPI</li>
</ul>
</li>
<li>使用数据库生成（一般为Version 1）<ul>
<li>mysqli_query($dbname, “select uuid() as uuid”)</li>
</ul>
</li>
<li>使用PHP方法com_create_guid()产生GUID<ul>
<li>可以使用trim(com_create_guid(), ‘{}’)来生成UUID（一般为V4版本）</li>
</ul>
</li>
<li>使用PHP自己编写生成（一般可以实现Version 1与Version 4）</li>
</ul>
<h2 id="简单范例-V1-V4"><a href="#简单范例-V1-V4" class="headerlink" title="简单范例 V1/V4"></a>简单范例 V1/V4</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * create v1uuid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> doubleam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix ps</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $median 随机位个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_v1uuid</span>(<span class="params"><span class="variable">$prefix</span> = <span class="string">&quot;uuid-v1: &quot;</span>, <span class="variable">$median</span> = <span class="number">3</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$randArr</span> = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">  <span class="variable">$ip</span> = <span class="title function_ invoke__">get_ip</span>() ?? <span class="string">&#x27;ip1.ip2.ip3.ip4&#x27;</span>;</span><br><span class="line">  <span class="variable">$ipUniqid</span> = <span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">base_convert</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$ip</span>)), <span class="number">10</span>, <span class="number">16</span>));</span><br><span class="line">  <span class="variable">$randNum</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">mt_rand</span>()));</span><br><span class="line">  <span class="variable">$mt</span> = <span class="title function_ invoke__">microtime</span>();    <span class="comment">//unix时间戳</span></span><br><span class="line">  <span class="keyword">list</span>(<span class="variable">$msc</span>, <span class="variable">$ts</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$mt</span>);</span><br><span class="line">  <span class="variable">$mscStr</span> = <span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">ltrim</span>(<span class="variable">$msc</span>, <span class="string">&quot;0.&quot;</span>));</span><br><span class="line">  <span class="variable">$tsStr</span> = <span class="title function_ invoke__">dechex</span>(<span class="variable">$ts</span>);</span><br><span class="line">  <span class="variable">$uuid</span> = <span class="variable">$tsStr</span> . <span class="string">&#x27;-&#x27;</span>; <span class="comment">//时间戳精确到秒</span></span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$mscStr</span>, <span class="number">0</span>, <span class="number">4</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="string">&#x27;1&#x27;</span> . <span class="title function_ invoke__">substr</span>(<span class="variable">$mscStr</span>, <span class="number">4</span>, <span class="number">3</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="variable">$randArr</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="number">3</span>)] . <span class="title function_ invoke__">substr</span>(<span class="variable">$ipUniqid</span>, <span class="number">0</span>, <span class="number">3</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$ipUniqid</span>, <span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$randNum</span>, <span class="number">0</span>, <span class="variable">$median</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$prefix</span> . <span class="variable">$uuid</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$uuid</span> = <span class="string">&quot;select uuid() as uuid&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">create_v1uuid</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;uuid-v1: &quot;</span> . <span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$hxb_db</span>, <span class="variable">$uuid</span>))[<span class="string">&#x27;uuid&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$hxb_db</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取ip地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String ip地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ip</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * create v4uuid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> doubleam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix ps</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_v4uuid</span>(<span class="params"><span class="variable">$prefix</span> = <span class="string">&quot;uuid-v4: &quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$randArr</span> = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">  <span class="variable">$str</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">mt_rand</span>(), <span class="literal">true</span>));</span><br><span class="line">  <span class="variable">$uuid</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">8</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">8</span>, <span class="number">4</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="string">&#x27;4&#x27;</span> . <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">12</span>, <span class="number">3</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="variable">$randArr</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="number">3</span>)] . <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">15</span>, <span class="number">3</span>) . <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  <span class="variable">$uuid</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">19</span>, <span class="number">12</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$prefix</span> . <span class="variable">$uuid</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">create_v4uuid</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;uuid-v4: &quot;</span> . <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">com_create_guid</span>(), <span class="string">&#x27;&#123;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>UUID</tag>
      </tags>
  </entry>
  <entry>
    <title>Websocket 简介</title>
    <url>/websocket/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>&emsp;&emsp;随着网际网络的发展，传统的HTTP协议已经很难满足Web应用日益复杂的需求了。近年来，随着HTML5的完善，WebSocket协议被提出，它实现了浏览器与服务器的全双工通讯，扩充套件了浏览器与服务端的通讯功能，使服务端也能主动向客户端传送资料。</p>
</div>
<span id="more"></span> 

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>WebSocket 是一种标准协议，用于在客户端和服务端之间进行双向数据传输。但它跟 HTTP 没什么关系，它是基于 TCP 的一种独立实现。是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li>
<li>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</li>
<li>在HTTP协议中，客户端与服务器端的通信是靠客户端发起请求，然后服务器端收到请求再进行回应，这个过程中，客户端是主动的，服务器端是被动的。 而Websocket协议就不一样了，它是基于TCP的一种新的网络协议，它与Http协议不同之处就在于Websocket能实现服务器端主动推送消息到客户端，服务器端与客户端都能发起通信，这一次，服务器端终于也拥有了主动权。</li>
<li>简单概括：<strong>WebSocket 是基于TCP的长连接协议，只有一个通信状态不做数据传输，属于应用层协议。</strong></li>
</ul>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p><img data-src="/images/loading.gif" data-original="/websocket/websocket1.png"></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>带有实时通讯、实时资料、订阅推送等功能的应用。</li>
</ul>
<h2 id="为什么要使用-WebSocket"><a href="#为什么要使用-WebSocket" class="headerlink" title="为什么要使用 WebSocket"></a>为什么要使用 WebSocket</h2><ul>
<li>因为HTTP1.0的生命周期是以request作为界定的，也就是一个request，一个response，对于HTTP来说，本次client与server的会话到此结束；而在HTTP1.1中，稍微有所改进，即添加了keep-alive，也就是在一个HTTP连接中可以进行多个request请求和多个response接受操作。</li>
<li>然而在实时通信中，并没有多大的作用，HTTP只能由client发起请求，server才能返回信息，即server不能主动向client推送信息，无法满足<strong>实时通信</strong>的要求。</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th><strong>WebSocket</strong></th>
<th><strong>HTTP</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>通信方向</strong></td>
<td>双向：但是第一次必须由客户端发起</td>
<td>单向：只能由客户端发送</td>
</tr>
<tr>
<td align="center"><strong>连接周期</strong></td>
<td>不会断开，可以一直通信。</td>
<td>每完成一次通信就会断开</td>
</tr>
</tbody></table>
<h2 id="WebSocket、轮询、Comet比较"><a href="#WebSocket、轮询、Comet比较" class="headerlink" title="WebSocket、轮询、Comet比较"></a>WebSocket、轮询、Comet比较</h2><ul>
<li>在WebSocket规范提出之前，开发人员若要实现这些实时性较强的功能，经常会使用折衷的解决方法：轮询（polling）和Comet技术。其实后者本质上也是一种轮询，只不过有所改进。</li>
<li>轮询是最原始的实现实时Web应用的解决方案。轮询技术要求客户端以设定的时间间隔周期性地向服务端传送请求，频繁地查询是否有新的资料改动。</li>
<li>Comet技术又可以分为长轮询和流技术。长轮询改进了上述的轮询技术，减小了无用的请求。它会为某些资料设定过期时间，当资料过期后才会向服务端传送请求；这种机制适合资料的改动不是特别频繁的情况。流技术通常是指客户端使用一个隐藏的视窗与服务端建立一个HTTP长连线，服务端会不断更新连线状态以保持HTTP长连线存活；这样的话，服务端就可以通过这条长连线主动将资料传送给客户端；流技术在大并发环境下，可能会考验到服务端的效能。</li>
<li>由于这两种技术都是基于请求-应答模式，都不算是真正意义上的实时技术；它们的每一次请求、应答，都浪费了一定流量在相同的头部信息上，并且开发复杂度也较大。若客户端想知道服务端的处理进度，不需不停的向服务端发送请求，明显地，这种方法会导致过多不必要的请求，浪费流量和服务器资源。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/websocket/websocket2.png"></p>
<ul>
<li>而当服务器完成协议升级后（ HTTP -&gt; WebSocket ），WebSocket可以进行持久化连接，即client只需进行一次握手，成功后即可持续进行数据通信，值得关注的是WebSocket实现client与server之间全双工通信，即server端有数据更新时可以主动推送给client端。解决了轮询造成的同步延迟问题。<strong>而且 WebSocket 只需要一次 HTTP 握手，服务端就能一直与客户端保持通信，直到关闭连接，这样就解决了服务器需要反复解析 HTTP 协议的问题，减少了资源的开销。</strong></li>
</ul>
<h2 id="连接原理"><a href="#连接原理" class="headerlink" title="连接原理"></a>连接原理</h2><ul>
<li>HTML5推出的WebSocket，真正实现了Web的实时通讯，使B/S模式具备了C/S模式的实时通讯能力。</li>
<li>WebSocket的原理是这样的：浏览器通过JavaScript向服务端发出建立WebSocket连线的请求，在WebSocket连线建立成功后，客户端和服务端就可以通过TCP连线传输资料。因为WebSocket连线本质上是TCP连线，不需要每次传输都带上重复的头部资料，所以它的资料传输量比轮询和Comet技术小了很多。</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul>
<li>客户端client准备向服务端发送Handshake Request</li>
<li>client建立WebSocket时向服务器端请求的信息</li>
<li>服务器获取到client请求的信息后，根据WebSocket协议对数据进行处理并返回，其中要对Sec-WebSocket-Key进行加密等操作。</li>
<li>服务端server向客户端返回Hanshake Response</li>
<li>通信建立完成，进行全双工通信(系统允许二台装置间同时进行双向资料传输。)。</li>
<li>完成通信后客户端client可以向服务端发送Close Connection</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/websocket/websocket3.png"></p>
<h2 id="程序实作"><a href="#程序实作" class="headerlink" title="程序实作"></a>程序实作</h2><h3 id="前端建立与监听"><a href="#前端建立与监听" class="headerlink" title="前端建立与监听"></a>前端建立与监听</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建websocket</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://域名+端口&quot;</span>);<span class="comment">//[http时为ws://][https时为wss://]</span></span><br><span class="line"><span class="comment">// websocket 创建成功事件</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统消息：建立连接成功&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// websocket 关闭事件</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统消息：关闭连接成功&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// websocket 接收到消息事件</span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span><br><span class="line">  <span class="keyword">switch</span> (data.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;handShake&#x27;</span>:</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;login&#x27;</span>:</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;logout&#x27;</span>:</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>:</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;system&#x27;</span>:</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// websocket 错误事件</span></span><br><span class="line">ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">evt, e</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;系统消息: 出错了，请退出重试。&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// websocket 发送事件</span></span><br><span class="line">ws.<span class="title function_">send</span>(data);</span><br><span class="line"><span class="comment">//$(document).ready(function()&#123;</span></span><br><span class="line">  <span class="comment">//console.log(websocket.readyState ? `$&#123;websocket.readyState&#125;:连接success` : `$&#123;websocket.readyState&#125;:连接ing`);//查看websocket readySate</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br></pre></td></tr></table></figure>

<h3 id="后端建立服务"><a href="#后端建立服务" class="headerlink" title="后端建立服务"></a>后端建立服务</h3><ul>
<li>原生php实践较为复杂，此处采用swoole插件简单介绍</li>
</ul>
<h4 id="Swoole"><a href="#Swoole" class="headerlink" title="Swoole"></a>Swoole</h4><ul>
<li>PHP的socket扩展是一套socket api，仅此而已。</li>
<li>Swoole，用C语言实现，它的socket是C 库的socket，更加底层可控。</li>
<li>原生php socket实践较为复杂，而使用swoole扩展可以省去很多步骤如：握手、编码、解码等等，并且简化了广播等操作，所以此处采用swoole插件简单介绍。</li>
<li>Swoole 扩展是按照 PHP 标准扩展构建的。使用 <strong>phpize</strong> 来生成编译检测脚本，<strong>./configure</strong> 来做编译配置检测，<strong>make</strong> 进行编译，<strong>make install</strong> 进行安装。(如无特殊需求，请务必编译安装 Swoole 的最新 <strong>release 版本</strong>。)</li>
</ul>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>如果当前用户不是 root，可能没有 PHP 安装目录的写权限，安装时需要 sudo 或者 su</li>
<li>如果是在 git 分支上直接 git pull 更新代码，重新编译前务必要执行 make clean</li>
<li>仅支持 Linux(2.3.32 以上内核)、FreeBSD、MacOS 三种操作系统，低版本 Linux 系统（如 CentOS 6）可以使用 RedHat 提供的 devtools 编译，参考文档， 在 Windows 平台，可使用 CygWin 或 WSL(Windows Subsystem for Linux)</li>
<li>部分扩展与 Swoole 扩展不兼容，参考 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLnN3b29sZS5jb20vIy9nZXR0aW5nX3N0YXJ0ZWQvZXh0ZW5zaW9u">扩展冲突<i class="fa fa-external-link-alt"></i></span>。</li>
</ul>
<h5 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h5><ul>
<li><strong>php-7.1</strong> 或更高版本</li>
<li><strong>gcc-4.8</strong> 或更高版本</li>
<li><strong>make</strong></li>
<li><strong>autoconf</strong></li>
</ul>
<h5 id="安装方法（源码编译安装）"><a href="#安装方法（源码编译安装）" class="headerlink" title="安装方法（源码编译安装）"></a>安装方法（源码编译安装）</h5><ul>
<li>下载源代码包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/swoole/swoole-src/releases</span><br><span class="line">https://pecl.php.net/package/swoole</span><br><span class="line">https://gitee.com/swoole/swoole/tags</span><br></pre></td></tr></table></figure>

<ul>
<li>在终端进入源码目录，执行下面的命令进行编译和安装。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//ubuntu 没有安装 phpize 可执行命令：sudo apt-get install php-dev 来安装 phpize</span><br><span class="line">cd swoole-src &amp;&amp; \</span><br><span class="line">phpize &amp;&amp; \</span><br><span class="line">./configure &amp;&amp; \</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>

<ul>
<li>启用扩展</li>
</ul>
<p>编译安装到系统成功后，需要在 <strong>php.ini</strong> 中加入一行 <strong>extension=swoole.so</strong> 来启用 Swoole 扩展。</p>
<h5 id="安装方法（PECL，注意-PECL-发布时间晚于-Github-发布时间）"><a href="#安装方法（PECL，注意-PECL-发布时间晚于-Github-发布时间）" class="headerlink" title="安装方法（PECL，注意: PECL 发布时间晚于 Github 发布时间）"></a>安装方法（PECL，注意: PECL 发布时间晚于 Github 发布时间）</h5><ul>
<li>执行以下代码</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pecl install swoole</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 Swoole 到 php.ini</li>
</ul>
<p>修改 <strong>php.ini</strong> 加入 <strong>extension=swoole.so</strong></p>
<h4 id="代码范例"><a href="#代码范例" class="headerlink" title="代码范例"></a>代码范例</h4><p>具体参数可查看 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLnN3b29sZS5jb20vIy93ZWJzb2NrZXRfc2VydmVy">swoole 方法参数文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建websocket 服务器</span></span><br><span class="line"><span class="variable">$ws</span> = <span class="keyword">new</span> <span class="title function_ invoke__">swoole_websocket_server</span>(域名, 端口);</span><br><span class="line"></span><br><span class="line"><span class="comment">//open 建立连接 $ws 服务器，$request：客户端信息</span></span><br><span class="line"><span class="variable">$ws</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;open&#x27;</span>, function(<span class="variable">$ws</span>, <span class="variable">$request</span>) &#123;</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="variable">$request</span>);</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="variable">$ws</span>-&gt;<span class="title function_ invoke__">push</span>(<span class="variable">$request</span>-&gt;fd, <span class="string">&quot;welcome to mychatroom \n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//message 接收信息</span></span><br><span class="line"><span class="variable">$ws</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;message&#x27;</span>, function(<span class="variable">$ws</span>, <span class="variable">$request</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;message: <span class="subst">$request</span>-&gt;data&quot;</span>;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="variable">$ws</span>-&gt;<span class="title function_ invoke__">push</span>(<span class="variable">$request</span>-&gt;fd, <span class="string">&quot;get it message \n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//close 关闭连接</span></span><br><span class="line"><span class="variable">$ws</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;close&#x27;</span>, function(<span class="variable">$ws</span>, <span class="variable">$request</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;close \n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line"><span class="variable">$ws</span>-&gt;<span class="title function_ invoke__">start</span>();</span><br></pre></td></tr></table></figure>

<h2 id="WebSocket-速查"><a href="#WebSocket-速查" class="headerlink" title="WebSocket 速查"></a>WebSocket 速查</h2><h3 id="WebSocket-对象"><a href="#WebSocket-对象" class="headerlink" title="WebSocket 对象"></a>WebSocket 对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Socket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url, [protocol] );</span><br></pre></td></tr></table></figure>
<p>以上代码中的第一个参数<code>url</code>, 指定连接的 URL。第二个参数<code>protocol</code>是可选的，指定了可接受的子协议。</p>
<h3 id="WebSocket-属性"><a href="#WebSocket-属性" class="headerlink" title="WebSocket 属性"></a>WebSocket 属性</h3><p>以下是 WebSocket 对象的属性。</p>
<table><tbody><tr><th>属性</th><th>描述</th></tr><tr><td>Socket.readyState</td><td><p>只读属性<b>readyState</b>表示连接状态，可以是以下值：</p><ul><li><p>0-表示连接尚未建立。</p></li><li><p>1-表示连接已建立，可以进行通信。</p></li><li><p>2-表示连接正在进行关闭。</p></li><li><p>3-表示连接已经关闭或者连接不能打开。</p></li></ul></td></tr><tr><td>Socket.bufferedAmount</td><td><p>只读属性<b>bufferedAmount</b>已被send()放入正在队列中等待传输，但是还没有发出的UTF-8文本字节数。</p></td></tr></tbody></table>

<h3 id="WebSocket-事件"><a href="#WebSocket-事件" class="headerlink" title="WebSocket 事件"></a>WebSocket 事件</h3><p>以下是 WebSocket 对象的相关事件。</p>
<table><tbody><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr><tr><td>open</td><td>Socket.onopen</td><td>连接建立时触发</td></tr><tr><td>message</td><td>Socket.onmessage</td><td>客户端接收服务端数据时触发</td></tr><tr><td>error</td><td>Socket.onerror</td><td>通信发生错误时触发</td></tr><tr><td>close</td><td>Socket.onclose</td><td>连接关闭时触发</td></tr></tbody></table>

<h3 id="WebSocket-方法"><a href="#WebSocket-方法" class="headerlink" title="WebSocket 方法"></a>WebSocket 方法</h3><p>以下是 WebSocket 对象的相关方法。</p>
<table><tbody><tr><th>方法</th><th>描述</th></tr><tr><td>Socket.send()</td><td><p>使用连接发送数据</p></td></tr><tr><td>Socket.close()</td><td><p>关闭连接</p></td></tr></tbody></table>

<h3 id="监听websocket事件"><a href="#监听websocket事件" class="headerlink" title="监听websocket事件"></a>监听websocket事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Websocket</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;open&#x27;</span>,<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img data-src="/images/loading.gif" data-original="/websocket/websocket4.png"></p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>BiugleJS</title>
    <url>/biuglejs/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>BiugleJS-只罗列部分代码(2019.12)</p>
</div>
<span id="more"></span> 

<h2 id="biugleJS-—-CSS"><a href="#biugleJS-—-CSS" class="headerlink" title="biugleJS — CSS"></a>biugleJS — CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> autor: doubleam</span></span><br><span class="line"><span class="comment"> introduction: biugle.css</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">/* http://meyerweb.com/eric/tools/css/reset/ </span></span><br><span class="line"><span class="comment">   v2.0 | 20110126</span></span><br><span class="line"><span class="comment">   License: none (public domain)</span></span><br><span class="line"><span class="comment">   doubleam get 20191126</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 使用bootstrap的话，他默认使用了normalize.css，二者有些差别，不过你可以后引用bootstrap，也可以不引用此文件(reset.css) */</span></span><br><span class="line"><span class="comment">/* 推荐引入：</span></span><br><span class="line"><span class="comment">    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script type=&quot;text/javascript&quot; src=&quot;bootstrap/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script type=&quot;text/javascript&quot; src=&quot;biugleJS/js/biugle.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;biugleJS/css/biugle.min.css&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;fontawesome/css/fontawesome.min.css&quot;&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, embed, </span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, output, ruby, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, </span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">  <span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* biugle */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-row</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-row-re</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-col</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-col-re</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-row-center</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-col-center</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* others */</span></span><br><span class="line"><span class="selector-class">.biu-360</span>&#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: all;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1.35s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-360</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  -<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-666</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">666turn</span>);</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-property</span>: all;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">59s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);</span><br><span class="line">  -moz-<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);<span class="comment">/* Firefox 4 */</span></span><br><span class="line">  -webkit-<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">  -o-<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);<span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">code</span><span class="selector-pseudo">:hover</span>,pre<span class="selector-pseudo">:hover</span>,<span class="selector-tag">samp</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">kbd</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">menu</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">nav</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">footer</span><span class="selector-pseudo">:hover</span>,ruby<span class="selector-pseudo">:hover</span>,rp<span class="selector-pseudo">:hover</span>,rt<span class="selector-pseudo">:hover</span>,<span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:checked</span>+<span class="selector-tag">label</span>&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;number&#x27;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* unimportant */</span></span><br><span class="line"><span class="selector-class">.biu-footer</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5%</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-footer</span>&gt;<span class="selector-tag">span</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-footer</span>&gt;<span class="selector-tag">span</span>&gt;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: chocolate;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.biu-dialog</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#dark-theme-img</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3vw</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">1.5vw</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#dark-theme-img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3.5vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3.5vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">999px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#dark-theme-img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* CHROME浏览器中自定义滚动条样式 */</span></span><br><span class="line"><span class="comment">/* 滚动条的宽度 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">0.6vw</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">0.6vw</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ::-webkit-scrollbar-track-piece滚动条凹槽的颜色，还可以设置边框属性。 */</span></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>:inset <span class="number">0</span> <span class="number">0</span> <span class="number">0.6rem</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#888</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track-piece&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 滚动小条的设置 */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123; </span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>:inset <span class="number">0</span> <span class="number">0</span> <span class="number">0.6rem</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#2f2f2f</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:hover&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:chocolate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="biugleJS-—-JS"><a href="#biugleJS-—-JS" class="headerlink" title="biugleJS — JS"></a>biugleJS — JS</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> autor: doubleam</span></span><br><span class="line"><span class="comment"> introduction: biugle.js</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ---------------BiugleJS START---------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">format</span> = <span class="keyword">function</span> (<span class="params">fmt = <span class="string">&quot;yyyy-mm-dd hh:ii:ss&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">&#x27;m+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>, </span><br><span class="line">    <span class="string">&#x27;d+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getDate</span>(),</span><br><span class="line">    <span class="string">&#x27;h+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getHours</span>(),</span><br><span class="line">    <span class="string">&#x27;i+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getMinutes</span>(), </span><br><span class="line">    <span class="string">&#x27;s+&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getSeconds</span>(),</span><br><span class="line">    <span class="string">&#x27;Q+&#x27;</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="variable language_">this</span>.<span class="title function_">getMonth</span>() + <span class="number">3</span>) / <span class="number">3</span>), </span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="variable language_">this</span>.<span class="title function_">getMilliseconds</span>()</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.<span class="title function_">test</span>(fmt)) &#123;</span><br><span class="line">    fmt = fmt.<span class="title function_">replace</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>, (<span class="variable language_">this</span>.<span class="title function_">getFullYear</span>() + <span class="string">&quot;&quot;</span>).<span class="title function_">substr</span>(<span class="number">4</span> - <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(&#x27;</span> + k + <span class="string">&#x27;)&#x27;</span>).<span class="title function_">test</span>(fmt)) &#123;</span><br><span class="line">      fmt = fmt.<span class="title function_">replace</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>, (<span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span> === <span class="number">1</span>) ? (o[k]) : ((<span class="string">&quot;00&quot;</span> + o[k]).<span class="title function_">substr</span>((<span class="string">&quot;&quot;</span> + o[k]).<span class="property">length</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Biugle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Biugle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _proto = <span class="title class_">Biugle</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 人性化时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">timeSince</span> = <span class="function">(<span class="params">date, longago = <span class="literal">false</span>, formater = <span class="string">&quot;yyyy-mm-dd hh:ii:ss&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    date.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>); <span class="comment">// 虽然 win 浏览器两种符号都可以，但是需兼容 ios。</span></span><br><span class="line">    <span class="keyword">let</span> dateTS = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">let</span> seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="keyword">new</span> <span class="title class_">Date</span>() - dateTS) / <span class="number">1000</span>); <span class="comment">// 看情况是否`+-8*3600`（8小时）</span></span><br><span class="line">    <span class="keyword">let</span> interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">    <span class="keyword">if</span> (longago) &#123;</span><br><span class="line">      interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">30</span> * <span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">      <span class="keyword">if</span> (interval &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> dateTS.<span class="title function_">format</span>(formater);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> interval + <span class="string">&quot; 月前&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">      <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> interval + <span class="string">&quot; 周前&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> dateTS.<span class="title function_">format</span>(formater);</span><br><span class="line">    &#125;</span><br><span class="line">    interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> interval + <span class="string">&quot; 天前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">3600</span>);</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> interval + <span class="string">&quot; 小时前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> interval + <span class="string">&quot; 分钟前&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;刚刚&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 时间格式化</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">timeFormat</span> = <span class="function">(<span class="params">date, formater = <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dateTS = <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span> dateTS.<span class="title function_">format</span>(formater || <span class="string">&#x27;yyyy-mm-dd hh:ii&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当前时间 使用此JS后可以使用 newDate().format() 实现</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">nowTime</span> = <span class="function">(<span class="params">type = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">let</span> hour = date.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">let</span> minute = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">let</span> second = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">    hour = (hour &lt; <span class="number">10</span>) ? (<span class="string">&quot;0&quot;</span> + hour) : hour;</span><br><span class="line">    minute = (minute &lt; <span class="number">10</span>) ? (<span class="string">&quot;0&quot;</span> + minute) : minute;</span><br><span class="line">    second = (second &lt; <span class="number">10</span>) ? (<span class="string">&quot;0&quot;</span> + second) : second;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>  year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day + <span class="string">&quot; &quot;</span> + hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>  year + <span class="string">&quot;/&quot;</span> + month + <span class="string">&quot;/&quot;</span> + day + <span class="string">&quot; &quot;</span> + hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span> + <span class="string">&quot; &quot;</span> + hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 过去某个点到现在过去的时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">date2Now</span> = <span class="function">(<span class="params">date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> run = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">let</span> runTime = (now - run) / <span class="number">1000</span>,</span><br><span class="line">            days = <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>),</span><br><span class="line">            hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * days)),</span><br><span class="line">            minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * days) - (<span class="number">60</span> * hours)),</span><br><span class="line">            seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((now - run) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * days) - (<span class="number">60</span> * <span class="number">60</span> * hours) - (<span class="number">60</span> * minutes));</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">String</span>(hours).<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      hours = <span class="string">&quot;0&quot;</span> + hours;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">String</span>(minutes).<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      minutes = <span class="string">&quot;0&quot;</span> + minutes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">String</span>(seconds).<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      seconds = <span class="string">&quot;0&quot;</span> + seconds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> runTimes = &#123;<span class="string">&quot;days&quot;</span>: days, <span class="string">&quot;hours&quot;</span>: hours, <span class="string">&quot;minutes&quot;</span>: minutes, <span class="string">&quot;seconds&quot;</span>: seconds&#125;;</span><br><span class="line">    <span class="keyword">return</span> runTimes;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 现在到未来某个点的剩余时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">now2Date</span> = <span class="function">(<span class="params">date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> startDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">let</span> t = endDate.<span class="title function_">getTime</span>() - startDate.<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">0</span>,</span><br><span class="line">            h = <span class="number">0</span>,</span><br><span class="line">            m = <span class="number">0</span>,</span><br><span class="line">            s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / <span class="number">1000</span> / <span class="number">3600</span> / <span class="number">24</span>);</span><br><span class="line">      h = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">      m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">      s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / <span class="number">1000</span> % <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> hasTimes = &#123;<span class="string">&quot;days&quot;</span>: d, <span class="string">&quot;hours&quot;</span>: h, <span class="string">&quot;minutes&quot;</span>: m, <span class="string">&quot;seconds&quot;</span>: s&#125;;</span><br><span class="line">    <span class="keyword">return</span> hasTimes;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将时间字符串转换为时间差距分钟</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">getTimeSinceMinute</span> = <span class="function">(<span class="params">date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dateTS = <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">    <span class="keyword">let</span> seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="keyword">new</span> <span class="title class_">Date</span>() - dateTS) / <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">60</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 控制台打印信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; siteName 网站名称</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; siteUrl 网站地址</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; email 联系邮箱</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; info 网站简介</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">consoleInfo</span> = <span class="function">(<span class="params">siteName = <span class="string">&quot;biugle&quot;</span>, siteUrl = <span class="string">&quot;https://www.biugle.cn&quot;</span>, email = <span class="string">&quot;biugle@yeah.net&quot;</span>, info = <span class="string">&quot;hello biugle!&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c网站名称%c<span class="subst">$&#123;siteName&#125;</span>`</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#3fa9f5;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c网站地址%c<span class="subst">$&#123;siteUrl&#125;</span>`</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#00bc12;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c联系邮箱%c<span class="subst">$&#123;email&#125;</span>`</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#ff9900;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c<span class="subst">$&#123;info&#125;</span>`</span>, <span class="string">&quot;line-height:28px;padding:5px;color:#fff;font-weight:bolder;font-size:16px;background-color:chocolate;color:#fff;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">console</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">log</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c页面加载消耗了 %c<span class="subst">$&#123;(<span class="built_in">Math</span>.round(<span class="number">100</span> * performance.now()) / <span class="number">100</span> / <span class="number">1e3</span>).toFixed(<span class="number">2</span>)&#125;</span>s`</span>, <span class="string">&quot;background:#fff;color:#333;text-shadow: 0 0 2px #eee, 0 0 3px #eee, 0 0 3px #eee, 0 0 2px #eee, 0 0 3px #eee;&quot;</span>, <span class="string">&quot;color:tomato;font-weight:bolder;&quot;</span>);</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;access&quot;</span>) || <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;access&quot;</span>, (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>());</span><br><span class="line">      <span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;access&quot;</span>)));</span><br><span class="line">      <span class="keyword">let</span> o = <span class="string">`<span class="subst">$&#123;e.getFullYear()&#125;</span>年<span class="subst">$&#123;e.getMonth() + <span class="number">1</span>&#125;</span>月<span class="subst">$&#123;e.getDate()&#125;</span>日`</span>;</span><br><span class="line">      <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;hit&quot;</span>) ? t = <span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;hit&quot;</span>)) : <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;hit&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;hit&quot;</span>, ++t);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c这是你自 %c<span class="subst">$&#123;o&#125;</span> %c以来第 %c<span class="subst">$&#123;t&#125;</span> %c次在本站打开控制台，你想知道什么秘密吗～`</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;color:chocolate;font-weight:bolder;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;color:chocolate;font-weight:bolder;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 选项卡离开提示</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; leaveInfo 离开时显示内容</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; comeInfo 进入时显示内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">setTitleStatus</span> = <span class="function">(<span class="params">leaveInfo = <span class="string">&quot; (╥﹏╥) 你快回来 ~ &quot;</span>, comeInfo = <span class="string">&quot; (∩_∩) 欢迎回来 ~ &quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">OriginTitle</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line">    <span class="keyword">let</span> titleTime;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = leaveInfo;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = comeInfo + <span class="title class_">OriginTitle</span>;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitle</span>;</span><br><span class="line">        &#125;, <span class="number">1500</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加复制内容</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; content 内容来源、版权信息等。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">setCopyEvent</span> = <span class="function">(<span class="params">content = <span class="string">&quot;www.biugle.cn&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> clipboardData = event.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">      <span class="keyword">if</span> (!clipboardData) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line">      <span class="keyword">if</span> (text) &#123;</span><br><span class="line">        event.<span class="title function_">preventDefault</span>();</span><br><span class="line">        clipboardData.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, text + <span class="string">`\n\n\n<span class="subst">$&#123;content&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 格式化字符串，转实体字符，去前后空格。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; str 待格式化字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">String</span>&#125; 格式化后的字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">strFormat</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    str = str.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">textContent</span> = str;</span><br><span class="line">    <span class="keyword">let</span> formatString = div.<span class="property">innerHTML</span>;</span><br><span class="line">    <span class="keyword">return</span> formatString;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 去除空格</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; str 待去空格的字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; type 1：去前后空格，2：去前空格，3：去后空格，4：去所有空格</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">String</span>&#125; 格式化后的字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">trim</span> = <span class="function">(<span class="params">str, type = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;ba&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str = str.<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str = str.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/^[\s]*/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str = str.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/[\s]*$/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str = str.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 大小写转换</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; str 待转换的字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; type 1：全部大写，2：全部小写，3：首字母大写，4：首页母小写</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">String</span>&#125; 转换后的字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">charSet</span> = <span class="function">(<span class="params">str, type = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> str.<span class="title function_">toString</span>().<span class="title function_">toUpperCase</span>();</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> str.<span class="title function_">toString</span>().<span class="title function_">toLowerCase</span>();</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> str.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/^(\w)(\w+)/</span>, <span class="keyword">function</span> (<span class="params">v, v1, v2</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> v1.<span class="title function_">toUpperCase</span>() + v2.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> str.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/^(\w)(\w+)/</span>, <span class="keyword">function</span> (<span class="params">v, v1, v2</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> v1.<span class="title function_">toLowerCase</span>() + v2.<span class="title function_">toUpperCase</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将资料放到指定的 HTML 当内容，class name 自动将_转换为-</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">dataTo</span> = <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    $(key.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/_/g</span>, <span class="string">&#x27;-&#x27;</span>)).<span class="title function_">html</span>(value).<span class="title function_">val</span>(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取数组或者对象的第一个值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">firstVal</span> = <span class="function">(<span class="params">objOarray</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> objOarray) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = objOarray[key];</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取一定范围的随机数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">getRandNum</span> = <span class="function">(<span class="params">min = <span class="number">0</span>, max = <span class="number">10</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(min + <span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 随机生成颜色</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">getRandColor</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + (<span class="string">&#x27;00000&#x27;</span> + (<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0x1000000</span> &lt;&lt; <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">6</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 插入某元素到指定Element之前</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">insertAfter</span> = <span class="function">(<span class="params">newElement, targetElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> parent = targetElement.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="keyword">if</span> (parent.<span class="property">lastElementChild</span> === targetElement) &#123;</span><br><span class="line">      parent.<span class="title function_">appendChild</span>(newElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.<span class="title function_">insertBefore</span>(newElement, targetElement.<span class="property">nextElementSibling</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置cookie</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">setCookie</span> = <span class="function">(<span class="params">name, value, days</span>) =&gt;</span> &#123;</span><br><span class="line">    days = days || <span class="number">30</span>; <span class="comment">//没有设置有效期，默认有效期是30天</span></span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前日期</span></span><br><span class="line">    exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() + days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">//设置过期日期</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + <span class="built_in">escape</span>(value) + <span class="string">&quot;;expires=&quot;</span> + exp.<span class="title function_">toGMTString</span>() + <span class="string">&quot;;path=/&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取cookie</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">getCookie</span> = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr, reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^| )&quot;</span> + name + <span class="string">&quot;=([^;]*)(;|$)&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr === <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">match</span>(reg))</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除cookie</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">delCookie</span> = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> cval = <span class="title function_">getCookie</span>(name);</span><br><span class="line">    <span class="keyword">if</span> (cval !== <span class="literal">null</span>)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + cval + <span class="string">&quot;;expires=&quot;</span> + exp.<span class="title function_">toGMTString</span>() + <span class="string">&quot;;path=/&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取浏览器类型和版本</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">getExplore</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sys = &#123;&#125;,</span><br><span class="line">            ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>(),</span><br><span class="line">            s;</span><br><span class="line">    (s = ua.<span class="title function_">match</span>(<span class="regexp">/rv:([\d.]+)\) like gecko/</span>)) ? sys.<span class="property">ie</span> = s[<span class="number">1</span>] :</span><br><span class="line">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/msie ([\d\.]+)/</span>)) ? sys.<span class="property">ie</span> = s[<span class="number">1</span>] :</span><br><span class="line">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/edge\/([\d\.]+)/</span>)) ? sys.<span class="property">edge</span> = s[<span class="number">1</span>] :</span><br><span class="line">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/firefox\/([\d\.]+)/</span>)) ? sys.<span class="property">firefox</span> = s[<span class="number">1</span>] :</span><br><span class="line">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/(?:opera|opr).([\d\.]+)/</span>)) ? sys.<span class="property">opera</span> = s[<span class="number">1</span>] :</span><br><span class="line">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/chrome\/([\d\.]+)/</span>)) ? sys.<span class="property">chrome</span> = s[<span class="number">1</span>] :</span><br><span class="line">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/version\/([\d\.]+).*safari/</span>)) ? sys.<span class="property">safari</span> = s[<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 根据关系进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (sys.<span class="property">ie</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;IE: &#x27;</span> + sys.<span class="property">ie</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sys.<span class="property">edge</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;EDGE: &#x27;</span> + sys.<span class="property">edge</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sys.<span class="property">firefox</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;Firefox: &#x27;</span> + sys.<span class="property">firefox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sys.<span class="property">chrome</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;Chrome: &#x27;</span> + sys.<span class="property">chrome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sys.<span class="property">opera</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;Opera: &#x27;</span> + sys.<span class="property">opera</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sys.<span class="property">safari</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&#x27;Safari: &#x27;</span> + sys.<span class="property">safari</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UnkonwnExplore&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取操作系统类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">getOS</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userAgent = <span class="string">&#x27;navigator&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> &amp;&amp; <span class="string">&#x27;userAgent&#x27;</span> <span class="keyword">in</span> navigator &amp;&amp; navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>() || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> vendor = <span class="string">&#x27;navigator&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> &amp;&amp; <span class="string">&#x27;vendor&#x27;</span> <span class="keyword">in</span> navigator &amp;&amp; navigator.<span class="property">vendor</span>.<span class="title function_">toLowerCase</span>() || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> appVersion = <span class="string">&#x27;navigator&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> &amp;&amp; <span class="string">&#x27;appVersion&#x27;</span> <span class="keyword">in</span> navigator &amp;&amp; navigator.<span class="property">appVersion</span>.<span class="title function_">toLowerCase</span>() || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/mac/i</span>.<span class="title function_">test</span>(appVersion)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;MacOSX&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/win/i</span>.<span class="title function_">test</span>(appVersion)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Windows&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/linux/i</span>.<span class="title function_">test</span>(appVersion)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Linux&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/iphone/i</span>.<span class="title function_">test</span>(userAgent) || <span class="regexp">/ipad/i</span>.<span class="title function_">test</span>(userAgent) || <span class="regexp">/ipod/i</span>.<span class="title function_">test</span>(userAgent)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Ios&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/android/i</span>.<span class="title function_">test</span>(userAgent)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Android&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/win/i</span>.<span class="title function_">test</span>(appVersion) &amp;&amp; <span class="regexp">/phone/i</span>.<span class="title function_">test</span>(userAgent)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;WindowsPhone&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UnknowOS&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为邮箱地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isEmail</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为身份证号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isIdCard</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^(^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$)|(^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d&#123;4&#125;)|\d&#123;3&#125;[Xx])$)$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为手机号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isPhoneNum</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为URL地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isUrl</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/[-a-zA-Z0-9@:%._\+~#=]&#123;2,256&#125;\.[a-z]&#123;2,6&#125;\b([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)/i</span>.<span class="title function_">test</span>(str);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * rmb现金额转大写</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">rmbUpper</span> = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fraction = [<span class="string">&#x27;角&#x27;</span>, <span class="string">&#x27;分&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> digit = [</span><br><span class="line">      <span class="string">&#x27;零&#x27;</span>, <span class="string">&#x27;壹&#x27;</span>, <span class="string">&#x27;贰&#x27;</span>, <span class="string">&#x27;叁&#x27;</span>, <span class="string">&#x27;肆&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;伍&#x27;</span>, <span class="string">&#x27;陆&#x27;</span>, <span class="string">&#x27;柒&#x27;</span>, <span class="string">&#x27;捌&#x27;</span>, <span class="string">&#x27;玖&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">let</span> unit = [</span><br><span class="line">      [<span class="string">&#x27;元&#x27;</span>, <span class="string">&#x27;万&#x27;</span>, <span class="string">&#x27;亿&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;拾&#x27;</span>, <span class="string">&#x27;佰&#x27;</span>, <span class="string">&#x27;仟&#x27;</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">let</span> head = n &lt; <span class="number">0</span> ? <span class="string">&#x27;欠&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    n = <span class="title class_">Math</span>.<span class="title function_">abs</span>(n);</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> fraLen = fraction.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fraLen; i++) &#123;</span><br><span class="line">      s += (digit[<span class="title class_">Math</span>.<span class="title function_">floor</span>(n * <span class="number">10</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, i)) % <span class="number">10</span>] + fraction[i]).<span class="title function_">replace</span>(<span class="regexp">/零./</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s = s || <span class="string">&#x27;整&#x27;</span>;</span><br><span class="line">    n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].<span class="property">length</span> &amp;&amp; n &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> p = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].<span class="property">length</span> &amp;&amp; n &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">        p = digit[n % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;</span><br><span class="line">        n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      s = p.<span class="title function_">replace</span>(<span class="regexp">/(零.)*零$/</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/^$/</span>, <span class="string">&#x27;零&#x27;</span>) + unit[<span class="number">0</span>][i] + s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head + s.<span class="title function_">replace</span>(<span class="regexp">/(零.)*零元/</span>, <span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/(零.)+/g</span>, <span class="string">&#x27;零&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/^整$/</span>, <span class="string">&#x27;零元整&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 除法函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">div</span> = <span class="function">(<span class="params">div1, div2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> div1FloatLen = <span class="number">0</span>, div2FloatLen = <span class="number">0</span>, tempDiv1 = div1.<span class="title function_">toString</span>(), tempDiv2 = div2.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      div1FloatLen = tempDiv1.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;<span class="comment">//获取小数长度</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      div2FloatLen = tempDiv2.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title class_">Number</span>(tempDiv1.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) / <span class="title class_">Number</span>(tempDiv2.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>))) * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, div2FloatLen - div1FloatLen);<span class="comment">//转化整数计算再使用科学计数法转化小数位</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 乘法函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">times</span> = <span class="function">(<span class="params">mul1, mul2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> mulFloatLen = <span class="number">0</span>, tempMul1 = mul1.<span class="title function_">toString</span>(), tempMul2 = mul2.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      mulFloatLen += tempMul1.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      mulFloatLen += tempMul2.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(tempMul1.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) * <span class="title class_">Number</span>(tempMul2.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) / <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, mulFloatLen);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加法函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">add</span> = <span class="function">(<span class="params">add1, add2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> add1FloatLen = <span class="number">0</span>, add2FloatLen = <span class="number">0</span>, multiple = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      add1FloatLen = add1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      add2FloatLen = add2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    multiple = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(add1FloatLen, add2FloatLen));</span><br><span class="line">    <span class="keyword">return</span> (add1 * multiple + add2 * multiple) / multiple;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 减法函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">sub</span> = <span class="function">(<span class="params">sub1, sub2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sub1FloatLen = <span class="number">0</span>, sub2FloatLen = <span class="number">0</span>, multiple = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      sub1FloatLen = sub1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      sub2FloatLen = sub2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    multiple = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(sub1FloatLen, sub2FloatLen));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(((sub1 * multiple - sub2 * multiple) / multiple));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 四舍五入</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">round</span> = <span class="function">(<span class="params">number, d</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tempNum = number + <span class="string">&quot;&quot;</span>;<span class="comment">//example-0.155</span></span><br><span class="line">    d = (!d) ? <span class="number">0</span> : d;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">0</span>) &#123;<span class="comment">//保留0位小数直接取整就好了</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tempNum.<span class="title function_">indexOf</span>(<span class="string">&quot;.&quot;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">      tempNum += <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempNum += <span class="keyword">new</span> <span class="title class_">Array</span>(d + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot;0&quot;</span>);<span class="comment">//-0.15500</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^(-|\\+)?(\\d+(\\.\\d&#123;0,&quot;</span> + (d + <span class="number">1</span>) + <span class="string">&quot;&#125;)?)\\d*$&quot;</span>).<span class="title function_">test</span>(tempNum)) &#123;<span class="comment">//  【/^(-|\+)?(\d+(\.\d&#123;0,3&#125;)?)\d*$/】</span></span><br><span class="line">      <span class="keyword">let</span> tempStr = <span class="string">&quot;0&quot;</span> + <span class="title class_">RegExp</span>.<span class="property">$2</span>, pm = <span class="title class_">RegExp</span>.<span class="property">$1</span>, a = <span class="title class_">RegExp</span>.<span class="property">$3</span>.<span class="property">length</span>, flag = <span class="literal">true</span>; <span class="comment">//tempStr：数值部分（0.155）加0是为了防止产生进位，pm：正负号（-），a：小数点+小数（.155）长度为上一条正则表达式得出的结果（此处为&#123;0,3&#125;），flag：首位0是否未产生进位。</span></span><br><span class="line">      <span class="keyword">if</span> (a == d + <span class="number">1</span> + <span class="number">1</span>) &#123;<span class="comment">//一个1为小数点，一个1为需要多一位数字才能判断，此处判断是否有足够的数字来得出结果。</span></span><br><span class="line">        a = tempStr.<span class="title function_">match</span>(<span class="regexp">/\d/g</span>);<span class="comment">//[&quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;5&quot;, &quot;5&quot;]</span></span><br><span class="line">        <span class="keyword">let</span> aLen = a.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(a[aLen - <span class="number">1</span>]) &gt; <span class="number">4</span>) &#123;<span class="comment">//保留小数的后一位是否大于4</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = aLen - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            a[i] = <span class="built_in">parseInt</span>(a[i]) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="number">10</span>) &#123;</span><br><span class="line">              a[i] = <span class="number">0</span>;</span><br><span class="line">              flag = (i != <span class="number">1</span>);<span class="comment">//判断首位0是否未产生进位，false为产生了进位，后续不裁剪首位0（因为i==1时，首位0发生了变化，0变为1）。</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tempStr = a.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(\\d+)(\\d&#123;&quot;</span> + d + <span class="string">&quot;&#125;)\\d$&quot;</span>), <span class="string">&quot;$1.$2&quot;</span>);<span class="comment">//【/(\d+)(\d&#123;2&#125;)\d$/】$1至少包含一个数字，$2必须为保留的小数位，结尾必须有一个数字，所以如果00155，d=2,结果为00.15，若d=1，则结果为001.5。</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;<span class="comment">//如果首位0未产生进位，去掉多余的0。</span></span><br><span class="line">        tempStr = tempStr.<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseFloat</span>((pm + tempStr).<span class="title function_">replace</span>(<span class="regexp">/\.$/</span>, <span class="string">&quot;&quot;</span>));<span class="comment">//返回浮点数，以防万一去掉结尾的小数点（.）。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数组最大值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">arrMax</span> = <span class="function">(<span class="params">arr = [], s2n = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (s2n) ? ((<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(num))) ? -<span class="title class_">Infinity</span> : <span class="title class_">Number</span>(num)) : ((<span class="variable language_">this</span>.<span class="title function_">isNumber</span>(num)) ? <span class="title class_">Number</span>(num) : -<span class="title class_">Infinity</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数组最小值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">arrMin</span> = <span class="function">(<span class="params">arr = [], s2n = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (s2n) ? ((<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(num))) ? <span class="title class_">Infinity</span> : <span class="title class_">Number</span>(num)) : ((<span class="variable language_">this</span>.<span class="title function_">isNumber</span>(num)) ? <span class="title class_">Number</span>(num) : <span class="title class_">Infinity</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数组数字排序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">arrNumSort</span> = <span class="function">(<span class="params">arr = [], desc = <span class="literal">false</span>, <span class="keyword">from</span> = <span class="literal">true</span>, s2n = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">if</span> (s2n) &#123;</span><br><span class="line">      arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (<span class="built_in">isNaN</span>(item)) ? arr[index] = item : newArr.<span class="title function_">push</span>(<span class="title class_">Number</span>(item));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (<span class="title function_">isNumber</span>(item)) ? newArr.<span class="title function_">push</span>(item) : arr[index] = item;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = (<span class="keyword">from</span>) ? <span class="title class_">Array</span>.<span class="title function_">from</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(newArr)]).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;) : newArr.<span class="title function_">sort</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (desc) ? result.<span class="title function_">reverse</span>() : result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数组字符串排序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">arrStrSort</span> = <span class="function">(<span class="params">arr = [], desc = <span class="literal">false</span>, <span class="keyword">from</span> = <span class="literal">true</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>(<span class="title function_">isString</span>(item)) ? newArr.<span class="title function_">push</span>(item) : arr[index] = item;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> result = (<span class="keyword">from</span>) ? <span class="title class_">Array</span>.<span class="title function_">from</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(newArr)]).<span class="title function_">sort</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a.<span class="property">length</span> - b.<span class="property">length</span>;</span><br><span class="line">    &#125;) : newArr.<span class="title function_">sort</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a.<span class="property">length</span> - b.<span class="property">length</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (desc) ? result.<span class="title function_">reverse</span>() : result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isString</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title function_">typeof</span> (str) === <span class="string">&#x27;string&#x27;</span>) &amp;&amp; str.<span class="property">constructor</span> === <span class="title class_">String</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否日期</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isDate</span> = <span class="function">(<span class="params">date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title function_">typeof</span> (date) === <span class="string">&#x27;object&#x27;</span>) &amp;&amp; date.<span class="property">constructor</span> === <span class="title class_">Date</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否对象 此处应该增加function判断</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isObject</span> = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title function_">typeof</span> (obj) === <span class="string">&#x27;object&#x27;</span>) &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否数组 Array.isArray</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isArray</span> = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title function_">typeof</span> (arr) === <span class="string">&#x27;object&#x27;</span>) &amp;&amp; arr.<span class="property">constructor</span> === <span class="title class_">Array</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否数值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isNumber</span> = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title function_">typeof</span> (num) === <span class="string">&#x27;number&#x27;</span>) &amp;&amp; num.<span class="property">constructor</span> === <span class="title class_">Number</span> &amp;&amp; !<span class="built_in">isNaN</span>(num);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 严格判断是否为整数或者小数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">mixed</span>&#125; originValue 原始变量</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; strict 是否严格匹配</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; more 是否返回更多信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@name</span> Biugle#isDigit</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@function</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isDigit</span> = <span class="function">(<span class="params">originValue, strict = <span class="literal">false</span>, more = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> regPattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^(\\-?[1-9]\\d*|0)(\\.\\d*[1-9])?$&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> value = strict ? originValue : <span class="built_in">parseFloat</span>(originValue), result = regPattern.<span class="title function_">test</span>(value), integer, decimal;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      integer = <span class="built_in">parseInt</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>);</span><br><span class="line">      decimal = <span class="built_in">parseFloat</span>(<span class="title class_">RegExp</span>.<span class="property">$2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> more ? &#123; result, value, integer, decimal, originValue &#125; : result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否 Function</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">mixed</span>&#125; func 传入值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@name</span> Biugle#isFunction</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@function</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">isFunction</span> = <span class="function">(<span class="params">func</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// (&#123;&#125;) instanceof Object; // true</span></span><br><span class="line">    <span class="comment">// ([]) instanceof Object; // true</span></span><br><span class="line">    <span class="comment">// ([]) instanceof Array; // true</span></span><br><span class="line">    <span class="comment">// (new Date()) instanceof Object; // true</span></span><br><span class="line">    <span class="comment">// (new Date()) instanceof Date; // true</span></span><br><span class="line">    <span class="keyword">return</span> func <span class="keyword">instanceof</span> <span class="title class_">Function</span>;</span><br><span class="line">    <span class="comment">// typeof func === &#x27;function&#x27; &amp;&amp; obj.constructor === Function;</span></span><br><span class="line">    <span class="comment">// Object.prototype.toString.call(func) === &#x27;[object Function]&#x27;;</span></span><br><span class="line">    <span class="comment">// Function.prototype.isPrototypeOf(func); // true</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断变量类型</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">mixed</span>&#125; val 传入变量</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@name</span> Biugle#typeof</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@function</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  _proto.<span class="property">typeof</span> = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> typeStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(val);</span><br><span class="line">    <span class="comment">// return typeStr?.replace(/\[|\]/g, &#x27;&#x27;)?.split(&#x27; &#x27;)?.[1]?.toLowerCase();//待浏览器支持，目前兼容性较差。</span></span><br><span class="line">    <span class="keyword">return</span> typeStr.<span class="title function_">replace</span>(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>].<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否为空</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">mixed</span>&#125; biugle 传入变量</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@name</span> Biugle#empty</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@function</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">empty</span> = <span class="function">(<span class="params">biugle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> biugle === <span class="string">&quot;boolean&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//此处方法定义布尔型不算空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if (Object.is(NaN, biugle)) &#123;</span></span><br><span class="line">    <span class="comment">//   return true; //此处方法定义 NaN 算空，下面 !biugle 也可以判断。</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (biugle === <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检验字符串类型的 null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (biugle === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检验字符串类型的 undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!biugle &amp;&amp; biugle !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检验 undefined 和 null &quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(biugle) &amp;&amp; biugle.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检验空数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(biugle) === <span class="string">&quot;[object Object]&quot;</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(biugle).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检验空对象，仅判断普通对象，不考虑字符串对象、时间、等等。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 复制事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">copyContent</span> = <span class="function">(<span class="params">targetDom, addMsg = <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Msg</span> = (!targetDom.<span class="property">innerText</span>) ? targetDom.<span class="property">value</span> : targetDom.<span class="property">innerText</span>;</span><br><span class="line">    <span class="keyword">let</span> tempDom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> info = <span class="string">&quot;复制成功！&quot;</span>;</span><br><span class="line">    tempDom.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">    tempDom.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&quot;-5201314px&quot;</span>;</span><br><span class="line">    tempDom.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&quot;-5201314px&quot;</span>;</span><br><span class="line">    tempDom.<span class="property">value</span> = <span class="title class_">Msg</span>;</span><br><span class="line">    tempDom.<span class="property">value</span> += (addMsg === <span class="literal">null</span>) ? <span class="string">&quot;&quot;</span> : addMsg;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(tempDom);</span><br><span class="line">    targetDom.<span class="title function_">blur</span>();</span><br><span class="line">    tempDom.<span class="title function_">select</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      info = <span class="string">&quot;浏览器不支持此操作，请手动复制。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(tempDom);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Msg</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取得参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">querystring</span> = <span class="function">(<span class="params">key, url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pathname = url || location.<span class="property">pathname</span>;</span><br><span class="line">    url = url || location.<span class="property">search</span>;</span><br><span class="line">    <span class="keyword">let</span> filename = pathname.<span class="title function_">substring</span>(pathname.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> paramMap = &#123;</span><br><span class="line">      <span class="string">&#x27;./&#x27;</span>: filename || <span class="literal">undefined</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> querystring = (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) === <span class="number">0</span>) ? url.<span class="title function_">substring</span>(<span class="number">1</span>) : url;</span><br><span class="line">    <span class="keyword">if</span> (querystring.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> parts = querystring.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; parts.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> component = parts[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> paramKey = <span class="built_in">decodeURIComponent</span>(component[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">let</span> paramVal = <span class="built_in">decodeURIComponent</span>(component[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!paramMap[paramKey]) &#123;</span><br><span class="line">          paramMap[paramKey] = paramVal;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(paramMap[paramKey]) &amp;&amp; (paramMap[paramKey] = <span class="title class_">Array</span>(paramMap[paramKey]));</span><br><span class="line">        paramMap[paramKey].<span class="title function_">push</span>(paramVal);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (key) ? paramMap[key] || <span class="literal">undefined</span> : paramMap;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 格式化字节</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">formatBytes</span> = <span class="function">(<span class="params">bytes, precision</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> units = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;KB&#x27;</span>, <span class="string">&#x27;MB&#x27;</span>, <span class="string">&#x27;GB&#x27;</span>, <span class="string">&#x27;TB&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> pow = <span class="title class_">Math</span>.<span class="title function_">floor</span>((bytes ? <span class="title class_">Math</span>.<span class="title function_">log</span>(bytes) : <span class="number">0</span>) / <span class="title class_">Math</span>.<span class="title function_">log</span>(<span class="number">1024</span>));</span><br><span class="line">    pow = <span class="title class_">Math</span>.<span class="title function_">min</span>(pow, units.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">    bytes /= (<span class="number">1</span> &lt;&lt; (<span class="number">10</span> * pow));</span><br><span class="line">    <span class="keyword">let</span> unit = (units[pow]) ? units[pow] : units[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> bytes.<span class="title function_">toFixed</span>(precision || <span class="number">2</span>) + <span class="string">&#x27; &#x27;</span> + unit;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将字符串转成 base64</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">base64Encode</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">btoa</span>(str).<span class="title function_">replace</span>(<span class="regexp">/\+\//g</span>, <span class="string">&#x27;-_&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将base64 字符串译码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _proto.<span class="property">base64Decode</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> remainder = str.<span class="property">length</span> % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> padlen;</span><br><span class="line">    <span class="keyword">if</span> (remainder) &#123;</span><br><span class="line">      padlen = <span class="number">4</span> - remainder;</span><br><span class="line">      str += str.<span class="title function_">repeat</span>(<span class="string">&#x27;=&#x27;</span>, padlen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">atob</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;-_&#x27;</span>, <span class="string">&#x27;+/&#x27;</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> $b = <span class="keyword">new</span> <span class="title class_">Biugle</span>();</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $b.<span class="title function_">add</span>(<span class="variable language_">this</span>, num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sub</span> = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $b.<span class="title function_">sub</span>(<span class="variable language_">this</span>, num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">times</span> = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $b.<span class="title function_">times</span>(<span class="variable language_">this</span>, num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">div</span> = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $b.<span class="title function_">div</span>(<span class="variable language_">this</span>, num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">round</span> = <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $b.<span class="title function_">round</span>(<span class="variable language_">this</span>, d);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ---------------BiugleJS END---------------</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2gvYml1Z2xlanM=">更多内容<i class="fa fa-external-link-alt"></i></span></p>

</blockquote>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>Biugle</tag>
      </tags>
  </entry>
  <entry>
    <title>利用腾讯云对象存储 COS 桶托管 hexo 博客</title>
    <url>/tencentcos/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>本文作者为知名摄影博主 @李四啊_ ，转改收藏一下，<span class="exturl" data-url="aHR0cHM6Ly9scnVpaGFvLmNuL3Bvc3RzL2Nvcy1oZXhvLmh0bWw=">原文链接<i class="fa fa-external-link-alt"></i></span>。<br>很多人找不到好的托管网站放自己的博客，自己租服务器又可能比较贵。<br>所以腾讯云是个不错的选择，腾讯云对象存储COS桶提供免费50G的存储空间，还有CDN加速服务，部署后速度也挺好。</p>
</div>
<span id="more"></span> 

<h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><p>打开腾讯云控制台–云产品–存储–对象存储，然后创建存储桶。<br><img data-src="/images/loading.gif" data-original="/tencentcos/1.png"></p>
<h3 id="开启静态网站设置"><a href="#开启静态网站设置" class="headerlink" title="开启静态网站设置"></a>开启静态网站设置</h3><p>在基础配置打开静态网站(关掉强制https)<br><img data-src="/images/loading.gif" data-original="/tencentcos/2.png"></p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p><img data-src="/images/loading.gif" data-original="/tencentcos/3.png"></p>
<p>SSL设置</p>
<p><img data-src="/images/loading.gif" data-original="/tencentcos/4.png"></p>
<h3 id="域名解析并添加记录"><a href="#域名解析并添加记录" class="headerlink" title="域名解析并添加记录"></a>域名解析并添加记录</h3><blockquote>
<p>去 dns 服务商添加域名解析记录 CNAME 指向上面的域名</p>
</blockquote>
<h3 id="Hexo设置"><a href="#Hexo设置" class="headerlink" title="Hexo设置"></a>Hexo设置</h3><ul>
<li>安装插件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-cos --save</span><br></pre></td></tr></table></figure>
<ul>
<li>站点配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: cos</span><br><span class="line">  bucket: yourBucketName #cos桶名称</span><br><span class="line">  appId: yourAppId #cos桶名称后数字</span><br><span class="line">  secretId: yourSecretId  #云API密钥</span><br><span class="line">  secretKey: yourSecretKey #云API密钥</span><br><span class="line">  region: yourRegion #所属地域</span><br></pre></td></tr></table></figure>
<ul>
<li>发布还是一样的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h3 id="CDN刷新"><a href="#CDN刷新" class="headerlink" title="CDN刷新"></a>CDN刷新</h3><p>因为每次更新博客内容完后，都要登录腾讯云CDN—缓存刷新，手动刷新一下CDN。</p>
<p><img data-src="/images/loading.gif" data-original="/tencentcos/cos_cdn_refresh.png"></p>
<blockquote>
<p>所以我们可以用脚本在每次更新后刷新</p>
</blockquote>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install qcloud-cdn-node-sdk --save</span><br></pre></td></tr></table></figure>

<ul>
<li>创建<code>qcloudcdn.js</code>放入<code>script</code>文件夹</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const qcloudSDK = require(&#x27;qcloud-cdn-node-sdk&#x27;);</span><br><span class="line"></span><br><span class="line">qcloudSDK.config(&#123;</span><br><span class="line">  secretId: &#x27;你的ID&#x27;,</span><br><span class="line">  secretKey: &#x27;你的密钥&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">qcloudSDK.request(&#x27;RefreshCdnDir&#x27;, &#123;</span><br><span class="line">  &#x27;dirs.0&#x27;: &#x27;https://博客地址&#x27; </span><br><span class="line">&#125;, (res) =&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="自动-CDN-刷新配置"><a href="#自动-CDN-刷新配置" class="headerlink" title="自动 CDN 刷新配置"></a>自动 CDN 刷新配置</h3><ul>
<li>首先我们进入腾讯云，按下图所示操作</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/tencentcos/cos_cdn_refresh_1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/tencentcos/cos_cdn_refresh_2.png"></p>
<ul>
<li>将 <code>index.js</code> 内容替换为如下代码，点击右上角部署即可，部署成功后可以点击测试来检测能否顺利运行。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CosSdk</span> = <span class="built_in">require</span>(<span class="string">&#x27;cos-nodejs-sdk-v5&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CdnSdk</span> = <span class="built_in">require</span>(<span class="string">&#x27;./common/CdnSdk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CdnRefreshTask</span> = <span class="built_in">require</span>(<span class="string">&#x27;./common/CdnRefreshTask&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  getParams,</span><br><span class="line">  getObjectUrl,</span><br><span class="line">  logger,</span><br><span class="line">  getLogSummary</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./common/utils&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main_handler</span> = <span class="title function_">async</span> (event, context, callback) =&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * parse param from event and process.env</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> &#123; objects, cdnHosts, secretId, secretKey, token &#125; = <span class="title function_">getParams</span>(event)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">logger</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;param is parsed success, param as follow: &#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; objects, cdnHosts, event &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * init cos instance</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (!secretId || !secretKey || !token) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`secretId, secretKey or token is missing`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cdnSdkInstance = <span class="keyword">new</span> <span class="title class_">CdnSdk</span>(&#123; secretId, secretKey, token &#125;)</span><br><span class="line">  <span class="keyword">const</span> cosInstance = <span class="keyword">new</span> <span class="title class_">CosSdk</span>(&#123;</span><br><span class="line">    <span class="title class_">SecretId</span>: secretId,</span><br><span class="line">    <span class="title class_">SecretKey</span>: secretKey,</span><br><span class="line">    <span class="title class_">XCosSecurityToken</span>: token</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> taskList = objects.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; bucket, region, key &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* 变更内容-START */</span></span><br><span class="line">    <span class="keyword">const</span> purgeUrls = [];</span><br><span class="line">    cdnHosts.<span class="title function_">forEach</span>(<span class="function"><span class="params">host</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tempUrl = <span class="title function_">getObjectUrl</span>(&#123;</span><br><span class="line">        cosInstance,</span><br><span class="line">        bucket,</span><br><span class="line">        region,</span><br><span class="line">        key,</span><br><span class="line">        <span class="attr">origin</span>: <span class="string">`<span class="subst">$&#123;/^(http\:\/\/|https\:\/\/)/.test(host) ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;https://&#x27;</span>&#125;</span><span class="subst">$&#123;host&#125;</span>`</span></span><br><span class="line">      &#125;);</span><br><span class="line">      purgeUrls.<span class="title function_">push</span>(tempUrl);</span><br><span class="line">      <span class="comment">// 如果以 /index.html 结尾，则增加目录首页/。</span></span><br><span class="line">      <span class="comment">// 例如 https://www.xxxx.com/index.html, 则增加 https://www.xxxx.com/。</span></span><br><span class="line">      <span class="keyword">if</span>(tempUrl.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/index.html&#x27;</span>) == (tempUrl.<span class="property">length</span> - <span class="number">11</span>))&#123;</span><br><span class="line">        purgeUrls.<span class="title function_">push</span>(tempUrl.<span class="title function_">substr</span>(<span class="number">0</span>, tempUrl.<span class="property">length</span> - <span class="number">10</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CdnRefreshTask</span>(&#123;</span><br><span class="line">      cdnSdkInstance,</span><br><span class="line">      <span class="attr">urls</span>: purgeUrls</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/* 变更内容-END */</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> taskResults = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> task <span class="keyword">of</span> taskList) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> task.<span class="title function_">runPurgeTasks</span>()</span><br><span class="line">    taskResults.<span class="title function_">push</span>(...results)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">logger</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;cdn refresh full logs:&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: taskResults</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; status, messages &#125; = <span class="title function_">getLogSummary</span>(taskResults)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">logger</span>(&#123;</span><br><span class="line">    <span class="attr">messages</span>: messages.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">replace</span>(<span class="regexp">/\,\ /g</span>, <span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === <span class="string">&#x27;fail&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> messages.<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> messages.<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>COS桶</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS 跨域解决方案</title>
    <url>/cors/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>CORS 跨域解决方案简单介绍</p>
</div>
<span id="more"></span> 

<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>&emsp;&emsp;在Web浏览器中，允许某个网页脚本访问另一个网页的资料，但前提是这两个网页必须有相同的URI、主机名称和端口号。一旦两个网站满足上述条件，这两个网站就被认定为具有相同来源。此策略可防止某个网页上的恶意脚本通过该页面的文档物件模型访问另一网页上的敏感性资料。</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>&emsp;&emsp;跨源资源共享 (Cross-origin resource sharing) 用于让网页的受限资源(图片、样式、脚本、iframes以及视频)能够被其他域名的页面访问的一种机制。</p>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><ul>
<li>Chrome 3+</li>
<li>Firefox 3.5+</li>
<li>Opera 12+</li>
<li>Safari 4+</li>
<li>IE 8+ (IE 11+ 才完全支持)</li>
</ul>
<h2 id="CORS流程图"><a href="#CORS流程图" class="headerlink" title="CORS流程图"></a>CORS流程图</h2><p><img data-src="/images/loading.gif" data-original="/cors/CORS.png"></p>
<h2 id="CORS请求操作"><a href="#CORS请求操作" class="headerlink" title="CORS请求操作"></a>CORS请求操作</h2><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><ul>
<li>满足两个条件<ul>
<li>请求方法为：HEAD、GET、POST</li>
<li>HTTP的头信息不超出以下几种：<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;https://example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;简单请求&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">    <span class="comment">//do someting</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>)&#123;</span><br><span class="line">    <span class="comment">//do someting</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><ul>
<li>满足条件</li>
<li>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</li>
</ul>
<h2 id="PHP接收-CORS-注意事项"><a href="#PHP接收-CORS-注意事项" class="headerlink" title="PHP接收 CORS 注意事项"></a>PHP接收 CORS 注意事项</h2><ul>
<li>允许单个网域访问<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin:http://example.com&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>允许单个页面访问<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin:http://example.com/example.html&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>允许多个网域访问<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$origin</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_ORIGIN&#x27;</span>);</span><br><span class="line"><span class="variable">$allowOrigin</span> = <span class="keyword">array</span>( </span><br><span class="line"><span class="comment">//允许访问的网域</span></span><br><span class="line">  <span class="string">&#x27;http://example1.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://example2.com&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="title function_ invoke__">in_array</span>(<span class="variable">$origin</span>, <span class="variable">$allowOrigin</span>) &amp;&amp; <span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin:&quot;</span> . <span class="variable">$origin</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="与JSONP的比较"><a href="#与JSONP的比较" class="headerlink" title="与JSONP的比较"></a>与JSONP的比较</h2><table>
<thead>
<tr>
<th align="center"></th>
<th><strong>CORS</strong></th>
<th><strong>JSONP</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>浏览器</strong></td>
<td>对浏览器版本有要求</td>
<td>支持老式浏览器</td>
</tr>
<tr>
<td align="center"><strong>请求类型</strong></td>
<td>所有类型的HTTP请求</td>
<td>GET请求</td>
</tr>
<tr>
<td align="center"><strong>请求次数</strong></td>
<td>非简单请求两次</td>
<td>一次</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript判断字符串是否包含某个片段的几种方式</title>
    <url>/jsstring/</url>
    <content><![CDATA[<div class="note success no-icon"><p>除了indexOf外，还有那些方式呢？</p>
</div>
<span id="more"></span>

<h2 id="indexOf-amp-lastIndexOf-可以用于数组"><a href="#indexOf-amp-lastIndexOf-可以用于数组" class="headerlink" title="indexOf &amp; lastIndexOf (可以用于数组)"></a>indexOf &amp; lastIndexOf (可以用于数组)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用indexOf判断，若返回-1则不包含，若包含则返回该片段第一次出现的位置(lastIndexOf返回最后一次出现的位置)。 */</span></span><br><span class="line"><span class="string">&quot;doubleam我爱你&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;doubleam&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用search判断，若返回-1则不包含，若包含则返回该片段第一次出现的位置。原理：正则表达式 */</span></span><br><span class="line"><span class="string">&quot;doubleam我爱你&quot;</span>.<span class="title function_">search</span>(<span class="string">&quot;我爱你&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="test-可以用于数组"><a href="#test-可以用于数组" class="headerlink" title="test (可以用于数组)"></a>test (可以用于数组)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用正则表达式判断，若返回false则不包含，若包含则返回true。原理：正则表达式 */</span></span><br><span class="line">/我爱你/.<span class="title function_">test</span>(<span class="string">&quot;doubleam我爱你&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;我爱你&quot;</span>).<span class="title function_">test</span>(<span class="string">&quot;doubleam我爱你&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="match-与-exec"><a href="#match-与-exec" class="headerlink" title="match 与 exec"></a>match 与 exec</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这两个方法返回找到的结果数组，用法不同。原理：正则表达式</span></span><br><span class="line"><span class="comment">match()方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span></span><br><span class="line"><span class="comment">exec()方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">/我爱你/.<span class="title function_">exec</span>(<span class="string">&quot;doubleam我爱你&quot;</span>);<span class="comment">//return [&quot;我爱你&quot;, index: 8, input: &quot;doubleam我爱你&quot;, groups: undefined];</span></span><br><span class="line"><span class="string">&quot;doubleam我爱你我想你&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/[我]/g</span>);<span class="comment">//return [&quot;我&quot;, &quot;我&quot;];</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6新增字符串扩展includes-可以用于数组"><a href="#ES6新增字符串扩展includes-可以用于数组" class="headerlink" title="ES6新增字符串扩展includes(可以用于数组)"></a>ES6新增字符串扩展includes(可以用于数组)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@return boolean</span></span><br><span class="line"><span class="string">&quot;doubleam我爱你我想你&quot;</span>.<span class="title function_">includes</span>(<span class="string">&quot;我爱你&quot;</span>);<span class="comment">//return true;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p>也可以使用 <code>&#39;doubleam我爱你我想你&#39;.split(&quot;我爱你&quot;);</code> 拆成数组通过长度来判断是否存在某个字符串片段，虽然不是很好用。</p>
</blockquote>
<p>使用正则表达式限制不能输入空格 <code>/^[\s\S]*.*[^\s][\s\S]*$/</code></p>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘code表</title>
    <url>/keycode/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>键盘code表，供自己查询，免去console.log出code，然后再写的麻烦。</p>
</div>
<span id="more"></span> 

<h2 id="KeyCode-Table"><a href="#KeyCode-Table" class="headerlink" title="KeyCode Table"></a>KeyCode Table</h2><table><tbody><tr><td><b>数字键</b></td><td><b>KeyCode</b></td><td><b>F1-F12</b></td><td><b>KeyCode</b></td><td><b>小键盘</b></td><td><b>KeyCode</b></td></tr><tr><td>1</td><td>49</td><td>F1</td><td>112</td><td>Numbpad 0</td><td>96</td></tr><tr><td>2</td><td>50</td><td>F2</td><td>113</td><td>Numbpad1</td><td>97</td></tr><tr><td>3</td><td>51</td><td>F3</td><td>114</td><td>Numbpad2</td><td>98</td></tr><tr><td>4</td><td>52</td><td>F4</td><td>115</td><td>Numbpad3</td><td>99</td></tr><tr><td>5</td><td>53</td><td>F5</td><td>116</td><td>Numbpad4</td><td>100</td></tr><tr><td>6</td><td>54</td><td>F6</td><td>117</td><td>Numbpad5</td><td>101</td></tr><tr><td>7</td><td>55</td><td>F7</td><td>118</td><td>Numbpad6</td><td>102</td></tr><tr><td>8</td><td>56</td><td>F8</td><td>119</td><td>Numbpad7</td><td>103</td></tr><tr><td>9</td><td>57</td><td>F9</td><td>120</td><td>Numbpad8</td><td>104</td></tr><tr><td></td><td></td><td>F10</td><td>121</td><td>Numbpad9</td><td>105</td></tr><tr><td></td><td></td><td>F11</td><td>122</td><td>Multiply(*)</td><td>106</td></tr><tr><td></td><td></td><td>F12</td><td>123</td><td>Add(+)</td><td>107</td></tr><tr><td></td><td></td><td></td><td></td><td>Enter</td><td>108</td></tr><tr><td></td><td></td><td></td><td></td><td>Subtract(-)</td><td>109</td></tr><tr><td></td><td></td><td></td><td></td><td>Decimal(.)</td><td>110</td></tr><tr><td></td><td></td><td></td><td></td><td>Divide(/)</td><td>111</td></tr></tbody></table><table><tbody><tr><td><FONT>字母</FONT></td><td>KeyCode</td><td><FONT>字母</FONT></td><td>KeyCode</td><td><FONT>其他键</FONT></td><td>KeyCode</td><td><FONT>其他键</FONT></td><td>KeyCode</td></tr><tr><td><FONT>A</FONT></td><td>65</td><td><FONT>N</FONT></td><td>78</td><td><FONT>Backspace</FONT></td><td>8</td><td><FONT>Left Arrow</FONT></td><td>37</td></tr><tr><td><FONT>B</FONT></td><td>66</td><td><FONT>O</FONT></td><td>79</td><td><FONT>Tab</FONT></td><td>9</td><td><FONT>Up Arrow</FONT></td><td>38</td></tr><tr><td><FONT>C</FONT></td><td>67</td><td><FONT>P</FONT></td><td>80</td><td><FONT>Clear</FONT></td><td>12</td><td><FONT>Right Arrow</FONT></td><td>39</td></tr><tr><td><FONT>D</FONT></td><td>68</td><td><FONT>Q</FONT></td><td>81</td><td><FONT>Enter</FONT></td><td>13</td><td><FONT>Down Arrow</FONT></td><td>40</td></tr><tr><td><FONT>E</FONT></td><td>69</td><td><FONT>R</FONT></td><td>82</td><td><FONT>Shift</FONT></td><td>16</td><td><FONT>Insert</FONT></td><td>45</td></tr><tr><td><FONT>F</FONT></td><td>70</td><td><FONT>S</FONT></td><td>83</td><td><FONT>Control</FONT></td><td>17</td><td><FONT>Delete</FONT></td><td>46</td></tr><tr><td><FONT>G</FONT></td><td>71</td><td><FONT>T</FONT></td><td>84</td><td><FONT>Alt</FONT></td><td>18</td><td><FONT>Help</FONT></td><td>47</td></tr><tr><td><FONT>H</FONT></td><td>72</td><td><FONT>U</FONT></td><td>85</td><td><FONT>Caps Lock</FONT></td><td>20</td><td><FONT>Num Lock</FONT></td><td>144</td></tr><tr><td><FONT>I</FONT></td><td>73</td><td><FONT>V</FONT></td><td>86</td><td><FONT>Esc</FONT></td><td>27</td><td><FONT>;:</FONT></td><td>186</td></tr><tr><td><FONT>J</FONT></td><td>74</td><td><FONT>W</FONT></td><td>87</td><td><FONT>Spacebar</FONT></td><td>32</td><td><FONT>=+</FONT></td><td>187</td></tr><tr><td><FONT>K</FONT></td><td>75</td><td><FONT>X</FONT></td><td>88</td><td><FONT>Page Up</FONT></td><td>33</td><td><FONT>-_</FONT></td><td>189</td></tr><tr><td><FONT>L</FONT></td><td>76</td><td><FONT>Y</FONT></td><td>89</td><td><FONT>Page Down</FONT></td><td>34</td><td><FONT>/?</FONT></td><td>191</td></tr><tr><td><FONT>M</FONT></td><td>77</td><td><FONT>Z</FONT></td><td>90</td><td><FONT>End</FONT></td><td>35</td><td><FONT>~`</FONT></td><td>192</td></tr><tr><td></td><td></td><td></td><td></td><td><FONT>Home</FONT></td><td>36</td><td><FONT>[{</FONT></td><td>219</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td><FONT>\|</FONT></td><td>220</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td><FONT>]}</FONT></td><td>221</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td><FONT>'''</FONT></td><td>222</td></tr></tbody></table>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS解析xml</title>
    <url>/xml/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>JS解析xml代码</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p>废话不多说，贴代码了。</p>

</blockquote>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadXML</span>(<span class="params">xmlUrl</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; <span class="comment">//IE</span></span><br><span class="line">    xmlDoc = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLDOM&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="comment">//Firefox, Mozilla, Opera, etc.</span></span><br><span class="line">      xmlDoc = <span class="variable language_">document</span>.<span class="property">implementation</span>.<span class="title function_">createDocument</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(e.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    xmlDoc.<span class="property">async</span> = <span class="literal">false</span>;</span><br><span class="line">    xmlDoc.<span class="title function_">load</span>(xmlUrl);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="comment">//Chrome</span></span><br><span class="line">      <span class="keyword">let</span> xmlhttp = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">      xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, xmlUrl, <span class="literal">false</span>);</span><br><span class="line">      xmlhttp.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">      xmlDoc = xmlhttp.<span class="property">responseXML</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlDoc.<span class="property">documentElement</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(e.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xmlDoc.<span class="property">documentElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：chrome本地加载xml会出现跨域的问题，所以需要给chrome添加启动属性<code>--args --disable-web-security --user-data-dir</code>，再行测试。（不过xml已经过时，非必要时推荐使用JSON。);</p>
</blockquote>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>xml解析</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery介绍，一篇就够了！</title>
    <url>/jquery/</url>
    <content><![CDATA[<div class="note info no-icon"><p>jQuery是全世界 65% 的网页使用，是非常受欢迎的 JavaSript Library 。<br>以【Write less, Do more!】扬名。<span class="exturl" data-url="aHR0cHM6Ly9qcXVlcnkuY29tLw==">jQuery官网<i class="fa fa-external-link-alt"></i></span>/<span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpxdWVyeS5jb20v">jQuery Plugins<i class="fa fa-external-link-alt"></i></span><br>不过最近两年，很多网站开始弃用它而改用原生JavaSript重写，不过历史总有痕迹，因此俺在这里记录一下jQuery的一些常用操作。</p>
</div>
<span id="more"></span>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><blockquote>
<p>引入 jQuery 文件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jQuery Path&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">action</span>(); or <span class="title function_">jQuery</span>(selector).<span class="title function_">action</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>selector选择器<ul>
<li>比 HTML 5 Selector 和 CSS 3 Selector 更强大</li>
</ul>
</li>
<li>action方法<ul>
<li>将许多 JavaScript 功能整合成一个方法</li>
</ul>
</li>
</ul>
<h3 id="jQuery中的选择器Selector"><a href="#jQuery中的选择器Selector" class="headerlink" title="jQuery中的选择器Selector"></a>jQuery中的选择器Selector</h3><blockquote>
<p>Returns: Node List</p>
</blockquote>
<h4 id="伪类别Pseudo-classes"><a href="#伪类别Pseudo-classes" class="headerlink" title="伪类别Pseudo classes"></a>伪类别Pseudo classes</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:visible                      <span class="comment">//当 Element 显示时</span></span><br><span class="line">:hidden                       <span class="comment">//当 Element 隐藏时</span></span><br><span class="line">:header                       <span class="comment">//选择属于 header 的标签，如 h1, h2, …</span></span><br><span class="line">:<span class="title function_">has</span>(selector)                <span class="comment">//子节点有符合 selector 的 Element</span></span><br><span class="line">:<span class="title function_">eq</span>(index)                    <span class="comment">//结果为第 index 个节点的 Element</span></span><br><span class="line">:even                         <span class="comment">//结果属于偶数的 Element</span></span><br><span class="line">:first                        <span class="comment">//结果属于第一个节点的 Element</span></span><br><span class="line">:<span class="title function_">gt</span>(index)                    <span class="comment">//结果大于第 index 个节点的 Element</span></span><br><span class="line">:last                         <span class="comment">//结果属于最后一个节点的 Element</span></span><br><span class="line">:<span class="title function_">lt</span>(index)                    <span class="comment">//结果取于第 index 个节点的 Element</span></span><br><span class="line">:odd                          <span class="comment">//结果属于基数的 Element</span></span><br><span class="line">:only-child                   <span class="comment">//仅仅为子元素</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><strong>jQuery Selector</strong></th>
<th align="center"><strong>CSS3/HTML Selector</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">:eq(index)</td>
<td align="center">:nth-child(index)</td>
</tr>
<tr>
<td align="center">:even</td>
<td align="center">:nth-child(even)</td>
</tr>
<tr>
<td align="center">:first</td>
<td align="center">:first-child</td>
</tr>
<tr>
<td align="center">:last</td>
<td align="center">:last-child</td>
</tr>
<tr>
<td align="center">:odd</td>
<td align="center">:nth-child(odd)</td>
</tr>
</tbody></table>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:button             <span class="comment">//结果属于 button 的 Element</span></span><br><span class="line">:checkbox           <span class="comment">//结果属于 checkbox 的 Element</span></span><br><span class="line">:file               <span class="comment">//结果属于 file 的 Element</span></span><br><span class="line">:password           <span class="comment">//结果属于 password 的 Element</span></span><br><span class="line">:radio              <span class="comment">//结果属于 radio 的 Element</span></span><br><span class="line">:text               <span class="comment">//结果属于 text 的 Element</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><strong>jQuery Selector</strong></th>
<th align="center"><strong>CSS3/HTML Selector</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">:button</td>
<td align="center"><code>input[type=&#39;button&#39;], button</code></td>
</tr>
<tr>
<td align="center">:checkbox</td>
<td align="center"><code>input[type=&#39;checkbox&#39;]</code></td>
</tr>
<tr>
<td align="center">:file</td>
<td align="center"><code>input[type=&#39;file&#39;]</code></td>
</tr>
<tr>
<td align="center">:password</td>
<td align="center"><code>input[type=&#39;password&#39;]</code></td>
</tr>
<tr>
<td align="center">:radio</td>
<td align="center"><code>input[type=&#39;radio&#39;]</code></td>
</tr>
<tr>
<td align="center">:text</td>
<td align="center"><code>input[type=&#39;text&#39;]</code></td>
</tr>
</tbody></table>
<h3 id="jQuery中的CSS操作"><a href="#jQuery中的CSS操作" class="headerlink" title="jQuery中的CSS操作"></a>jQuery中的CSS操作</h3><h4 id="类操作"><a href="#类操作" class="headerlink" title="类操作"></a>类操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">addClass</span>(<span class="string">&#x27;className1 className2&#x27;</span>);                         <span class="comment">//增加类</span></span><br><span class="line">$(element).<span class="title function_">removeClass</span>(<span class="string">&#x27;className1 className2&#x27;</span>);                      <span class="comment">//删除类[不写清除全部]          </span></span><br><span class="line">$(element).<span class="title function_">toggleClass</span>(<span class="string">&#x27;className1 className2&#x27;</span>[,<span class="title function_">addOrRemove</span>(bool)]);  <span class="comment">//开关类</span></span><br><span class="line">$(element).<span class="title function_">hasClass</span>(<span class="string">&#x27;className1 className2&#x27;</span>);                         <span class="comment">//判断该 Element 是否存在某个类</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">css</span>(propertyName);        <span class="comment">//取得 CSS Style</span></span><br><span class="line">$(element).<span class="title function_">css</span>(propertyName, value); <span class="comment">//设置 CSS Style</span></span><br><span class="line"><span class="comment">//多个操作</span></span><br><span class="line"><span class="title function_">jQuery</span>(element1,element2).<span class="title function_">css</span>(&#123;</span><br><span class="line">      <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;display&#x27;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//不需要像原生JS一样将属性名称改为大小写</span></span><br></pre></td></tr></table></figure>

<h4 id="width-amp-height"><a href="#width-amp-height" class="headerlink" title="width&amp;height"></a>width&amp;height</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">width</span>();                 <span class="comment">//content</span></span><br><span class="line">$(element).<span class="title function_">innerWidth</span>();            <span class="comment">//content+padding</span></span><br><span class="line">$(element).<span class="title function_">outerWidth</span>();            <span class="comment">//element width</span></span><br><span class="line">$(element).<span class="title function_">height</span>();                <span class="comment">//content</span></span><br><span class="line">$(element).<span class="title function_">innerHeight</span>();           <span class="comment">//content+padding</span></span><br><span class="line">$(element).<span class="title function_">outerHeight</span>();           <span class="comment">//element width</span></span><br></pre></td></tr></table></figure>

<h3 id="Document-Object-Model"><a href="#Document-Object-Model" class="headerlink" title="Document Object Model"></a>Document Object Model</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">prop</span>(attrName);             <span class="comment">//取得属性值</span></span><br><span class="line">$(element).<span class="title function_">prop</span>(attrName, attrValue);  <span class="comment">//设置属性值，一般原生的我们都使用prop，特别是radio与checkbox使用prop设置true和false才正确，其它的使用attr。</span></span><br><span class="line">$(element).<span class="title function_">attr</span>(attrName);     </span><br><span class="line">$(element).<span class="title function_">attr</span>(attrName, attrValue);</span><br><span class="line">$(element).<span class="title function_">removeAttr</span>(attrName, attrValue);</span><br><span class="line">$(element).<span class="title function_">removeAttr</span>(<span class="string">&#x27;attrName1 attrName2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">html</span>();                     <span class="comment">//innerHTML</span></span><br><span class="line">$(element).<span class="title function_">text</span>();                     <span class="comment">//innerText</span></span><br><span class="line">$(element).<span class="title function_">val</span>();                      <span class="comment">//value</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">data</span>(key);                  <span class="comment">//取得自定义资料</span></span><br><span class="line">$(element).<span class="title function_">data</span>(key, value);           <span class="comment">//设置自定义资料，可叠加设置。</span></span><br><span class="line">$(element).<span class="title function_">data</span>(&#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">z</span>: <span class="number">3</span></span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<h3 id="DOM-Tree-Traversal"><a href="#DOM-Tree-Traversal" class="headerlink" title="DOM-Tree Traversal"></a>DOM-Tree Traversal</h3><h4 id="DOM-Select"><a href="#DOM-Select" class="headerlink" title="DOM-Select"></a>DOM-Select</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过滤器筛选表单元素:disabled、:enabled、:checked、:selected</span></span><br><span class="line">$(<span class="string">&quot;input:disabled&quot;</span>);</span><br><span class="line"><span class="comment">//指定序号获取元素</span></span><br><span class="line">$(element).<span class="title function_">eq</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//指定范围获取元素</span></span><br><span class="line">$(element).<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//指定条件获取元素</span></span><br><span class="line">$(element).<span class="title function_">is</span>(<span class="string">&quot;.blue&quot;</span>);</span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">parent</span>([selector]);              <span class="comment">//父节点</span></span><br><span class="line">$(element).<span class="title function_">parents</span>([selector]);             <span class="comment">//所有父节点</span></span><br><span class="line">$(element).<span class="title function_">parents</span>(<span class="string">&#x27;.xxx&#x27;</span>);                 <span class="comment">//所有长辈节点的含有 xxx 类的</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">children</span>([selector]);            <span class="comment">//子节点</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">find</span>([selector]);                <span class="comment">//找符合要求的子节点。相当与$(element selector);</span></span><br><span class="line">$(element).<span class="title function_">filter</span>([selector]);                <span class="comment">//从初始结果中筛选，找自己。相当与$(elementselector);//div.className</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">siblings</span>([selector]);            <span class="comment">//所有的同辈节点</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">next</span>([selector]);                <span class="comment">//下一个节点</span></span><br><span class="line">$(element).<span class="title function_">nextAll</span>([selector]);             <span class="comment">//之后的所有节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">prev</span>([selector]);                <span class="comment">//上一个节点</span></span><br><span class="line">$(element).<span class="title function_">prevAll</span>([selector]);             <span class="comment">//之前的所有节点  </span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>));            <span class="comment">//dom对象转jquery对象</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>)[<span class="number">0</span>]; or $(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">get</span>(<span class="number">0</span>);              <span class="comment">//jquery对象转dom对象</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>);                                     <span class="comment">//现在chrome好像也可以使用$()选取元素了</span></span><br></pre></td></tr></table></figure>

<h4 id="DOM-Insertion"><a href="#DOM-Insertion" class="headerlink" title="DOM-Insertion"></a>DOM-Insertion</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(parentElement).<span class="title function_">append</span>(newElement);                       <span class="comment">//在目前节点插入新子节点到最后 </span></span><br><span class="line">$(parentElement).<span class="title function_">syntaxhighlightpend</span>(newElement);          <span class="comment">//在目前节点插入新子节点到开头</span></span><br><span class="line">$(newElement).<span class="title function_">appendTo</span>(parentElement);                     <span class="comment">//将新节点插入到某个父节点下的当第一个子节点</span></span><br><span class="line">$(newElement).<span class="title function_">syntaxhighlightpendTo</span>(parentElement);        <span class="comment">//将新节点插入到某个父节点下的当最后一个子节点</span></span><br><span class="line"></span><br><span class="line">$(siblingElement).<span class="title function_">after</span>(newElement);                       <span class="comment">//在目前节点后方插入新相邻节点 </span></span><br><span class="line">$(siblingElement).<span class="title function_">before</span>(newElement);                      <span class="comment">//在目前节点前方插入新相邻节点 </span></span><br><span class="line">$(newElement).<span class="title function_">insertAfter</span>(siblingElement);                 <span class="comment">//将新节点插入到某节点之后当相邻节点</span></span><br><span class="line">$(newElement).<span class="title function_">insertBefore</span>(siblingElement);                <span class="comment">//将新节点插入到某节点之前当相邻节点</span></span><br><span class="line"></span><br><span class="line">a.<span class="title function_">replaceWith</span>(b);                                          <span class="comment">//b替换a，后面替换前面。</span></span><br><span class="line">b.<span class="title function_">replaceAll</span>(a);                                           <span class="comment">//b替换a，前面替换后面。</span></span><br><span class="line"></span><br><span class="line">a.<span class="title function_">wrap</span>(b);                                                 <span class="comment">//给匹配的a包裹b标签。&lt;b&gt;&lt;a&gt;123&lt;/a&gt;&lt;/b&gt;&lt;b&gt;&lt;a&gt;456&lt;/a&gt;&lt;/b&gt;</span></span><br><span class="line">a.<span class="title function_">wrapAll</span>(b);                                              <span class="comment">//给匹配的a全部包裹b标签。&lt;b&gt;&lt;a&gt;123&lt;/a&gt;&lt;a&gt;456&lt;/a&gt;&lt;/b&gt;</span></span><br><span class="line">a.<span class="title function_">wrapInner</span>(b);                                            <span class="comment">//给匹配的a新增一个子标签b包裹内容。&lt;a&gt;&lt;b&gt;123&lt;/b&gt;&lt;/a&gt;&lt;a&gt;&lt;b&gt;456&lt;/b&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="DOM-Removal"><a href="#DOM-Removal" class="headerlink" title="DOM-Removal"></a>DOM-Removal</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">remove</span>();                     <span class="comment">//删除自身节点及子节点</span></span><br><span class="line">$(element).<span class="title function_">empty</span>();                      <span class="comment">//清空子节点</span></span><br><span class="line">$(element).<span class="title function_">clone</span>(<span class="literal">true</span>).<span class="title function_">appendTo</span>($el);    <span class="comment">//复制element节点并复制事件监听，填到$el。</span></span><br></pre></td></tr></table></figure>


<h4 id="DOM-Event"><a href="#DOM-Event" class="headerlink" title="DOM-Event"></a>DOM-Event</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当文件载入完成时[onload]</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;);              </span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加事件监听器</span></span><br><span class="line">$(element).<span class="title function_">on</span>(<span class="string">&#x27;eventType1 eventType2 eventType3&#x27;</span>, handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺带一提，有些元素是无法聚焦的，设置keydown或者keyup事件会发现无法触发，所以我们一般给其设置tabindex，再设置事件即可。</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">attr</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;tabindex&#x27;</span>: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;outline: none;&#x27;</span><span class="comment">//不能学习这种写法，应该用css()语义化。</span></span><br><span class="line">&#125;).<span class="title function_">on</span>(<span class="string">&#x27;keydown&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">ctrlKey</span> &amp;&amp; event.<span class="property">keyCode</span> === <span class="number">65</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除事件监听器</span></span><br><span class="line">$(element).<span class="title function_">unbind</span>(eventType);<span class="comment">//弃用</span></span><br><span class="line">$(element).<span class="title function_">off</span>(eventType);   <span class="comment">//不写eventType移除所有事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标放置/离开动作</span></span><br><span class="line">$(element).<span class="title function_">hover</span>(<span class="title function_">over</span>(),<span class="title function_">out</span>());</span><br><span class="line"><span class="comment">//元素被点击时的切换动作</span></span><br><span class="line">$(element).<span class="title function_">toggle</span>(<span class="title function_">fn1</span>(),<span class="title function_">fn2</span>(),<span class="title function_">fn3</span>(),···);</span><br><span class="line"><span class="comment">//元素点击事件</span></span><br><span class="line">$(element).<span class="title function_">click</span>(<span class="title function_">fn</span>());</span><br><span class="line"><span class="comment">//鼠标事件</span></span><br><span class="line">$(element).<span class="title function_">mouseover</span>(<span class="title function_">fn</span>());</span><br><span class="line">$(element).<span class="title function_">mouseout</span>(<span class="title function_">fn</span>());</span><br><span class="line"><span class="comment">//只响应一次事件</span></span><br><span class="line">$(element).<span class="title function_">one</span>(type,[data],fn);</span><br><span class="line"><span class="comment">//在每一个元素上触发一次某事件</span></span><br><span class="line">$(element).<span class="title function_">trigger</span>(type,[data]);</span><br></pre></td></tr></table></figure>

<h3 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">focus</span>([<span class="keyword">function</span>]);              <span class="comment">//得到焦点</span></span><br><span class="line">$(element).<span class="title function_">blur</span>([<span class="keyword">function</span>]);               <span class="comment">//失去焦点</span></span><br><span class="line">$(element).<span class="property">defaultValue</span>;                   <span class="comment">//得到预设值value</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">offset</span>();                       <span class="comment">//得到元素左边距和上边距[对象]。</span></span><br><span class="line">$(element).<span class="title function_">offset</span>().<span class="property">left</span>;                  <span class="comment">//得到元素左边距</span></span><br><span class="line">$(element).<span class="title function_">offset</span>().<span class="property">top</span>;                   <span class="comment">//得到元素上边距</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">show</span>([duration][, complete]);   <span class="comment">//显示元素</span></span><br><span class="line">$(element).<span class="title function_">hide</span>([duration][, complete]);   <span class="comment">//隐藏元素</span></span><br><span class="line">$(element).<span class="title function_">toggle</span>([duration][, complete]); <span class="comment">//显示元素开关【不推荐】</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">fadeIn</span>();                       <span class="comment">//淡入元素</span></span><br><span class="line">$(element).<span class="title function_">fadeOut</span>();                      <span class="comment">//淡出元素</span></span><br><span class="line">$(element).<span class="title function_">fadeToggle</span>();                   <span class="comment">//淡入淡出开关【不推荐】</span></span><br><span class="line"></span><br><span class="line">$(element).<span class="title function_">slideDown</span>();                    <span class="comment">//向下滑动元素</span></span><br><span class="line">$(element).<span class="title function_">slideUp</span>();                      <span class="comment">//向上滑动元素</span></span><br><span class="line">$(element).<span class="title function_">slideToggle</span>();                  <span class="comment">//滑动元素开关【不推荐】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义元素动画</span></span><br><span class="line">$(element).<span class="title function_">animate</span>(properties[, duration][, easing][, complete]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*properties                        //CSS 属性</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  property1: value1,</span></span><br><span class="line"><span class="comment">  property2: value2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*duration                          //持续时间</span></span><br><span class="line"><span class="comment">*easing                            //加速度曲线</span></span><br><span class="line"><span class="comment">*complete                          //动画完成后的handle</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中文转Unicode</span></span><br><span class="line"><span class="built_in">escape</span>(<span class="string">&#x27;中文转Unicode&#x27;</span>).<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/%u/gi</span>,<span class="string">&#x27;\\u&#x27;</span>);</span><br><span class="line"><span class="comment">//中文转Unicode(CSS)</span></span><br><span class="line"><span class="built_in">escape</span>(<span class="string">&#x27;中文转Unicode&#x27;</span>).<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/%u/gi</span>,<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为jQuery扩展min,max两个方法 ，通过&lt;$.方法名&gt;调用。</span></span><br><span class="line">$.<span class="title function_">extend</span>(&#123; </span><br><span class="line">  <span class="attr">min</span>: <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> a&lt;b?<span class="attr">a</span>:b;&#125;, </span><br><span class="line">  <span class="attr">max</span>: <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> a&gt;b?<span class="attr">a</span>:b;&#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Ajax-amp-Form"><a href="#Ajax-amp-Form" class="headerlink" title="Ajax&amp;Form"></a>Ajax&amp;Form</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(options) | jQuery.<span class="title function_">ajax</span>(options);</span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&quot;demo_test.php&quot;</span>,<span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Data: &quot;</span> + data + <span class="string">&quot;\nStatus: &quot;</span> + status);</span><br><span class="line">&#125;);</span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;demo_test.php&quot;</span>,<span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Data: &quot;</span> + data + <span class="string">&quot;\nStatus: &quot;</span> + status);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取JSON</span></span><br><span class="line">$.<span class="title function_">getJSON</span>(url,[data],[callback]);</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://跨域&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>, <span class="comment">//jsonp只支持GET</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">  <span class="attr">jsonp</span>: <span class="string">&#x27;jsoncallback&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//jsonp 方式此方法不被触发，原因可能是dataType如果指定为jsonp的话，就已经不是ajax事件了。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line"><span class="comment">//客户端jquery预先定义好的callback函式，成功获取跨域服务器上的json资料后，会动态执行这个callback函式。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params">XMLHttpRequest, textStatus</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line"><span class="comment">//jsonp 方式此方法不被触发，原因可能是dataType如果指定为jsonp的话，就已经不是ajax事件了。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取JS并执行</span></span><br><span class="line">$.<span class="title function_">getScript</span>(url,[callback]);</span><br><span class="line"><span class="comment">//读取HTML文件插入到元素中</span></span><br><span class="line">$(element).<span class="title function_">load</span>(url,data,callback);</span><br><span class="line"><span class="comment">//ajax完成后执行的函数</span></span><br><span class="line">$.<span class="title function_">ajaxComplete</span>(callback);</span><br><span class="line"><span class="comment">//ajax失败后执行的函数</span></span><br><span class="line">$.<span class="title function_">ajaxError</span>(callback);</span><br><span class="line"><span class="comment">//ajax成功后执行的函数</span></span><br><span class="line">$.<span class="title function_">ajaxSuccess</span>(callback);</span><br><span class="line"><span class="comment">//ajax发送前执行的函数</span></span><br><span class="line">$.<span class="title function_">ajaxSend</span>(callback);</span><br><span class="line"><span class="comment">//ajax开始时执行的函数</span></span><br><span class="line">$.<span class="title function_">ajaxStart</span>(callback);</span><br><span class="line"><span class="comment">//ajax结束时执行的函数</span></span><br><span class="line">$.<span class="title function_">ajaxStop</span>(callback);</span><br><span class="line"><span class="comment">//设置Ajax全局预设值</span></span><br><span class="line">$.<span class="title function_">ajaxSetup</span>(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取表单序列化结果</span></span><br><span class="line">$(<span class="string">&quot;form&quot;</span>).<span class="title function_">serialize</span>();</span><br><span class="line"><span class="comment">//return JSON</span></span><br><span class="line">$(<span class="string">&quot;form&quot;</span>).<span class="title function_">serializeArray</span>();</span><br><span class="line">$(<span class="string">&quot;form&quot;</span>).<span class="title function_">submit</span>();</span><br><span class="line">$(<span class="string">&quot;form&quot;</span>).<span class="title function_">reset</span>();</span><br><span class="line"><span class="comment">//对象序列化</span></span><br><span class="line">$.<span class="title function_">param</span>(obj,[traditional]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">$.<span class="title function_">each</span>(object, [callback]);     <span class="comment">//遍历数组(key,value)=&gt;&#123;做一些处理&#125;</span></span><br><span class="line">$.<span class="title function_">map</span>(arr|obj, [callback]);     <span class="comment">//返回新数组</span></span><br><span class="line">$(selector).<span class="title function_">toArray</span>();          <span class="comment">//NodeList 2 Array</span></span><br><span class="line">$.<span class="title function_">merge</span>(arr1, arr2);            <span class="comment">//合并数组，赋给arr1。</span></span><br><span class="line">$.<span class="title function_">unique</span>(<span class="title class_">NodeList</span>);             <span class="comment">//去除重复Element</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax基本格式</title>
    <url>/ajaxnormal/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>ajax的基本格式</p>
</div>
<span id="more"></span> 

<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,<span class="comment">//是否异步</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;url&quot;</span>,<span class="comment">//目的地</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,<span class="comment">//传输方法</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,<span class="comment">//返回值类型</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">data1</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">      <span class="attr">data2</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">      <span class="attr">data3</span>: <span class="string">&quot;c&quot;</span><span class="comment">//传递的数据内容</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//发送请求之前</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="comment">//成功</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//失败</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//请求完成</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//2.调用open</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://example.com&#x27;</span>);</span><br><span class="line"><span class="comment">//3.设置Content-Type内容格式(注意contenttype类型)</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"><span class="comment">//4.调用send()</span></span><br><span class="line">xhr.<span class="title function_">send</span>(formData);</span><br><span class="line"><span class="comment">//5.设置readystatechange事件接收响应数据</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件上传进度监测</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">    <span class="comment">//加载值比总需加载值的百分比，可采用bootstrap progress-bar样式。</span></span><br><span class="line">    <span class="keyword">let</span> percent = e.<span class="property">loaded</span> / e.<span class="property">total</span> * <span class="number">100</span> + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;percent&#x27;</span>).<span class="property">style</span>.<span class="property">width</span> = percent;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;percent&#x27;</span>).<span class="property">innerText</span> = percent;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;文件不支持上传中的进度监测&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设置上传文件完成的事件</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pxdWVyeS9hamF4X2FqYXguYXNw">Ajax<i class="fa fa-external-link-alt"></i></span><br><br><br><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9hamF4L2FqYXgteG1saHR0cHJlcXVlc3Qtc2VuZC5odG1s">XMLHttpRequest<i class="fa fa-external-link-alt"></i></span></p>

</blockquote>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>生活中常见的一些名词解释</title>
    <url>/glossary/</url>
    <content><![CDATA[<div class="note success no-icon"><p>生活中常见的一些名词解释（想到了就继续更新）</p>
</div>
<span id="more"></span>

<h2 id="SWOT分析"><a href="#SWOT分析" class="headerlink" title="SWOT分析"></a>SWOT分析</h2><p>&emsp;&emsp;强弱危机分析（英语：SWOT Analysis），又称优劣分析法、SWOT分析法或道斯矩阵，是一种企业竞争态势分析方法，是市场营销的基础分析方法之一，透过评价自身的优势（Strengths）、劣势（Weaknesses）、外部竞争上的机会（Opportunities）和威胁（Threats），用以在制定发展战略前对自身进行深入全面的分析以及竞争优势的定位。而此方法是Albert Humphrey所提。<br>&emsp;&emsp;SWOT分析在最理想的状态下，是由专属的团队来达成的，一个SWOT分析团队，最好由一个会计相关人员，一位销售人员，一位经理级主管，一位工程师和一位项目管理师的组成。</p>
<h2 id="STAR法则"><a href="#STAR法则" class="headerlink" title="STAR法则"></a>STAR法则</h2><p>&emsp;&emsp;STAR法则是情境(situation)、任务(task)、行动(action)、结果(result)四项的缩写。STAR法则是一种常常被面试官使用的工具，用来收集面试者与工作相关的具体信息和能力。STAR法则比起传统的面试手法来说，可以更精确地预测面试者未来的工作表现。</p>
<h2 id="鲶鱼效应"><a href="#鲶鱼效应" class="headerlink" title="鲶鱼效应"></a>鲶鱼效应</h2><p>&emsp;&emsp;鲶鱼效应是指鲶鱼在搅动小鱼生存环境的同时，也激活了小鱼的求生能力。鲶鱼效应是采取一种手段或措施，刺激一些企业活跃起来投入到市场中积极参与竞争，从而激活市场中的同行业企业。</p>
<h2 id="墨菲定律"><a href="#墨菲定律" class="headerlink" title="墨菲定律"></a>墨菲定律</h2><p>&emsp;&emsp;墨菲定律是一种心理学效应，由爱德华·墨菲（Edward A. Murphy）提出，亦称墨菲法则、墨菲定理。<br>&emsp;&emsp;原文为：如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择。根本内容是：如果事情有变坏的可能，不管这种可能性有多小，它总会发生。“墨菲定律”、“帕金森定律”和“彼德原理”并称为二十世纪西方文化三大发现。<br>&emsp;&emsp;墨菲定律（Murphy’s Law）主要内容有四个方面：</p>
<p>&emsp;&emsp;&emsp;&emsp; 1. 任何事都没有表面看起来那么简单</p>
<p>&emsp;&emsp;&emsp;&emsp; 2. 所有的事都会比你预计的时间长</p>
<p>&emsp;&emsp;&emsp;&emsp; 3. 会出错的事总会出错</p>
<p>&emsp;&emsp;&emsp;&emsp; 4. 如果你担心某种情况发生，那么它就更有可能发生。</p>
<blockquote>
<p>“墨菲定律”的根本内容是“凡是可能出错的事有很大几率会出错”，指的是任何一个事件，只要具有大于零的机率，就不能够假设它不会发生。</p>
</blockquote>
<h2 id="结点与节点"><a href="#结点与节点" class="headerlink" title="结点与节点"></a>结点与节点</h2><p>&emsp;&emsp;结，连结，终结。</p>
<p>&emsp;&emsp;节，关节。</p>
<p>&emsp;&emsp;所以节点被认为是一个实体，有处理能力，比如说网络上的一台计算机。</p>
<p>&emsp;&emsp;结点则只是一个交叉点，像“结绳记事”，打个结，做个标记，仅此而已。一般算法的中点都是结点。</p>
<h2 id="冰山原则"><a href="#冰山原则" class="headerlink" title="冰山原则"></a>冰山原则</h2><p>&emsp;&emsp;冰山运动之所以雄伟壮观，是因为他只有八分之一在水面上。所谓“冰山原则”，就是用简洁的文字塑造出鲜明的形象，把自身的感受和思想情绪最大限度的埋藏在形象之中，使之情感充沛却含而不露、思想深沉而隐而不晦，从而将文学的可感性与可思性巧妙的结合起来，让读者对鲜明形象的感受去发掘作品的思想意义。</p>
<h2 id="心流状态"><a href="#心流状态" class="headerlink" title="心流状态"></a>心流状态</h2><p>&emsp;&emsp;心流（英语：Mental flow）在心理学中是指一种人们在专注进行某行为时所表现的心理状态。如艺术家在创作时所表现的心理状态。通常在此状态时，不愿被打扰，也称抗拒中断。是一种将个人精神力完全投注在某种活动上的感觉。心流产生的同时会有高度的兴奋及充实感，感受不到时间的流逝。</p>
<h2 id="Unicode-中文乱码速查表"><a href="#Unicode-中文乱码速查表" class="headerlink" title="Unicode 中文乱码速查表"></a>Unicode 中文乱码速查表</h2><table>
<thead>
<tr>
<th>乱码种类</th>
<th>实例</th>
<th>特点</th>
<th>产生原因</th>
</tr>
</thead>
<tbody><tr>
<td><strong>烫烫烫</strong></td>
<td>烫烫烫烫烫</td>
<td>重复显示”烫”或”屯屯屯”</td>
<td>VC Debug 模式下，未初始化的栈内存填充 <code>0xCCCC</code>，对应 GBK 编码的”烫”字。</td>
</tr>
<tr>
<td><strong>锟斤拷</strong></td>
<td>锟斤拷锟斤拷…</td>
<td>重复出现”锟斤拷”或”烫烫烫”</td>
<td>UTF-8 转 GBK 时，无法识别的字符被替换为 <code>EFBFBD</code>（�），组合解码为”锟斤拷”。</td>
</tr>
<tr>
<td><strong>古文码</strong></td>
<td>鐢辩珛鏁堝緱鏇…</td>
<td>看似繁体古文，实际无意义</td>
<td>UTF-8 文本被错误用 ISO-8859-1 解码后，再转 UTF-8 导致双重编码错误。</td>
</tr>
<tr>
<td><strong>口字码</strong></td>
<td>口口口口口</td>
<td>显示方框”口”或空白</td>
<td>系统/字体缺失对应 Unicode 字符的渲染能力，用占位符替代。</td>
</tr>
<tr>
<td><strong>问号乱码</strong></td>
<td>???????</td>
<td>连续问号</td>
<td>编码转换时，目标编码不支持原字符，用问号替代（如 ASCII 环境显示中文）。</td>
</tr>
<tr>
<td><strong>符号乱码</strong></td>
<td>Äæå%^&amp;*äø</td>
<td>随机符号、字母、数字混合</td>
<td>二进制文件（如 exe/图片）被用文本编码（如 UTF-8）打开，或传输编码错误。</td>
</tr>
<tr>
<td><strong>倒转码</strong></td>
<td>洣湷ഘ䙆쳻</td>
<td>字形颠倒或镜像显示</td>
<td>文本编码（如 UTF-16/32）被错误地以小端/大端模式解码。</td>
</tr>
<tr>
<td><strong>屯屯屯</strong></td>
<td>屯屯屯屯屯</td>
<td>重复显示”屯”字</td>
<td>VC Release 模式下，未初始化的堆内存填充 <code>0xCDCD</code>，对应 GBK 编码的”屯”字。</td>
</tr>
<tr>
<td><strong>拼音码</strong></td>
<td>nǐ hǎo → ǹ噉壕</td>
<td>拼音与汉字混合或无意义拼音符号</td>
<td>拼音输入法或编码转换错误，如 UTF-8 被错误解析为 GBK，或半角/全角混乱。</td>
</tr>
<tr>
<td><strong>问句码</strong></td>
<td>什么什么什么？</td>
<td>重复疑问词或逻辑混乱的句子</td>
<td>自然语言处理（NLP）模型输出错误、语料库编码损坏，或 AI 生成文本时编码丢失。</td>
</tr>
</tbody></table>
<hr>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ol>
<li><strong>编码兼容性</strong>：UTF-8/GBK/BIG5 等编码混合使用易导致乱码，需统一编码格式。</li>
<li><strong>BOM 问题</strong>：UTF-8 含 BOM 头文件可能被部分程序错误解析。</li>
<li><strong>内存泄露</strong>：C/C++ 中未初始化的指针或缓冲区溢出也可能引发乱码。</li>
<li><strong>网络传输</strong>：HTTP 未指定 <code>Content-Type</code> 或编码不一致时，易出现乱码。</li>
<li><strong>拼音码</strong>：常见于输入法配置错误或跨平台文本传输（如 Windows→Linux 编码不一致）。</li>
<li><strong>问句码</strong>：AI 生成文本时，若训练数据含编码错误片段，可能输出无逻辑的重复疑问句。</li>
</ol>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>名词解释</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转console</title>
    <url>/set_console/</url>
    <content><![CDATA[<div class="note success no-icon"><p>5分钟教你玩转console</p>
</div>
<span id="more"></span> 

<h2 id="如何打印出带css样式的信息呢？"><a href="#如何打印出带css样式的信息呢？" class="headerlink" title="如何打印出带css样式的信息呢？"></a>如何打印出带css样式的信息呢？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 基础写法，使用%c即可，可以写在任何地方，然后在后面添加我们的样式。 */</span></span><br><span class="line"><span class="comment">/* 所有的日志类型都可以使用 c 语言风格的 printf 消息格式，该格式定义了一个模板，其中包含一个变量被替换的 % 指示器。 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%cA %cB %cC&quot;</span>,<span class="string">&quot;color:red;&quot;</span>,<span class="string">&quot;color:green;&quot;</span>,<span class="string">&quot;color:blue;&quot;</span>);</span><br><span class="line"><span class="comment">/* 所以在这里我们打印的内容A为红色的，B为绿色的，C为蓝色的。 */</span></span><br><span class="line"><span class="comment">/* 更多样式自行探索哦。 */</span></span><br></pre></td></tr></table></figure>

<h2 id="打印图片（部分浏览器不兼容）"><a href="#打印图片（部分浏览器不兼容）" class="headerlink" title="打印图片（部分浏览器不兼容）"></a>打印图片（部分浏览器不兼容）</h2><p>&emsp;&emsp;<code>console.log</code>不支持直接图片输出，但我们可以用背景图曲线救国。但你没法像平时那样输出背景图，原因呢，就是你没法直接设置 width 和 height 样式。所以我们要要输出一张 <code>300x200</code> 的图片的话，要用 <code>padding</code> 来把整个区域撑开到我们需要的大小，然后还要设置 <code>line-height</code> 才行。</p>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li><code>line-height</code>的值为图片高度。</li>
<li><code>background</code>设置图片url。</li>
<li><code>padding</code>左右两边的值是图片宽度的一半。</li>
<li><code>padding</code>上下的值，需要自己慢慢去尝试直到满足为止。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c&quot;</span>,<span class="string">&quot;line-height:200px;background:url(...);padding:150px 自定义;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="博主案例"><a href="#博主案例" class="headerlink" title="博主案例"></a>博主案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* console */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c博客名称%cDoubleAm&quot;</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#3fa9f5;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c网站地址%chttps://biugle.cn&quot;</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#00bc12;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c扣扣号码%c1005760694&quot;</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#ff9900;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c欢迎使用doublelove！&quot;</span>, <span class="string">&quot;line-height:28px;padding:5px;color:#fff;font-weight:bolder;font-size:16px;background-color:chocolate;color:#fff;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">console</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">log</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c页面加载消耗了 %c<span class="subst">$&#123;(<span class="built_in">Math</span>.round(<span class="number">100</span> * performance.now()) / <span class="number">100</span> / <span class="number">1e3</span>).toFixed(<span class="number">2</span>)&#125;</span>s`</span>, <span class="string">&quot;background: #fff;color: #333;text-shadow: 0 0 2px #eee, 0 0 3px #eee, 0 0 3px #eee, 0 0 2px #eee, 0 0 3px #eee;&quot;</span>, <span class="string">&quot;color:tomato;font-weight:bolder;&quot;</span>);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;access&quot;</span>) || <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;access&quot;</span>, (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>());</span><br><span class="line">  <span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;access&quot;</span>)));</span><br><span class="line">  <span class="keyword">let</span> o = <span class="string">`<span class="subst">$&#123;e.getFullYear()&#125;</span>年<span class="subst">$&#123;e.getMonth() + <span class="number">1</span>&#125;</span>月<span class="subst">$&#123;e.getDate()&#125;</span>日`</span>;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;hit&quot;</span>) ? t = <span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;hit&quot;</span>)) : <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;hit&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;hit&quot;</span>, ++t);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c这是你自 %c<span class="subst">$&#123;o&#125;</span> %c以来第 %c<span class="subst">$&#123;t&#125;</span> %c次在本站打开控制台，你想知道什么秘密吗～`</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;color:chocolate;font-weight:bolder;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;color:chocolate;font-weight:bolder;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p>另外还有其他 console 方法可以自己去探索</p>
</blockquote>
<ul>
<li><code>console.time(arg1)/console.timeEnd(arg1)</code></li>
<li><code>console.group(arg1)/console.groupCollapsed(arg1)/console.groupEnd()</code></li>
<li><code>console.assert(a == 1, &#39;a != 1&#39;)</code></li>
<li><code>console.clear()</code></li>
<li><code>console.table(obj)</code></li>
<li><code>console.log(&#123;arg1, arg2, arg3&#125;)</code></li>
</ul>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>console</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON的encode与decode</title>
    <url>/jsondemo/</url>
    <content><![CDATA[<div class="note success no-icon"><p>JSON的encode与decode（php与json为例）</p>
</div>
<span id="more"></span> 

<h2 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库查询结果转为json</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object $result 数据库查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode_json</span>(<span class="params"><span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$result_array</span> = [];</span><br><span class="line">  <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_object</span>(<span class="variable">$result</span>)) &#123;</span><br><span class="line">    <span class="variable">$result_array</span>[] = <span class="variable">$row</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result_array</span>);<span class="comment">//decode方法为json_decode($json)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析后台传回的json文档</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">json</span>&#125; 后台传回的json文档</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jsonDecode</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = [];</span><br><span class="line">  <span class="keyword">let</span> obj = result;</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;无数据！&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[i].<span class="property">index</span>-name-A+obj[i].<span class="property">index</span>-name-B+obj[i].<span class="property">index</span>-name-C+...);</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><blockquote>
<p>注意：JSON在js中的encode与decode有自带的方法可以实现（<code>JSON.stringify()</code>与<code>JSON.parse()</code>），但是由于在js中，万物皆可对象，所以没有decode也可以直接使用。/滑稽～</p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>图解git命令</title>
    <url>/git_more/</url>
    <content><![CDATA[<div class="note success no-icon"><p>图解git的命令操作，超详细！</p>
</div>
<span id="more"></span> 
<h2 id="图解GIT命令"><a href="#图解GIT命令" class="headerlink" title="图解GIT命令"></a>图解GIT命令</h2><blockquote class="blockquote-center">
<p>废话不多说，看图。</p>

</blockquote> 

<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><img data-src="/images/loading.gif" data-original="/git_more/git.png"></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><img data-src="/images/loading.gif" data-original="/git_more/head.png"></p>
<h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p><img data-src="/images/loading.gif" data-original="/git_more/branch.png"></p>
]]></content>
      <categories>
        <category>一般垃圾</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈RESTful</title>
    <url>/restful/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>RESTful 是一种系统开发设计风格、原则，可视情况调整。以下内容参考<span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU3ODk=">RFC5789<i class="fa fa-external-link-alt"></i></span>。</p>
</div>
<span id="more"></span> 

<h2 id="Noun"><a href="#Noun" class="headerlink" title="Noun"></a>Noun</h2><ul>
<li>一般资源<br>通用于一律使用复数名词<br>例如：/books 或 /books/123。但有部分人认为应该使用单数名词，因为： /book/123 看似比 /books/123 合理。但想想文件系统的目录命名 (例如/Users或/Documents)，其实用复数也没问题。复数可以保持API endpoint的一致性，所以一般资源建议用复数。</li>
<li>唯一资源：对 client 而言只有一份的资源<br>通用于单数名词<br>例如：user 是指目前验证的使用者，使用者永远只能同时登入一个使用者。</li>
</ul>
<h2 id="Http-Method"><a href="#Http-Method" class="headerlink" title="Http Method"></a>Http Method</h2><table><tbody><tr><th>Method</th><th>Idempotent</th><th>Safe</th><th>CRUD</th><th>OO</th><th>生活动词</th><th>用途</th></tr><tr><td rowspan="2">GET</td><td rowspan="2" style="text-align: center;">Y</td><td rowspan="2" style="text-align: center;">Y</td><td rowspan="2"><b>R</b>ead</td><td rowspan="2">get</td><td>get</td><td>取得数据</td></tr><tr><td>list</td><td>列出数据</td></tr><tr><td rowspan="2">POST</td><td rowspan="2"></td><td rowspan="2"></td><td rowspan="2"><b>C</b>reate</td><td rowspan="2">add</td><td>create</td><td>建立一个可以完全独立存在的实体</td></tr><tr><td>add</td><td>增加一个必须依赖于某个实体的实体</td></tr><tr><td rowspan="2">PUT</td><td rowspan="2" style="text-align: center;">Y</td><td rowspan="2"></td><td rowspan="3"><b>U</b>pdate</td><td rowspan="3">set</td><td>replace</td><td>取代一个关系，已存在时先删除后建立，不存在时直接建立。</td></tr><tr><td>add</td><td>附加唯一关系，两个关系实体可以互相独立存在，且已经存在。</td></tr><tr><td>PATCH</td><td></td><td></td><td>edit</td><td>编辑某个实体</td></tr><tr><td>DELETE</td><td></td><td></td><td><b>D</b>elete</td><td>remove</td><td>remove<br>delete</td><td>删除某个实体</td></tr></tbody></table>

<ul>
<li>Safe：该操作不会改变服务器端的资源状态 (而且结果可以被cache)，属于 Safe 的操作必定属于 Idempotent</li>
<li>Idempotent (幂等性)：该操作不管做1遍或做n遍，都会得到同样的资源状态结果 (但不一定得到同样的回传值，例如第2次DELETE请求可能回传404)，因此client端可以放心retry。</li>
</ul>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul>
<li>SAFE：每次执行操作时，GET 只有读取 Resource，不会改变到任何的 Resource (资源, 数据)。</li>
<li>Idempotent：每次执行操作时，GET 只有读取 Resource，不会改变到任何的 Resource (资源, 数据)，所以任何资源的任何状态都是一样的。</li>
</ul>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul>
<li>每次执行操作时，POST 都会建立一个 Resource (资源, 数据)。</li>
<li>范例：建立使用者<br>执行第一次时：建立一个 name = “张无忌” 的 user，但其 id = 1执行第二次时：建立一个 name = “张无忌” 的 user，但其 id = 2，发送同样的请求，可每次都是不同的 Resource。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /users</span><br><span class="line">Data:</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;张无忌&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>Create：建立一个可以完全独立存在的实体</li>
<li>范例：建立使用者<br>建立使用者前不需要建立任何的东西，就可以建立使用者了，使用者是可以完全独立的存在。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /users</span><br><span class="line">Data:</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;张无忌&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>Add：增加一个必须依赖于某个实体的实体<br>数据结构：1对多的关系</li>
<li>范例：Add a public key on behalf of a user 增加一个代表使用者的公钥<br>增加这个公钥之前，使用者必须存在，公钥必须归属于某个使用者之下公钥跟姓名一样，使用相同计算机的公钥就会相同，但不表示是同一个使用者，故公钥也会有自己的 ID我每次增加公钥时，都将生成不同的公钥 ID。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /admin/users/&#123;username&#125;/keys</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ul>
<li>Idempotent：每次执行操作时，PUT 都会取代 Resource，不管操作几次，使用者获取得 Resource 结果都是一样的。</li>
<li>Replace：不论资源如何，最终的资源状态都是一样的。<br>Resource 已存在时，或许不理会、或许先删除后建立 (取代)Resource 不存在时，直接建立</li>
<li>Add：添加唯一关系，建立这个唯一关系前，两个关连实体都必须存在。在没有建立关系前，两个关连实体都可以互相独立存在。</li>
<li>数据结构应为：多对多，且两个关连实体的 PK，同时也是关系实体的 PK、FK。</li>
<li>范例：增加使用者与角色的关系<br>增加使用者跟角色的关系前，使用者跟角色都必须存在；增加使用者跟角色的关系前，使用者跟角色可以独立存在使用者 【小明】，跟角色 2，的关系最多只能有一条关系 (使用者【小明】有角色 2 )，最少没有关系 (使用者【小明】没有角色 2 )执行第二次操作时，使用者【小明】跟角色 2 的从属关系仍然存在，也不会跑出第二条使用者【小明】跟角色 2 的从属关系。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT user/&#123;account&#125;/roles</span><br><span class="line">Data</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;role_id&quot;: &quot;2&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>范例：Follow a user 关注一个使用者<br>增加关注关系时，关注者与被关注者 (都是使用者) 都必须存在；增加关注关系时，关注者与被关注者 (都是使用者) 都必须存在关注者使用者【小明】，跟被关注者使用者【小王】，的关系最多只能有一条关系 (【小明】 关注 【小王】)，最少没有关系 (【小明】 不关注 【小王】)执行第二次操作时，关注者【小明】跟被关注者【小王】的关注关系仍然存在，也不会跑出第二条关注者【小明】跟被关注者【小王】的关注关系。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT  /user/following/&#123;username&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><ul>
<li>Edit：编辑可独立存在、且已经存在的实体，也就是产生新版本的实体，可能会影响其他 Resource。</li>
<li>范例：编辑使用者<br>编辑使用者，使用者已经存在，且我们可能有纪录编辑时间、编辑人、编辑IP，所以每次的编辑都会造成不一样的结果。<br>第一次编辑使用者，更新时间变为 08:00，编辑人 【张三】，第二次编辑使用者，更新时间变为 09:00，编辑人 【李四】。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATCH /users/&#123;account&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul>
<li>Idempotent：每次执行操作时，DELETE 都会删除相同的东西。</li>
<li>范例：删除使用者<br>第一次删除使用者【小明】，删除使用者【小明】第二次删除使用者【小明】，还是删除使用者【小明】，只不过使用者【小明】不存在了。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /users/&#123;account&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HTTP-Status-Code"><a href="#HTTP-Status-Code" class="headerlink" title="HTTP Status Code"></a>HTTP Status Code</h2><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。所有状态码的第一个数字代表了响应的五种状态之一。 除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。</p>
<p>而关于 RESTful API 的请求状态，通常有以下两种设计方案：</p>
<ul>
<li>方案一：使用 HTTP 状态码来表示请求状态，200 时返回的内容就是数据。</li>
<li>方案二：所有接口都返回 200 ，在响应内容里约定 错误码 或 错误信息。</li>
</ul>
<p>在实际应用中，应据具体情景及需要进行选择与调整。</p>
<table><tbody><tr><th>方案</th><th colspan="2">优劣比较</th></tr><tr><td rowspan="2">方案一</td><td>优点</td><td>对服务端来说较为简单方便</td></tr><tr><td>缺点</td><td>客户端难以根据状态代码处理复杂问题</td></tr><tr><td rowspan="2">方案二</td><td>优点</td><td>方便对返回数据进行统一处理和细粒度的控制</td></tr><tr><td>缺点</td><td>相当于放弃了HTTP状态代码的语义</td></tr></tbody></table>

<h3 id="常用HTTP状态代码"><a href="#常用HTTP状态代码" class="headerlink" title="常用HTTP状态代码"></a>常用HTTP状态代码</h3><table><tbody><tr><th>Code</th><th>Message</th><th>用途</th></tr><tr><th>1XX</th><th>Informational response</th><th>此类状态代码通常代表的响应都是信息性的，告诉客户端可以进行下一步操作。</th></tr><tr><td>100</td><td>Continue</td><td>表示服务端已接收到请求头，客户端可以继续发送请求体(如POST请求)。</td></tr><tr><td>101</td><td>Switching Protocols</td><td>表示服务端支持更优协议，让客户端在服务端更换协议后重新访问。</td></tr><tr><th>2XX</th><th>Successful</th><th>此类状态代码通常代表请求已成功被服务端接收、理解并接受。</th></tr><tr><td>200</td><td>OK</td><td>表示请求成功。</td></tr><tr><td>201</td><td>Created</td><td>表示请求已被实现，通常是在成功创建了某个资源。</td></tr><tr><td>202</td><td>Accepted</td><td>表示请求已被服务端接收，但尚未进行处理。</td></tr><tr><td>204</td><td>No Content</td><td>表示请求成功，但不会返回任何内容。</td></tr><tr><td>205</td><td>Reset Content</td><td>表示请求成功，但不会返回任何内容，并且要求客户端重置窗体。</td></tr><tr><th>3XX</th><th>Redirect</th><th>此类状态代码通常代表本次请求需要客户端采取进一步操作才能完成。通常用于复位向。</th></tr><tr><td>300</td><td>Multiple Choices</td><td>表示请求的资源有多个供可选择，客户端可自行选择一个进行请求的复位向。</td></tr><tr><td>301</td><td>Moved Permanently</td><td>表示请求的资源已经永久地移动到了新位置，并且将在Location域中携带该资源新的URI。</td></tr><tr><td>304</td><td>Not Modified</td><td>表示请求的资源无发生修改，将不会返回任何资源。</td></tr><tr><th>4XX</th><th>Client Error</th><th>此类状态代码通常代表客户端可能出现了错误。</th></tr><tr><td>400</td><td>Bad Request</td><td>表示客户端发出的请求有误(格式、大小、无效的...)，服务端不能/不会处理该请求。</td></tr><tr><td>401</td><td>Unauthorized</td><td>表示客户端未能提供必要的验证，服务端拒绝提供资源。</td></tr><tr><td>403</td><td>Forbidden</td><td>表示服务端理解了该请求，但客户端没有足够权限以访问，遂拒绝提供该资源。</td></tr><tr><td>404</td><td>Not Found</td><td>表示服务端无法找到请求的资源，其可能已经暂时(永久)失效。</td></tr><tr><td>408</td><td>Request Timeout</td><td>表示请求超时。</td></tr><tr><td>409</td><td>Conflict</td><td>表示请求的资源发送了冲突，通常是PUT请求。</td></tr><tr><td>410</td><td>Gone</td><td>表示请求的资源已经永久失效，客户端不应再次请求。</td></tr><tr><td>411</td><td>Length Required</td><td>表示服务端拒绝在没有定义Content-Length头的情况下接收该请求。</td></tr><tr><th>5XX</th><th>Server Error</th><th>此类状态代码通常代表由于服务端的原因，导致无法完成请求。</th></tr><tr><td>500</td><td>Internal Server Error</td><td>表示由于服务端遇到意料之外的变故，导致无法完成请求。</td></tr><tr><td>501</td><td>Not Implemented</td><td>表示服务端不支持完成请求所需的功能，导致无法完成请求。</td></tr><tr><td>502</td><td>Bad Gateway</td><td>表示作为网关或代理的服务段在执行请求时，从上游服务器获得了无效的响应。</td></tr><tr><td>503</td><td>Service Unavailable</td><td>表示由于某些原因(服务器超载或系统维护等)，导致暂时无法完成请求。</td></tr><tr><td>504</td><td>Gatewy Timeout</td><td>表示作为网关或代理的服务段在执行请求时，未能及时从上游服务器获得响应。</td></tr><tr><td>505</td><td>HTTP Version Not Supported</td><td>表示服务端不支持请求的HTTP协议版本，导致无法完成请求。</td></tr></tbody></table>

<blockquote>
<p>可参考本站<a href="http://a.biugle.cn/http-code">http状态码</a><br>以上内容<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0hUVFAlRTclOEElQjYlRTYlODAlODElRTclQTAlODE=">参考来源<i class="fa fa-external-link-alt"></i></span><br>需要查看完整HTTP状态代码请点击<span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMTAuaHRtbA==">w3c<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用指令汇总</title>
    <url>/git/</url>
    <content><![CDATA[<div class="note success no-icon"><p>先通过几张图片来大致了解一下Git的工作原理吧！<br><img data-src="/images/loading.gif" data-original="/git/relation3.jpg"></p>
</div>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li><strong>工作区</strong>：就是你在电脑里能看到的目录。</li>
<li><strong>暂存区</strong>：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库</strong>：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<span id="more"></span></li>
</ul>
<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/git/relation1.jpg">
<img data-src="/images/loading.gif" data-original="/git/relation2.jpg">
<img data-src="/images/loading.gif" data-original="/git/github.jpg">
</div>

<h2 id="关系介绍"><a href="#关系介绍" class="headerlink" title="关系介绍"></a>关系介绍</h2><p><strong>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</strong><br><img data-src="/images/loading.gif" data-original="/git/work.jpg" alt="关系图" title="工作图"></p>
<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 <code>&quot;index&quot;</code> 的区域是暂存区（stage, index），标记为 “master” 的是 master分支所代表的目录树。<br><strong>HEAD指针: 每个git仓库有且仅有一个HEAD指针，它通常指向当前某个活动的本地分支指针(最初本地仓库master)。也可以是某个提交记录、某个tag，但这会让其处于 detached HEAD（游离头）状态，此状态下的所有提交都无效。</strong><br>图中我们可以看出此时 <code>&quot;HEAD&quot;</code> 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。<br>图中的<code>objects</code>标识的区域为 Git 的对象库，实际位于 <code>&quot;.git/objects&quot;</code> 目录下，里面包含了创建的各种对象及内容。<br>当对工作区修改（或新增）的文件执行 <code>&quot;git add&quot;</code> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。<br>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。<br>当执行 <code>&quot;git reset HEAD&quot;</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。<br>当执行 <code>&quot;git rm --cached &lt;file&gt;&quot;</code> 命令时，会直接从暂存区删除文件，工作区则不做出改变。<br>当执行 <code>&quot;git checkout .&quot;</code> 或者 <code>&quot;git checkout -- &lt;file&gt;&quot;</code> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。<br>当执行 <code>&quot;git checkout HEAD .&quot;</code> 或者 <code>&quot;git checkout HEAD &lt;file&gt;&quot;</code> 命令时，会用 <code>HEAD</code> 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<h2 id="GIT介绍"><a href="#GIT介绍" class="headerlink" title="GIT介绍"></a>GIT介绍</h2><p>&emsp;&emsp;GIT是由C语言开发的分布式版本控制系统。</p>
<blockquote class="blockquote-center">
<p>分布式vs集中式</p>

</blockquote>

<blockquote>
<p>分布式版本控制系统</p>
</blockquote>
<ul>
<li>无需网络就可以进行所有版本控制操作</li>
<li>追踪并管理的是元数据</li>
<li>每个工作成员的机器都有完整的版本库</li>
</ul>
<blockquote>
<p>集中式版本控制系统</p>
</blockquote>
<ul>
<li>使用必须连接网络</li>
<li>追踪并管理的是文件</li>
<li>只有一个中央版本库</li>
</ul>
<h1 id="基本常用命令"><a href="#基本常用命令" class="headerlink" title="基本常用命令"></a>基本常用命令</h1><blockquote>
<p>第一次使用git的时候，需要设置用户信息和用户邮箱，用于辨识提交者身份。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &lt;git用户名&gt;</span><br><span class="line">git config --global user.email &lt;邮箱地址&gt;</span><br><span class="line">git config --list                           # 查看当前用户信息</span><br><span class="line">git config --global --list                  # 查看全局配置</span><br><span class="line">git config --local --list                   # 查看本项目配置</span><br><span class="line"></span><br><span class="line">git config --global alias.cm commit</span><br><span class="line">git config --global alias.br branch                   # 配置指令别名简写</span><br><span class="line"></span><br><span class="line">git config --global credential.helper store           # 输入一次账号密码后第二次就会记住账号密码</span><br><span class="line"></span><br><span class="line">git config --global core.ignorecase false             # 关闭忽略大小写</span><br><span class="line"></span><br><span class="line">git config --system core.longpaths true               # 配置长路径</span><br><span class="line"></span><br><span class="line">git config --global http.sslVerify false              # 禁用 SSL 验证</span><br><span class="line"></span><br><span class="line">git config --global core.protectNTFS false            # 关闭 NTFS 文件保护</span><br><span class="line"></span><br><span class="line">git config --global url.&quot;https://&quot;.insteadOf git://   # git:// 报错</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                    # 把当前的目录变成可以用git进行版本控制的git仓库，生成隐藏.git文件。</span><br><span class="line">git clone reposityUrl       # 从远程库中克隆到本地</span><br><span class="line">git status                  # 查看所有文件状态 加参数`-s`显示已修改的</span><br><span class="line">git add XX                  # 把xx文件添加到暂存区去。</span><br><span class="line">git add –A                  # git add --all的缩写，添加全部到暂存区</span><br><span class="line">git add –u                  # 把文件的删除和修改添加到暂存区（不包括新增）</span><br><span class="line">git add .                   # 监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区</span><br><span class="line">git commit -m &quot;message&quot;     # 从暂存区提交到本地仓库</span><br><span class="line">git commit -a -m &quot;message&quot;  # 相当于省略git add，但是无法提交新增的文件</span><br><span class="line">git push origin master      # Git会把master分支推送到远程库对应的远程分支上</span><br><span class="line">git clean                   # 删除非管理对象的文件</span><br></pre></td></tr></table></figure>
<blockquote>
<p>“commit message”内容尽量规范！<br>当某一次提交后，突然想起漏提交了文件，或不小心提交了不满意的代码时，可以使用<code>git commit --amend -m &quot;message&quot;</code>指令。它可以在不增加一个新的commit-id的情况下将新修改的代码追加到前一次的commit-id中。提交之后message也将被本次的message覆盖，所以还需要再次添加上次的message。</p>
</blockquote>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin name</span><br><span class="line">git push –u origin master</span><br><span class="line">git push origin --delete name     # 删除远程分支</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把当前master分支推送到远程库; <code>-u</code>表示记住分支和地址，下次使用<code>git push</code>即可。</p>
</blockquote>
<h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin reposityUrl      # 关联一个远程库</span><br><span class="line">git remote                             # 查看远程库的信息</span><br><span class="line">git remote –v                         # 查看远程库的详细信息</span><br></pre></td></tr></table></figure>

<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone reposityUrl                   # 从远程库中克隆</span><br><span class="line">git clone -b branchName reposityUrl     # 克隆指定分支</span><br></pre></td></tr></table></figure>

<h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从远程仓库拉下来到本地库然后合并相当于<code>git fetch</code>+<code>git merge</code>。<br>一般push前先拉去最新版本，避免代码冲突，如果有冲突需要解决了冲突才能提交。</p>
</blockquote>
<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch               # 从远程库抓下最新版本，但是不合并</span><br></pre></td></tr></table></figure>
<blockquote>
<p>fetch是从远程库到本地库，但是未在工作区，需要<code>git merge</code></p>
</blockquote>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge dev           # 在当前的分支上合并dev分支</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分支合并也是在本地完成，新的分支只有在合并后才允许被删除。<br>如果分支合并是出现冲突需要解决了冲突才能合并，使用<code>git status</code>查看冲突文件。</p>
</blockquote>
<h2 id="branch-checkout"><a href="#branch-checkout" class="headerlink" title="branch/checkout"></a>branch/checkout</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch             # 查看当前所有的分支，前面有&quot;*&quot;的为目前所在的分支。</span><br><span class="line">git branch name        # 创建分支</span><br><span class="line">git branch –r         # 看远程所有分支</span><br><span class="line">git branch –a         # 查看本地远程分支</span><br><span class="line">git branch –d name    # 删除分支，git push origin --delete name     # 删除远程分支。</span><br><span class="line">git checkout name      # 切换分支</span><br><span class="line">git checkout –b name  # 创建并切换到name分支上</span><br><span class="line">git checkout -- file</span><br><span class="line">git clone -b name url # 克隆指定分支代码文件</span><br><span class="line">git push name         # 提交到指定分支</span><br><span class="line">合并分支（主分支操作）</span><br><span class="line">git checkout master</span><br><span class="line">git merge &lt;commit&gt;or&lt;branch_name&gt;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>git checkout -- file</code>相当于取消对文档的修改，将最新的本地版本库的本文件复制覆盖它。（比较危险！）</p>
</blockquote>
<h2 id="reflog-log"><a href="#reflog-log" class="headerlink" title="reflog,log"></a>reflog,log</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log               # 显示所有提交过的版本信息：commit id，提交者，日期（完成后按Q键退出）</span><br><span class="line">git reflog            # 查看历史记录的commit id</span><br></pre></td></tr></table></figure>
<div class="note info"><p>想看到自己的操作记录，则可以使用log与reflog，它两个的区别如下:</p>
<ol>
<li><code>git log</code>命令可以显示所有提交过的版本信息；<br>如果感觉太繁琐，可以加上参数<code>--pretty=oneline</code>，只会显示版本号和提交时的备注信息。</li>
<li><code>git reflog</code>可以查看所有分支的所有操作记录。（包括已经被删除的commit记录和reset的操作）</li>
</ol>
</div>

<h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^        </span><br><span class="line">git reset --hard HEAD~        # 回退到上一个版本</span><br><span class="line">git reset HEAD^        </span><br><span class="line">git reset HEAD~               # 回退到上一个版本</span><br><span class="line">git reset --hard HEAD~100     # 回退到 100 个版本</span><br><span class="line"></span><br><span class="line">git reset head -- file        # 不加file则全部退回  </span><br><span class="line">git reset file                # 将本地仓库的当前版本退回至暂存区，相当于取消暂存</span><br></pre></td></tr></table></figure>
<p>版本回退的操作一般是先查看历史提交版本的commit id，使用<code>git reflog</code><br>接着使用命令<code>git reset --hard commit_id</code>回退版本<br>最后 <code>git push -f （origin master可写可不写）</code>提交远程库<br>版本退回是从本地仓库到暂存区，如果已经提交远程库，此时的版本是低于最新的版本的会拒绝提交，<br>所以需要用<code>git push -f origin master</code>强制提交。</p>
<h2 id="status"><a href="#status" class="headerlink" title="status"></a>status</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看你的文件在暂存区和工作目录的状态，默认是较为详细的显示，并提示你可以用何种命令完成你接下来可能要做的事情。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure>
<p>较为简单的输出当前的状态，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">M  README.md</span><br><span class="line"> D hello.rb</span><br><span class="line">?? world.java</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你可以看到，在简短输出中，有两栏。第一栏是暂存区的，第二栏则是工作目录的。这里表示：</p>
</blockquote>
<ul>
<li><code>README.md</code> 在暂存区中的状态是 <code>modify</code></li>
<li><code>hello.rd</code> 在工作目录中的状态是 <code>delete</code></li>
<li><code>world.java</code> 还未添加到版本控制。</li>
</ul>
<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff XX         # 查看XX文件修改了哪些内容</span><br><span class="line"></span><br><span class="line">git diff            # 工作目录和暂存区</span><br><span class="line">git diff --cached   # 暂存区和本地仓库</span><br><span class="line">git diff HEAD       # 工作目录和本地仓库</span><br><span class="line">git diff --stat     # 显示信息摘要</span><br></pre></td></tr></table></figure>

<h2 id="rm-mv"><a href="#rm-mv" class="headerlink" title="rm, mv"></a>rm, mv</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm                            # 将文件从暂存区和工作目录删除，-f 为强制删除</span><br><span class="line">git rm filename                   # 删除文件</span><br><span class="line">git rm –r dirname                # 删除文件夹 –r 表示递归所有子目录</span><br><span class="line">git rm --cached &lt;path&gt;            # 将文件从暂存区中删除</span><br><span class="line">git mv &lt;old_path&gt; &lt;new_path&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>git rm</code>用来删除文件、目录。<code>git mv</code>命令用于移动或重命名一个文件、目录。</p>
</blockquote>
<p>比如删除photos文件，本地删除后，远程仓库还会有，所以执行如下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r photos</span><br><span class="line">git commit -m &quot;删除相册&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h2><h3 id="添加子模组"><a href="#添加子模组" class="headerlink" title="添加子模组"></a>添加子模组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add url         # 添加子模组</span><br><span class="line">git submodule init            # 子模组初始化</span><br><span class="line">git submodule update          # 子模组更新</span><br><span class="line">git submodule update --remote # 子模组更新后父模组也要更新</span><br><span class="line"></span><br><span class="line">当需要用到别人的项目代码时，可以在自己的仓库添加子模组。</span><br><span class="line">远程库</span><br><span class="line">git submodule add 远程路径     # 添加子模组</span><br><span class="line">git submodule init             # 初始化子模组/刷新</span><br><span class="line">git commit -m “备注”         # 提交变动到本地库</span><br><span class="line">git push origin master</span><br><span class="line">本地库</span><br><span class="line">git submodule add 相对路径     # 添加子模组</span><br><span class="line">git submodule init             # 初始化子模组/刷新</span><br><span class="line">git commit -m “备注”         # 提交变动到本地库</span><br><span class="line">git push origin master         # 将本地库同步到远程库</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改、删除子模组"><a href="#修改、删除子模组" class="headerlink" title="修改、删除子模组"></a>修改、删除子模组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果远程库子模组有更新, 你要更新本地库子模组应该在git pull之后运行</span><br><span class="line">git submodule update</span><br><span class="line">如果要更新子模组，子模组和父版本库要分别提交（注意！子模组进行更新后，父版本库需要添加这个更新再推送。即 git add。）</span><br><span class="line">删除子模组 手动删除或者命令删除 然后修改config文件</span><br><span class="line">或者</span><br><span class="line">git rm --cached 子模块目录 删除子模块快取</span><br><span class="line"></span><br><span class="line">rm -rf 子模块目录 删除子模块目录</span><br><span class="line"></span><br><span class="line">vim .gitmodules 删除对于子模块相关条目</span><br><span class="line"></span><br><span class="line">vim .git/config 删除配置项中子模块相关条目</span><br><span class="line"></span><br><span class="line">修改子模组（本地）</span><br><span class="line">修改后</span><br><span class="line">git submodule add 相对路径      # 添加子模组</span><br><span class="line">git submodule init              # 初始化子模组/刷新</span><br><span class="line">git commit -m “备注”          # 提交变动到本地库</span><br><span class="line">git push origin master          # 将本地库同步到远程库</span><br><span class="line">然后父模组</span><br><span class="line">git status</span><br><span class="line">git add . or -A</span><br><span class="line">git commit -m &quot;修改子模组&quot;</span><br><span class="line">git push orgin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note primary"><p>当一个远程库有子模组时，直接clone子模组只是一个空文件夹，需要进入子模组的空文件夹<code>init</code>和<code>update</code>才行。<br>或者使用递归克隆<code>git clone --recursive 远程库</code><br>子模组更新后，父模组必须更新，因为需要更新commit id。</p>
</div>

<h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a v1.0                    # 给最新一次提交打标签</span><br><span class="line">git tag -a &lt;tagname&gt; -m &quot;标签&quot;     # 指定标签信息命令</span><br><span class="line">git tag                            # 查看版本打的Tag，显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。</span><br><span class="line">git tag tagname                   # 给本次提交添加标签</span><br><span class="line">git push --tag                    # 推送本地标签到远程 $ git push origin –tags（所有标签）/tagname（单个标签） </span><br><span class="line">git tag -d tagname                # 删除本地标签</span><br><span class="line">git push --delete origin tagname  # 删除远程标签</span><br></pre></td></tr></table></figure>

<p>我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -l &#x27;v1.4.2.*&#x27;</span><br><span class="line">结果全为v1.4.2开头的标签。</span><br><span class="line">v1.4.2.1</span><br><span class="line">v1.4.2.2</span><br><span class="line">v1.4.2.3</span><br><span class="line">v1.4.2.4</span><br></pre></td></tr></table></figure>
<div class="note success"><p>当你执行<code>git tag -a</code>命令时，Git会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。<br>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p>
</div>
<p>例如，假设我们发布了提交85fc7e7(最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7</span><br><span class="line">$ git log --oneline --decorate --graph</span><br><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 (tag: v0.9) 第一次版本提交</span><br><span class="line"></span><br><span class="line">git show</span><br><span class="line">可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</span><br></pre></td></tr></table></figure>
<h3 id="同步远程-本地Tag"><a href="#同步远程-本地Tag" class="headerlink" title="同步远程-本地Tag"></a>同步远程-本地Tag</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag | xargs git tag -d</span><br><span class="line">git fetch --tags</span><br></pre></td></tr></table></figure>

<h3 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h3><p>&emsp;&emsp;默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可：如果要一次推送所有本地新增的标签上去，可以使用 –tags 选项：然后，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。</p>
<h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash               # 把当前的工作隐藏起来，等以后恢复现场后继续工作。</span><br><span class="line">git stash list          # 查看所有被隐藏的文件列表</span><br><span class="line">git stash clear         # 清空当前仓库所有 stash</span><br><span class="line"></span><br><span class="line"># 暂存当前工作进度</span><br><span class="line">git stash</span><br><span class="line"> </span><br><span class="line"># 列出所有stash项</span><br><span class="line">git stash list</span><br><span class="line"># 会显示</span><br><span class="line"># stash@&#123;0&#125;: WIP on branch: 1234567 Some work</span><br><span class="line"># stash@&#123;1&#125;: WIP on branch: 89abcd7 Other work</span><br><span class="line"># stash@&#123;2&#125;: WIP on branch: fedcba9 More work</span><br><span class="line"> </span><br><span class="line"># 应用最新的stash项</span><br><span class="line">git stash apply</span><br><span class="line"> </span><br><span class="line"># 应用指定的stash项，例如stash@&#123;2&#125;</span><br><span class="line">git stash apply stash@&#123;2&#125;</span><br><span class="line"> </span><br><span class="line"># 删除最新的stash项</span><br><span class="line">git stash drop</span><br><span class="line"> </span><br><span class="line"># 删除指定的stash项，例如stash@&#123;2&#125;</span><br><span class="line">git stash drop stash@&#123;2&#125;</span><br><span class="line"> </span><br><span class="line"># 应用最新的stash项，并在应用后删除它</span><br><span class="line">git stash pop</span><br><span class="line"> </span><br><span class="line"># 清除所有stash项</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<h2 id="gitk"><a href="#gitk" class="headerlink" title="gitk"></a>gitk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitk                    # git自带GUI</span><br><span class="line">gitk --all</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv">Gearn Git Branching<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>（<br>提示A：在克隆远程库曾出现问题</p>
<p>没有弹出输入框验证框，直接就提示认证失败。</p>
<p>解决办法：使用Git输入下面两条命令（需要管理员权限）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git credential-manager uninstall         # 清除缓存账号密码（卸载）</span><br><span class="line">git credential-manager install           # 安装资格证书</span><br></pre></td></tr></table></figure>
<p>提示B：在提交上传远程库曾出现问题<br>git push提交到远程仓库时，git会卡住等半天都没反应，只能按Ctrl+C退出。</p>
<p>解决办法：使用Git输入以下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global sendpack.sideband false      # 配置文件添加属性</span><br></pre></td></tr></table></figure>
<p>输入下面的命令可以查看仓库配置,看到sendpack.sideband等于false就可以重新push了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --local -l         # 查看配置信息</span><br></pre></td></tr></table></figure>
<p>）</p>
<h2 id="托管网站"><a href="#托管网站" class="headerlink" title="托管网站"></a>托管网站</h2><blockquote>
<p>托管网站解释</p>
</blockquote>
<ul>
<li>一个组织可以有 0-N 个用户，一个用户默认为一个组织，可以加入多个组织。一个组织有 0-N 个仓库，一个仓库中有 0-N 个代码文件。</li>
<li>工单可以反馈问题情况等，里程碑是开发者建立（要在某个时间之前完成什么功能）。</li>
<li>提交(Commit)可以与工单关联，工单(Issue)可以与里程碑关联。</li>
<li>版本发布是发布重要的版本</li>
<li>百科是开发者编写关于这个项目的一些内容</li>
<li>动态可以看到仓库的变动信息</li>
<li>fork 相当于克隆仓库 后续不会改变。镜像仓库可以随父仓库更新，主要用于国外网站，创建一个国内的镜像来加快响应速度。</li>
</ul>
<blockquote>
<p>托管网站/平台 issue 相关常见标签</p>
</blockquote>
<ul>
<li><code>bug</code> 描述的问题是一个 bug</li>
<li><code>enhancement</code> 功能增强，没有 feature 也可以指 New feature or request。</li>
<li><code>feature</code> 新功能</li>
<li><code>duplicate</code> 问题重复</li>
<li><code>invalid</code> 可用的，不是 bug。</li>
<li><code>question</code> 疑问，需要进一步的信息。</li>
<li><code>wontfix</code> 不会修复此问题</li>
<li><code>help-wanted</code> 需要帮助</li>
<li><code>good first issue</code> Good for newcomers</li>
</ul>
<blockquote>
<p>托管网站/平台 issue 相关内部流程-理想化</p>
</blockquote>
<ul>
<li>收到产品需求后建立 issue</li>
<li>管理员评估 issue 并分配标签，指派负责人。</li>
<li>负责人检查已指派的 issue，选择项目发布 tag 以及建立里程碑(Milestone)。</li>
<li>负责人开发并推送代码，commit 信息开头或末尾附带 issue 编号，比如：<code>Feat: [#1] 提交代码信息</code> / <code>Feat: 提交代码信息 [#1]</code>。</li>
<li>也可以后续对接其他平台，使用托管网站 api 即可。</li>
<li>这样就可以通过一个平台了解工作进度与开发发布任务</li>
</ul>
<blockquote>
<p>License</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/git/license.jpg" alt="参考图"></p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><blockquote>
<p>Git 开发规则</p>
</blockquote>
<ul>
<li>Master 的 BUG 必须最少且趋近于零，为最稳定的版本。</li>
<li>每次 Commit 讯息应该具体确实填写，不可模稜两可、不可出现版本号，eg: 修复BUG、增加功能。</li>
<li>禁止 Commit IDE 的 project data</li>
<li>禁止上传垃圾程序码</li>
</ul>
<blockquote>
<p>分支 (Branch)</p>
</blockquote>
<ul>
<li>命名规则：应以此分支主要目的命名 (修复BUG、新增某特定功能)</li>
<li>不可出现版本号、模块ID。</li>
<li>合并后的分支应删除</li>
<li>禁止删除历史版本、造成Branch断裂。</li>
<li>禁止将已发生的冲突上传到 Git 。</li>
</ul>
<blockquote>
<p>推荐使用SourceTree提高协作开发效率，可以建立一套开发体系，规范团队协作，规范开发、测试流程，也可以使用GitFlow工作流与HotFix等。</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vYWxsLWFib3V0LWdpdA==">Gitee 教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9scnVpaGFvLmNuL3Bvc3RzL2dpdC5odG1s">参考文章<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>一些开发规则</title>
    <url>/dev_rules/</url>
    <content><![CDATA[<div class="note success no-icon"><h1 id="精神"><a href="#精神" class="headerlink" title="精神"></a>精神</h1><ul>
<li>代码优雅，可读性高。</li>
<li>注释内容简明扼要。</li>
<li>绝对不能写死程序。</li>
<li>不留不要用的、垃圾程序代码。</li>
<li>其他内容看详情。</li>
</ul>
</div>
<span id="more"></span> 


<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul>
<li>Master 的 版本必须是最稳定的版本。</li>
<li>每次 Commit 信息应该如实填写，不可模棱两可。</li>
<li>禁止 上传 IDE 的 project data。</li>
<li>开始工作前应先进行fetch/pull同步远程代码，并解决冲突，然后再开始写代码。</li>
</ul>
<h2 id="分支-Branch"><a href="#分支-Branch" class="headerlink" title="分支 (Branch)"></a>分支 (Branch)</h2><ul>
<li>Master 仅为已是出的版本内容，BUG 必须最少且趋近于零，为最稳定的版本。</li>
<li>命名规则：应以此分支主要目的命名 (修复BUG、新增某特定功能)。</li>
<li>rc 为候选释出的版本内容，尚未释出的修改内容都必须合并回 rc 。</li>
<li>不可出现版本号、文件名、档目录信息。</li>
<li>合并后的分支应删除。</li>
</ul>
<h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><ul>
<li>一个功能commit一次，应同时修改更新日志。</li>
<li>commit前应确认所提交文件及修改确实无误</li>
<li>禁止 commit 测试代码 (如：var_dump, dd, console.log, alert 等)</li>
</ul>
<h3 id="基本样板"><a href="#基本样板" class="headerlink" title="基本样板"></a>基本样板</h3><blockquote>
<p>commit message 须遵循以下规范：</p>
</blockquote>
<p><span style="color: red;">(若有 issue / pull request 一律需附上编号)</span><br><code>&#123;type&#125;:&#123;subject (并在50个字内)&#125; #&#123;issue/pull request&#125;</code></p>
<h3 id="详细规则"><a href="#详细规则" class="headerlink" title="详细规则"></a>详细规则</h3><table>
<thead>
<tr>
<th align="center">type</th>
<th align="left">类型</th>
<th align="left">范例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">调整</td>
<td align="left">Feat</td>
<td align="left">Feat: {变动或新增/优化内容} (#issueID)</td>
<td align="left">调整功能，需叙述现况(before)、调整后(after)。</td>
</tr>
<tr>
<td align="center">新增</td>
<td align="left">Add</td>
<td align="left">Add: {单纯新增内容} (#issueID)</td>
<td align="left">单纯新增功能</td>
</tr>
<tr>
<td align="center">删除</td>
<td align="left">Remove</td>
<td align="left">Remove: {删除内容} (#issueID)</td>
<td align="left">删除功能，须说明删除原因。</td>
</tr>
<tr>
<td align="center">修正</td>
<td align="left">Fix</td>
<td align="left">Fix: {修复内容} (#issueID)</td>
<td align="left">修复已知的 BUG</td>
</tr>
<tr>
<td align="center">重写</td>
<td align="left">Refactor</td>
<td align="left">Refactor: {重写功能名称} (#issueID)</td>
<td align="left">不是新增功能，也不是修补 bug 的程序代码变动，单纯重写某个功能的程序代码，并不影响功能结果。</td>
</tr>
<tr>
<td align="center">优化</td>
<td align="left">Perf</td>
<td align="left">Perf: {改善内容} (#issueID)</td>
<td align="left">改善程序代码的效能</td>
</tr>
<tr>
<td align="center">退版</td>
<td align="left">Revert</td>
<td align="left">Revert: {恢复的版本 commit message+原因} (#issueID)</td>
<td align="left">恢复某一个 commit 的版本</td>
</tr>
<tr>
<td align="center">格式</td>
<td align="left">Style</td>
<td align="left">Style: {修改内容} (#issueID)</td>
<td align="left">不影响代码含义的更改(例如空格、格式化、少了分号等等)</td>
</tr>
<tr>
<td align="center">文档</td>
<td align="left">Docs</td>
<td align="left">Docs: {调整内容} (#issueID)</td>
<td align="left">只是文档的更改</td>
</tr>
<tr>
<td align="center">工具</td>
<td align="left">Chore</td>
<td align="left">Chore: {工具内容/功能} (#issueID)</td>
<td align="left">对构建或者辅助工具的更改</td>
</tr>
<tr>
<td align="center">测试</td>
<td align="left">Test</td>
<td align="left">Test: {测试功能/代码的调整} (#issueID)</td>
<td align="left">添加或修正测试</td>
</tr>
</tbody></table>
<h2 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h2><h3 id="命名原则"><a href="#命名原则" class="headerlink" title="命名原则"></a>命名原则</h3><ul>
<li>小变动升小版号 1.0.0=&gt;1.0.1</li>
<li>资料表变动或者较大调整升中版号 1.0.0=&gt;1.1.0</li>
<li>重大变动或架构调整升大版号 1.0.0=&gt;2.0.0</li>
</ul>
<h3 id="删除原则"><a href="#删除原则" class="headerlink" title="删除原则"></a>删除原则</h3><ul>
<li>版号过多时可删除非重要版号</li>
<li>应至少保留每个中版号的最新一版</li>
<li>应至少保留最近更新的十个版号</li>
</ul>
<h1 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h1><ul>
<li>URL中不应该包含动词。</li>
<li>URL的结尾不应该包含 ‘/’（有‘/’和无‘/’表示的资源是不同的）。</li>
<li>URL中的正斜杠 ‘/’必须用于表达层次关系。</li>
<li>URL中应该使用‘-’连接单词提高可读性，而不是‘_’。</li>
<li>URL路径中首选小写字母。</li>
<li>URL路径中的名称应使用复数形式（除非资源为唯一资源）。</li>
</ul>
<h1 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h1><ul>
<li>命名应根据内容做有意义的命名，让后续维护人员可以一目了然!</li>
<li>即使不会发生错误，程序代码英文大小写也需明确区分。</li>
<li>我自己的标准是：<ol>
<li>绝对不可使用没有意义的命名。</li>
<li>变量和函数命名最好是（动词+名词：setName、getId或者set_name、get_id等等）。</li>
<li>资源命名最好是（使用下划线区分：nav_logo.png等等)。</li>
<li>css id、class命名最好是（名词短语，以 <code>-</code> 隔开：user-id等等）。</li>
</ol>
</li>
</ul>
<h2 id="语意"><a href="#语意" class="headerlink" title="语意"></a>语意</h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">命名规则</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">属性 (Attribute, Property)</td>
<td align="left">名词<br>user_name、userName</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">方法 (Method, Function)</td>
<td align="left">动词+名词<br>getUserName、get_user_name</td>
<td align="left">常见的动词有：get、set、update、delete、remove</td>
</tr>
</tbody></table>
<blockquote>
<p>不管使用以上哪种规则，在开发同一个项目时，必须使用同一种规则，严禁混用。</p>
</blockquote>
<p><code>    注意：我自己是这样使用的：在JavaScript中，属性、变量和方法命名都使用字母大小写区分的方式；在php中，变量和方法命名使用下划线区分的方式。但是，在面向对象编程中，class中，全部使用字母大小写区分，类名的所有单词首字母大写，并且文件名即类名。</code></p>
<h3 id="附加表"><a href="#附加表" class="headerlink" title="附加表"></a>附加表</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">面向对象中动词使用</th>
<th align="left">数据库</th>
<th align="left">METHOD(restful)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">增-<strong>C</strong>REATE</td>
<td align="left"><strong>add</strong>/create</td>
<td align="left">INSERT</td>
<td align="left">GET</td>
</tr>
<tr>
<td align="center">查-<strong>R</strong>EAD</td>
<td align="left"><strong>get</strong>/list</td>
<td align="left">SELECT</td>
<td align="left">POST</td>
</tr>
<tr>
<td align="center">改-<strong>U</strong>PDATE</td>
<td align="left"><strong>set</strong>/replace/edit/add</td>
<td align="left">UPDATE</td>
<td align="left">PUT/PATCH</td>
</tr>
<tr>
<td align="center">删-<strong>D</strong>ELETE</td>
<td align="left"><strong>remove</strong>/delete</td>
<td align="left">DELETE</td>
<td align="left">DELETE</td>
</tr>
</tbody></table>
<h2 id="字母与分隔"><a href="#字母与分隔" class="headerlink" title="字母与分隔"></a>字母与分隔</h2><table style="background: #fff;"><tbody><tr><th>语言</th><th>变量 (Variable, Parameter, Argument)</th><th>常量 (Constant)</th><th>面向对象 - 类名 (Class Name)</th><th>面向对象 - 成员 (mebmer)</th></tr><tr><td>HTML、CSS</td><td>全部小写，不同单字以「-」分隔 <br> user-id</td><td colspan="3"></td></tr><tr><td>JavaScript</td><td>首字小写，不同单字「首字以大写」分隔 <br> userId</td><td rowspan="2">全部大写，不同单字以「_」分隔<br>MAX_COUNT</td><td rowspan="2">首字大写，不同单字「首字以大写」分隔<br>一个文件放一个 Class<br>文件名即为 Class Name<br>User</td><td rowspan="2">公有 (public)&nbsp;: 首字小写，不同单字「首字以大写」分隔 <br> name, getName<br>私有 (private): _公有命名规则<br> _name, _getName</td></tr><tr><td>PHP</td><td>全部小写，不同单字以「_」分隔 <br> user_id</td></tr><tr><td>SQL</td><td>由使用者定义的：表名、字段名<br>全部小写，不同单字以「_」分隔</td><td>SQL语法、函数 <br> 全部大写 <br> SELECT、INSERT INTO</td><td colspan="2"> </td></tr></tbody></table>

<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><ul>
<li>程序代码编写</li>
<li>每个函数应该注释，注释应包含函数功能说明、自变量说明。</li>
<li>不必要的代码不要写，也禁止放到注释里面!</li>
<li>if-else 的 {} 严禁省略。</li>
<li>{} 起始一律跟在前一个功能的最后，禁止换行</li>
</ul>
<h2 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function test()&#123;</span><br><span class="line">  //do something</span><br><span class="line">  if($a === $b)&#123;</span><br><span class="line">    //do something</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="错误写法"><a href="#错误写法" class="headerlink" title="错误写法"></a>错误写法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function test()</span><br><span class="line">&#123;</span><br><span class="line">  //do something</span><br><span class="line">  if($a === $b)</span><br><span class="line">  &#123;</span><br><span class="line">    //do something</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>程序代码排版<ul>
<li>任何程序代码应该以 2 个 space 为一个阶层做好排版、不可使用 tab。</li>
</ul>
</li>
<li>函数 (Function, Methd)<ul>
<li>函数声明时需在函数上方加上函数注释，注释应包含函数说明、自变量内容 (自变量类型、自变量英文名称、自变量说明)、 回传值内容 (回传值类型、回传值说明)</li>
</ul>
</li>
<li>类 (Class)<ul>
<li>一个类 (Class) 的声明只能存在一个文件。</li>
<li>类 (Class) 的声明文件，文件名必须为类名。</li>
</ul>
</li>
<li>其他<ul>
<li>链接本地任何其他资源 (图片、文件、网站) 皆使用相对路径，禁止使用绝对路径，非本地资源除外。</li>
</ul>
</li>
</ul>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="程序代码编写"><a href="#程序代码编写" class="headerlink" title="程序代码编写"></a>程序代码编写</h2><ul>
<li>禁止在 HTML 使用 <code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>，一律使用外部文件引用方式引用 CSS、JavaScript文件。</li>
<li>HTML 标签需成双成对，有头有尾。</li>
<li>区块标签：<code>&lt;tag&gt;&lt;/tag&gt;</code></li>
<li>单标签：<code>&lt;tag /&gt;</code></li>
<li>禁止使用已被 HTML 舍弃的旧标签、属性，如：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">basefont</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strike</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listing</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plaintext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmp</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html attribute --&gt;</span></span><br><span class="line">align</span><br><span class="line">bgcolor</span><br><span class="line">color</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="程序代码编写-1"><a href="#程序代码编写-1" class="headerlink" title="程序代码编写"></a>程序代码编写</h2><blockquote>
<p>CSS 的定义应该独立一个 CSS 文件，禁止使用 <code>&lt;style&gt;</code> 或 <code>style</code> 属性直接在 HTML 中定义样式。（js也是一样。）</p>
</blockquote>
<p><code>就算是自己本身写测试代码，使用 &quot;&lt;style&gt;&quot; 或者 &quot;&lt;script&gt;&quot; 也应该明确写出 &quot;[type]&quot; 属性。</code></p>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="程序代码编写-2"><a href="#程序代码编写-2" class="headerlink" title="程序代码编写"></a>程序代码编写</h2><ul>
<li>禁止使用 HTML 字符串，一律使用 Dom 产生 HTML</li>
<li>禁止省略箭头函数 (Arrow function) 的括号<br>正确<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = (a, b) =&gt; &#123;</span><br><span class="line">  c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
错误 (这是允许的，但造成程序代码阅读困难，故禁止)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a  =&gt; c;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>JavaScript 注释应该遵循 JSDoc 的标准编写</p>
<h3 id="全局变量-Global"><a href="#全局变量-Global" class="headerlink" title="全局变量 (Global)"></a>全局变量 (Global)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* global $b, Biugle */</span><br></pre></td></tr></table></figure>
<h3 id="常量-Constant"><a href="#常量-Constant" class="headerlink" title="常量 (Constant)"></a>常量 (Constant)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 常量说明</span><br><span class="line"> * @type &#123;常量类型&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p><strong>Example</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用者ID</span><br><span class="line"> * @type &#123;String&#125;</span><br><span class="line"> */</span><br><span class="line">var userId = &#x27;Hello&#x27;;</span><br></pre></td></tr></table></figure>
<h3 id="函数、方法-Function-Method"><a href="#函数、方法-Function-Method" class="headerlink" title="函数、方法 (Function, Method)"></a>函数、方法 (Function, Method)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 函数用途说明</span><br><span class="line"> * @param &#123;自变量类型&#125; 自变量名称 自变量说明</span><br><span class="line"> * @param &#123;自变量类型&#125; [选择性自变量名称] 自变量说明</span><br><span class="line"> * @param &#123;自变量类型&#125; [选择性自变量名称=自变量默认值] 自变量说明</span><br><span class="line"> * @returns &#123;回传值类型&#125; 回传值说明</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p><strong>Example</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 取得使用者</span><br><span class="line"> * @param &#123;Int&#125; userId 使用者ID</span><br><span class="line"> * @param &#123;Object&#125; [options] 其他选项</span><br><span class="line"> * @param &#123;String&#125; [options.query=&#x27;a&#x27;] 查询关键词 默认为 a</span><br><span class="line"> * @returns &#123;Object&#125; 用户数据</span><br><span class="line"> */</span><br><span class="line">var getUser = function(userId, options)&#123;</span><br><span class="line">  //do something</span><br><span class="line">  return user;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>另外补充一点，在调试Js代码后，通常要强制刷新后才有效。在Js中，通常使用一些方法或者css属性时，有 &quot;-&quot; 的应该改为后面第一个单词字母大写。（例：font-weight=&gt;fontWeight）</code></p>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="前端参数取得"><a href="#前端参数取得" class="headerlink" title="前端参数取得"></a>前端参数取得</h2><p>参数取得需透过 filter_input 函数取得，不得使用 $_GET、 $_POST</p>
<h2 id="输出到前台"><a href="#输出到前台" class="headerlink" title="输出到前台"></a>输出到前台</h2><p>参数命名必须为：全部小写，不同单字以「_」分隔<br>方法命名相同。</p>
<h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><p>PHP 注释应该遵循 PHPDoc 的标准编写</p>
<h2 id="成员变量-Member"><a href="#成员变量-Member" class="headerlink" title="成员变量 (Member)"></a>成员变量 (Member)</h2><p>成员变量只的是 Class 内的成员变量，我们都会要求替成员变量增加注释说明。通常 Function 的变量除非太特别否则都不需要特别注释说明。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>目录一律使用小写字母，目录分隔符需考虑Linux与Windows的情况不同而改变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 成员变量说明</span><br><span class="line"> * @type &#123;类型&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p><strong>Example</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用者ID</span><br><span class="line"> * @type &#123;String&#125;</span><br><span class="line"> */</span><br><span class="line">$userId = &#x27;Hello&#x27;;</span><br></pre></td></tr></table></figure>
<h2 id="函数、方法-Function-Method-1"><a href="#函数、方法-Function-Method-1" class="headerlink" title="函数、方法 (Function, Method)"></a>函数、方法 (Function, Method)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 函数用途说明</span><br><span class="line"> * @param 自变量类型 自变量名称 自变量说明</span><br><span class="line"> * @option 自变量选项类型 自变量选项名称 自变量选项说明</span><br><span class="line"> * @uses 全局变量 全局变量说明</span><br><span class="line"> * @returns 回传值类型 回传值说明</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p><strong>Example</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 取得使用者</span><br><span class="line"> * @param int userId 使用者ID</span><br><span class="line"> * @param object options 其他选项</span><br><span class="line"> * @option string options[&#x27;query&#x27;] 查询关键词</span><br><span class="line"> * @uses $_POST[&#x27;role_id&#x27;] 从前端以POST取得角色ID</span><br><span class="line"> * @returns object 用户数据</span><br><span class="line"> */</span><br><span class="line">function getUser($userId, $options)&#123;</span><br><span class="line">  //do something</span><br><span class="line">  return $user;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><ul>
<li>禁止使用 Table Join。</li>
<li>禁止使用 Oracle Trigger。</li>
<li>禁止将查询数据库的 SQL 放在循环中查询<h2 id="SQL-编写"><a href="#SQL-编写" class="headerlink" title="SQL 编写"></a>SQL 编写</h2></li>
<li>属于 SQL 语法使用大写 (SELECT, WHERE, INSERT etc..)</li>
<li>属于使用者自己定义的使用小写 (表名 table name, 字段名 column name etc..)</li>
<li>表名、字段名前后需加上 `</li>
</ul>
<p><strong>Example</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `user` VALUES(&#x27;a&#x27;, &#x27;b&#x27;);</span><br></pre></td></tr></table></figure>

<h1 id="统一用词"><a href="#统一用词" class="headerlink" title="统一用词"></a>统一用词</h1><blockquote>
<p>仅为举例，不限于此。碰到问题，再行商榷。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">用词</th>
<th align="left">统一</th>
</tr>
</thead>
<tbody><tr>
<td align="left">最后</td>
<td align="left">最后</td>
</tr>
<tr>
<td align="left">关闭<br>离开<br>Cancel</td>
<td align="left">取消</td>
</tr>
<tr>
<td align="left">存储<br>储存<br>修改</td>
<td align="left">保存</td>
</tr>
<tr>
<td align="left">搜寻<br>搜索<br>Search</td>
<td align="left">查询</td>
</tr>
<tr>
<td align="left">OK<br>确认<br>Confirm</td>
<td align="left">确定</td>
</tr>
<tr>
<td align="left">移除<br>Remove<br>Delete</td>
<td align="left">删除</td>
</tr>
</tbody></table>
<h1 id="文档编写"><a href="#文档编写" class="headerlink" title="文档编写"></a>文档编写</h1><ol>
<li>中文时使用中文符号，注意标点使用，有逗号时必须使用结束标点符号。</li>
<li>英文时使用英文符号，要求同上。</li>
<li>注意换行与空白，不要留多余空白空格。</li>
<li>内容区块需使用空行隔开，不要出现奇怪的隔开符号或者换行符号。</li>
<li>使用 MarkDown 时请注意排版，表格请统一格式，不要为了对齐而对齐。</li>
<li>不要出现错别字与错误的标点符号</li>
<li>英文数字或字符需要与中文字符隔一个空格</li>
<li>一定要注意排版，排版必须整洁，突出重点。且内容无重复、多余的部分，也不能出现与文档无关的内容。</li>
<li>示例代码一定要经过验证，且同时要保证其遵循开发规范与代码标准，不要出现晦涩难懂的代码或者无意义的范例。</li>
<li>写完后必须预览检查，确保文字、排版、内容、范例、格式、标点均无误方可提交。</li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>开发规则</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/http_code/</url>
    <content><![CDATA[<div class="note success no-icon"><p>HTTP状态码合集！<span class="exturl" data-url="aHR0cHM6Ly9zZW8uanV6aXNlby5jb20vZG9jL2h0dHBfY29kZS8=">http_code<i class="fa fa-external-link-alt"></i></span></p>
</div>
<span id="more"></span>                                                                            


<h1 id="状态码分类"><a href="#状态码分类" class="headerlink" title="状态码分类"></a>状态码分类</h1><table>
<thead>
<tr>
<th align="center"><strong>分类</strong></th>
<th><strong>分类描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>1××</strong></td>
<td>信息，服务器收到请求，需要请求者继续执行操作。</td>
</tr>
<tr>
<td align="center"><strong>2××</strong></td>
<td>成功，操作被成功接收并处理。</td>
</tr>
<tr>
<td align="center"><strong>3××</strong></td>
<td>重定向，需要进一步的操作以完成请求。</td>
</tr>
<tr>
<td align="center"><strong>4××</strong></td>
<td>客户端错误，请求包含语法错误或无法完成请求。</td>
</tr>
<tr>
<td align="center"><strong>5××</strong></td>
<td>服务器错误，服务器在处理请求的过程中发生了错误。</td>
</tr>
</tbody></table>
<h1 id="常用状态码"><a href="#常用状态码" class="headerlink" title="常用状态码"></a>常用状态码</h1><table>
<thead>
<tr>
<th align="center"><strong>状态码</strong></th>
<th align="center"><strong>英文名称</strong></th>
<th><strong>中文描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>100</strong></td>
<td align="center">Continue</td>
<td>表示服务端已接收到请求头，客户端可以继续发送请求体(如POST请求)。</td>
</tr>
<tr>
<td align="center"><strong>101</strong></td>
<td align="center">Switching Protocols</td>
<td>表示服务端支持更优协议，让客户端在服务端更换协议后重新访问。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><strong>200</strong></td>
<td align="center">OK</td>
<td>表示请求成功。</td>
</tr>
<tr>
<td align="center"><strong>201</strong></td>
<td align="center">Created</td>
<td>表示请求已被实现，通常是在成功创建了某个资源。</td>
</tr>
<tr>
<td align="center"><strong>202</strong></td>
<td align="center">Accepted</td>
<td>表示请求已被服务端接收，但尚未进行处理。</td>
</tr>
<tr>
<td align="center"><strong>204</strong></td>
<td align="center">No Content</td>
<td>表示请求成功，但不会返回任何内容。</td>
</tr>
<tr>
<td align="center"><strong>205</strong></td>
<td align="center">Reset Content</td>
<td>表示请求成功，但不会返回任何内容，并且要求客户端重置表单。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><strong>300</strong></td>
<td align="center">Multiple Choices</td>
<td>表示请求的资源有多个供可选择，客户端可自行选择一个进行请求的重定向。</td>
</tr>
<tr>
<td align="center"><strong>301</strong></td>
<td align="center">Moved Permanently</td>
<td>表示请求的资源已经永久地移动到了新位置，并且将在Location域中携带该资源新的URI。</td>
</tr>
<tr>
<td align="center"><strong>304</strong></td>
<td align="center">Not Modified</td>
<td>表示请求的资源无发生修改，将不会返回任何资源。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><strong>400</strong></td>
<td align="center">Bad Request</td>
<td>表示客户端发出的请求有误(格式、大小、无效的…)，服务端不能/不会处理该请求。</td>
</tr>
<tr>
<td align="center"><strong>401</strong></td>
<td align="center">Unauthorized</td>
<td>表示客户端未能提供必要的验证，服务端拒绝提供资源。</td>
</tr>
<tr>
<td align="center"><strong>403</strong></td>
<td align="center">Forbidden</td>
<td>表示服务端理解了该请求，但客户端没有足够权限以访问，遂拒绝提供该资源。</td>
</tr>
<tr>
<td align="center"><strong>404</strong></td>
<td align="center">Not Found</td>
<td>表示服务端无法找到请求的资源，其可能已经暂时(永久)失效。</td>
</tr>
<tr>
<td align="center"><strong>408</strong></td>
<td align="center">Request Timeout</td>
<td>表示请求超时。</td>
</tr>
<tr>
<td align="center"><strong>409</strong></td>
<td align="center">Conflict</td>
<td>表示请求的资源发送了冲突，通常是PUT请求。</td>
</tr>
<tr>
<td align="center"><strong>410</strong></td>
<td align="center">Gone</td>
<td>表示请求的资源已经永久失效，客户端不应再次请求。</td>
</tr>
<tr>
<td align="center"><strong>411</strong></td>
<td align="center">Length Required</td>
<td>表示服务端拒绝在没有定义Content-Length头的情况下接收该请求。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><strong>500</strong></td>
<td align="center">Internal Server Error</td>
<td>表示由于服务端遇到意料之外的变故，导致无法完成请求。</td>
</tr>
<tr>
<td align="center"><strong>501</strong></td>
<td align="center">Not Implemented</td>
<td>表示服务端不支持完成请求所需的功能，导致无法完成请求。</td>
</tr>
<tr>
<td align="center"><strong>502</strong></td>
<td align="center">Bad Gateway</td>
<td>表示作为网关或代理的服务段在执行请求时，从上游服务器获得了无效的响应。</td>
</tr>
<tr>
<td align="center"><strong>503</strong></td>
<td align="center">Service Unavailable</td>
<td>表示由于某些原因(服务器超载或系统维护等)，导致暂时无法完成请求。</td>
</tr>
<tr>
<td align="center"><strong>504</strong></td>
<td align="center">Gatewy Timeout</td>
<td>表示作为网关或代理的服务段在执行请求时，未能及时从上游服务器获得响应。</td>
</tr>
<tr>
<td align="center"><strong>505</strong></td>
<td align="center">HTTP Version Not Supported</td>
<td>表示服务端不支持请求的HTTP协议版本，导致无法完成请求。</td>
</tr>
</tbody></table>
<h1 id="其他状态码"><a href="#其他状态码" class="headerlink" title="其他状态码"></a>其他状态码</h1><table>
<thead>
<tr>
<th align="center"><strong>状态码</strong></th>
<th align="center"><strong>英文名称</strong></th>
<th><strong>中文描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">100</td>
<td align="center">Continue</td>
<td>继续。客户端应继续其请求.</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">Switching Protocols</td>
<td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议。</td>
</tr>
<tr>
<td align="center"><code>102</code></td>
<td align="center">扩展(Processing)</td>
<td>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">200</td>
<td align="center">OK</td>
<td>请求成功。一般用于GET与POST请求。</td>
</tr>
<tr>
<td align="center">201</td>
<td align="center">Created</td>
<td>已创建。成功请求并创建了新的资源。</td>
</tr>
<tr>
<td align="center">202</td>
<td align="center">Accepted</td>
<td>已接受。已经接受请求，但未处理完成。</td>
</tr>
<tr>
<td align="center">203</td>
<td align="center">Non-Authoritative Information</td>
<td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本。</td>
</tr>
<tr>
<td align="center">204</td>
<td align="center">No Content</td>
<td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</td>
</tr>
<tr>
<td align="center">205</td>
<td align="center">Reset Content</td>
<td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域。</td>
</tr>
<tr>
<td align="center">206</td>
<td align="center">Partial Content</td>
<td>部分内容。服务器成功处理了部分GET请求。</td>
</tr>
<tr>
<td align="center"><code>207</code></td>
<td align="center">扩展(Multi-Status)</td>
<td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td>
</tr>
<tr>
<td align="center">208</td>
<td align="center">Already Reported</td>
<td>表示DAV绑定的成员列表已经包含在前一个响应中，并且不会再次发送。(WebDAV RFC 5842)</td>
</tr>
<tr>
<td align="center">226</td>
<td align="center">IM Used</td>
<td>表示服务器已经完成对资源的一个响应。此响应代表了可用于当前实例的一个或多个操作的结果。(RFC 3229)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">300</td>
<td align="center">Multiple Choices</td>
<td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择。</td>
</tr>
<tr>
<td align="center">301</td>
<td align="center">Moved Permanently</td>
<td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替。</td>
</tr>
<tr>
<td align="center">302</td>
<td align="center">Found</td>
<td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI。</td>
</tr>
<tr>
<td align="center">303</td>
<td align="center">See Other</td>
<td>查看其它地址。与301类似。使用GET和POST请求查看。</td>
</tr>
<tr>
<td align="center">304</td>
<td align="center">Not Modified</td>
<td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</td>
</tr>
<tr>
<td align="center">305</td>
<td align="center">Use Proxy</td>
<td>使用代理。所请求的资源必须通过代理访问。</td>
</tr>
<tr>
<td align="center">306</td>
<td align="center">Unused</td>
<td>已经被废弃的HTTP状态码。</td>
</tr>
<tr>
<td align="center">307</td>
<td align="center">Temporary Redirect</td>
<td>临时重定向。与302类似。使用GET请求重定向。</td>
</tr>
<tr>
<td align="center">308</td>
<td align="center">Permanent Redirect</td>
<td>表示当前及未来的请求应该使用其他URI。307、308响应与302、301相似，但是不允许改变HTTP方法。(RFC 7538)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">400</td>
<td align="center">Bad Request</td>
<td>客户端请求的语法错误，服务器无法理解。</td>
</tr>
<tr>
<td align="center">401</td>
<td align="center">Unauthorized</td>
<td>请求要求用户的身份认证。</td>
</tr>
<tr>
<td align="center">402</td>
<td align="center">Payment Required</td>
<td>保留，将来使用。</td>
</tr>
<tr>
<td align="center">403</td>
<td align="center">Forbidden</td>
<td>服务器理解请求客户端的请求，但是拒绝执行此请求。</td>
</tr>
<tr>
<td align="center">404</td>
<td align="center">Not Found</td>
<td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面。</td>
</tr>
<tr>
<td align="center">405</td>
<td align="center">Method Not Allowed</td>
<td>客户端请求中的方法被禁止。</td>
</tr>
<tr>
<td align="center">406</td>
<td align="center">Not Acceptable</td>
<td>服务器无法根据客户端请求的内容特性完成请求。</td>
</tr>
<tr>
<td align="center">407</td>
<td align="center">Proxy Authentication Required</td>
<td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权。</td>
</tr>
<tr>
<td align="center">408</td>
<td align="center">Request Time-out</td>
<td>服务器等待客户端发送的请求时间过长，超时。</td>
</tr>
<tr>
<td align="center">409</td>
<td align="center">Conflict</td>
<td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突。</td>
</tr>
<tr>
<td align="center">410</td>
<td align="center">Gone</td>
<td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置。</td>
</tr>
<tr>
<td align="center">411</td>
<td align="center">Length Required</td>
<td>服务器无法处理客户端发送的不带Content-Length的请求信息。</td>
</tr>
<tr>
<td align="center">412</td>
<td align="center">Precondition Failed</td>
<td>客户端请求信息的先决条件错误。</td>
</tr>
<tr>
<td align="center">413</td>
<td align="center">Request Entity Too Large</td>
<td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息。</td>
</tr>
<tr>
<td align="center">414</td>
<td align="center">Request-URI Too Large</td>
<td>请求的URI过长（URI通常为网址），服务器无法处理。</td>
</tr>
<tr>
<td align="center">415</td>
<td align="center">Unsupported Media Type</td>
<td>服务器无法处理请求附带的媒体格式。</td>
</tr>
<tr>
<td align="center">416</td>
<td align="center">Requested range not satisfiable</td>
<td>客户端请求的范围无效。</td>
</tr>
<tr>
<td align="center">417</td>
<td align="center">Expectation Failed</td>
<td>服务器无法满足Expect的请求头信息。</td>
</tr>
<tr>
<td align="center">421</td>
<td align="center">Too Many Connections</td>
<td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>
</tr>
<tr>
<td align="center">422</td>
<td align="center">Unprocessable Entity</td>
<td>422 则表现为请求格式错误，但出现了 语义 错误，以至于服务端无法响应。可以理解为服务端能理解请求资源类型 Content-type，否则应该返回 415（Unsupported Media Type），也能理解请求实体内容，否则应该返回 400（Bad Request）。</td>
</tr>
<tr>
<td align="center">423</td>
<td align="center">Locked</td>
<td>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 当前资源被锁定。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td align="center">424</td>
<td align="center">Failed Dependency</td>
<td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td align="center">425</td>
<td align="center">Unordered Collection</td>
<td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td>
</tr>
<tr>
<td align="center">426</td>
<td align="center">Upgrade Required</td>
<td>客户端应当切换到TLS/1.0。（RFC 2817）</td>
</tr>
<tr>
<td align="center">428</td>
<td align="center">Precondition Required</td>
<td>表示服务器要求请求必须带上条件。(RFC 6585)</td>
</tr>
<tr>
<td align="center">429</td>
<td align="center">Too Many Requests</td>
<td>表示用户在一段给定的时间内发送过多的请求。(RFC 6585)</td>
</tr>
<tr>
<td align="center">431</td>
<td align="center">Request Header Fields Too Large</td>
<td>表示服务器不能处理请求，因为请求的单一请求头或请求头整体过大。(RFC 6585)</td>
</tr>
<tr>
<td align="center"><code>449</code></td>
<td align="center">扩展(Retry With)</td>
<td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td>
</tr>
<tr>
<td align="center">451</td>
<td align="center">Unavailable For Legal Reasons</td>
<td>错误代码状态出现，不代表这个地址是否存在，而代表该网页可能对于国家安全产生危险，或是该网页可能违反著作权、隐私权、亵渎神明或其他法律或法院命令。</td>
</tr>
<tr>
<td align="center">499</td>
<td align="center">Client Closed Request</td>
<td>表示 Nginx 使用非标准状态码。表明当 Nginx 正在处理请求时，客户端关闭了连接。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">500</td>
<td align="center">Internal Server Error</td>
<td>服务器内部错误，无法完成请求。</td>
</tr>
<tr>
<td align="center">501</td>
<td align="center">Not Implemented</td>
<td>服务器不支持请求的功能，无法完成请求。</td>
</tr>
<tr>
<td align="center">502</td>
<td align="center">Bad Gateway</td>
<td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</td>
</tr>
<tr>
<td align="center">503</td>
<td align="center">Service Unavailable</td>
<td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中。</td>
</tr>
<tr>
<td align="center">504</td>
<td align="center">Gateway Time-out</td>
<td>充当网关或代理的服务器，未及时从远端服务器获取请求。</td>
</tr>
<tr>
<td align="center">505</td>
<td align="center">HTTP Version not supported</td>
<td>服务器不支持请求的HTTP协议的版本，无法完成处理。</td>
</tr>
<tr>
<td align="center"><code>506</code></td>
<td align="center">扩展(Variant Also Negotiates)</td>
<td>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td>
</tr>
<tr>
<td align="center">507</td>
<td align="center">Insufficient Storage</td>
<td>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td>
</tr>
<tr>
<td align="center"><code>509</code></td>
<td align="center">扩展(Bandwidth Limit Exceeded)</td>
<td>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td>
</tr>
<tr>
<td align="center">510</td>
<td align="center">Not Extended</td>
<td>获取资源所需要的策略并没有没满足。（RFC 2774）</td>
</tr>
<tr>
<td align="center">511</td>
<td align="center">Network Authentication Required</td>
<td>表示客户端需要经过验证以获得网络连接许可（RFC 6585）</td>
</tr>
<tr>
<td align="center">599</td>
<td align="center">Network Connect Timeout Error</td>
<td>表示这个状态码还没有被任何RFC定义，但是已经被一些HTTP代理用来表示客户端网络连接超时的状态。</td>
</tr>
</tbody></table>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0L2NvbW1vbnM/dHlwZT01">参考来源<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>复制事件添加内容</title>
    <url>/copyevent/</url>
    <content><![CDATA[<div class="note info no-icon"><p>给网页复制事件添加内容</p>
</div>
<span id="more"></span> 

<h2 id="复制事件添加内容"><a href="#复制事件添加内容" class="headerlink" title="复制事件添加内容"></a>复制事件添加内容</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> clipboardData = event.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">  <span class="keyword">if</span> (!clipboardData) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">if</span> (text) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    clipboardData.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, text + <span class="string">&#x27;\n\n\n\n\n\n来自DoubleAm的博客(a.biugle.cn)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setClipboardText</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  node.<span class="title function_">appendChild</span>(<span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">getRangeAt</span>(<span class="number">0</span>).<span class="title function_">cloneContents</span>());</span><br><span class="line">  <span class="keyword">var</span> htmlData = <span class="string">&#x27;&lt;div&gt;&#x27;</span></span><br><span class="line">          + node.<span class="property">innerHTML</span></span><br><span class="line">          + <span class="string">&#x27;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;著作权归(a.biugle.cn)所有。&lt;br /&gt;&#x27;</span></span><br><span class="line">          + <span class="string">&#x27;商业转载请联系作者获得授权，非商业转载请注明出处。&lt;br /&gt;&#x27;</span></span><br><span class="line">          + <span class="string">&#x27;作者：DoubleAm&lt;br /&gt;链接：https://a.biugle.cn&lt;br /&gt;&#x27;</span></span><br><span class="line">          + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> textData = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">getRangeAt</span>(<span class="number">0</span>)</span><br><span class="line">          + <span class="string">&#x27;\n\n\n\n\n\n著作权归(a.biugle.cn)所有。\n&#x27;</span></span><br><span class="line">          + <span class="string">&#x27;商业转载请联系作者获得授权，非商业转载请注明出处。\n&#x27;</span></span><br><span class="line">          + <span class="string">&#x27;作者：DoubleAm\n&#x27;</span></span><br><span class="line">          + <span class="string">&#x27;链接：https://a.biugle.cn\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">clipboardData</span>) &#123;</span><br><span class="line">    event.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/html&quot;</span>, htmlData);</span><br><span class="line">    event.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/plain&quot;</span>, textData);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">clipboardData</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, textData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="title function_">setClipboardText</span>(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="禁用网页复制、选取、全选事件（PC与移动端兼容）"><a href="#禁用网页复制、选取、全选事件（PC与移动端兼容）" class="headerlink" title="禁用网页复制、选取、全选事件（PC与移动端兼容）"></a>禁用网页复制、选取、全选事件（PC与移动端兼容）</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVkb3V5dWRvdS5jb20vamlhb2NoZW5naGVqaS9IdG1sX2Nzcy8xNTIzLmh0bWw=">参考文章<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>复制事件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo插件及Next内置样式集</title>
    <url>/hexomoreandnext/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>Hexo与Next插件集、自定义样式以及插入视频音乐等</p>
</div>
<span id="more"></span> 


<blockquote class="blockquote-center">
<p>让文章写的好看又简洁又好用的插件！<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvdGFnLXBsdWdpbnMuaHRtbA==">hexo完整的标签列表<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL3RhZy1wbHVnaW5zLw==">next插件列表<i class="fa fa-external-link-alt"></i></span></p>

</blockquote>

<h3 id="hexo插件"><a href="#hexo插件" class="headerlink" title="hexo插件"></a>hexo插件</h3><h4 id="hexo-lazyload-image"><a href="#hexo-lazyload-image" class="headerlink" title="hexo-lazyload-image"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Ryb3ktWWFuZy9oZXhvLWxhenlsb2FkLWltYWdl">hexo-lazyload-image<i class="fa fa-external-link-alt"></i></span></h4><figure class="highlight bash"><figcaption><span>安装</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>
<p>First add configuration in <code>_config.yml</code> from your hexo project.</p>
<figure class="highlight xml"><figcaption><span>使用</span></figcaption><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true </span><br><span class="line">  onlypost: false</span><br><span class="line">  loadingImg: # eg ./images/loading.gif</span><br></pre></td></tr></table></figure>
<h4 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a>hexo-pdf</h4><p><span class="exturl" data-url="aHR0cHM6Ly9scnVpaGFvLmNuL3Bvc3RzL25leHQtcGRmLmh0bWw=">pdf传送门<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="宅音乐侧栏播放器插件"><a href="#宅音乐侧栏播放器插件" class="headerlink" title="宅音乐侧栏播放器插件"></a>宅音乐侧栏播放器插件</h3><p><span class="exturl" data-url="aHR0cHM6Ly9wbGF5ZXIuYml1Z2xlLmNuLw==">体验<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>目前在next中可能引起部分css冲突，建议在next中使用在单个页面中。<br>依赖于jQuery，一行js可以引入播放器插件。</p>
</blockquote>
<h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight xml"><figcaption><span>video.js</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% video url %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% video https://example.com/sample.mp4 %&#125;</span><br><span class="line">&#123;% video /path/to/your/video.mp4 %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tab选项卡"><a href="#tab选项卡" class="headerlink" title="tab选项卡"></a>tab选项卡</h3><blockquote>
<p>“tab”为选项卡的名称，可以自定义，数字是几表示从第几个选项卡开始。非必须，若数值为-1则隐藏选项卡内容。<br><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL3RhZy1wbHVnaW5zL3RhYnM=">查看更多<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post/page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (without &#x27;fa-&#x27; at the begining).</span><br><span class="line">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab,2 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">this is tab1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">this is tab2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">this is tab3</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab"><a href="#tab-1">tab 1</a></li><li class="tab active"><a href="#tab-2">tab 2</a></li><li class="tab"><a href="#tab-3">tab 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-1"><p>this is tab1</p></div><div class="tab-pane active" id="tab-2"><p>this is tab2</p></div><div class="tab-pane" id="tab-3"><p>this is tab3</p></div></div></div>

<blockquote>
<p>数值为-1</p>
</blockquote>
<div class="tabs" id="选项"><ul class="nav-tabs"><li class="tab"><a href="#选项-1">选项 1</a></li><li class="tab"><a href="#选项-2">选项 2</a></li><li class="tab"><a href="#选项-3">选项 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项-1"><p><strong>选项1</strong></p></div><div class="tab-pane" id="选项-2"><p><strong>选项2</strong></p></div><div class="tab-pane" id="选项-3"><p><strong>选项3</strong></p></div></div></div>

<blockquote>
<p>名字写在选项里面</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Fourth unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1 --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab Solution 2 --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab Solution 3 --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">Solution 1</a></li><li class="tab"><a href="#fourth-unique-name-2">Solution 2</a></li><li class="tab"><a href="#fourth-unique-name-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fourth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fourth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h3 id="note便签"><a href="#note便签" class="headerlink" title="note便签"></a>note便签</h3><blockquote>
<p>主题配置文件搜索note,可设置风格和图标是否显示。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout).</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 15</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>
<p>写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">#### default</span><br><span class="line">是类型还有以下几种</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note default"><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>类型还有以下几种</p>
</div>
<div class="note primary"><h4 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h4><p>内容</p>
</div>
<div class="note success"><h4 id="success"><a href="#success" class="headerlink" title="success"></a>success</h4><p>内容</p>
</div>
<div class="note info"><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>内容</p>
</div>
<div class="note warning"><h4 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h4><p>内容</p>
</div>
<div class="note danger"><h4 id="danger"><a href="#danger" class="headerlink" title="danger"></a>danger</h4><p>内容</p>
</div>
<div class="note "><h4 id="不填"><a href="#不填" class="headerlink" title="不填"></a>不填</h4><p>内容</p>
</div>
<div class="note danger no-icon"><h4 id="danger-no-icon"><a href="#danger-no-icon" class="headerlink" title="danger no-icon"></a>danger no-icon</h4><p>内容</p>
</div>


<h3 id="引用-文本居中"><a href="#引用-文本居中" class="headerlink" title="引用(文本居中)"></a>引用(文本居中)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">**there are test words**</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">
<p><strong>there are test words</strong></p>

</blockquote>

<h3 id="Font-Awesome图标"><a href="#Font-Awesome图标" class="headerlink" title="Font Awesome图标"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9mb250LWF3ZXNvbWUvZm9udGF3ZXNvbWUtdHV0b3JpYWwuaHRtbA==">Font Awesome图标<i class="fa fa-external-link-alt"></i></span></h3><blockquote>
<p>Font Awesome 是一套绝佳的图标字体库和CSS框架。<br>Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。<br>要使用Font Awesome图标，请在HTML页面的 部分中添加以下行：</p>
</blockquote>
<h4 id="1、国内推荐-CDN"><a href="#1、国内推荐-CDN" class="headerlink" title="1、国内推荐 CDN"></a>1、国内推荐 CDN</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2、海外推荐-CDN"><a href="#2、海外推荐-CDN" class="headerlink" title="2、海外推荐 CDN"></a>2、海外推荐 CDN</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>next已经引用了，可以直接用，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ps: 最新版已经使用新的写法，请升级~</span><br><span class="line">&lt;i class=&quot;fa fa-car&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car&quot; style=&quot;font-size:48px;&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car&quot; style=&quot;font-size:60px;color:red;&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car fa-lg&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car fa-2x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car fa-3x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car fa-4x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-car fa-5x&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>
<p><i class="fa fa-car"></i> <i class="fa fa-car" style="font-size:48px;"></i> <i class="fa fa-car" style="font-size:60px;color:red;"></i> <i class="fa fa-car fa-lg"></i> <i class="fa fa-car fa-2x"></i> <i class="fa fa-car fa-3x"></i> <i class="fa fa-car fa-4x"></i> <i class="fa fa-car fa-5x"></i></p>
<p>动态图标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-cog fa-spin&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-spinner fa-pulse&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>
<p><i class="fa fa-spinner fa-spin"></i> <i class="fa fa-cog fa-spin"></i> <i class="fa fa-spinner fa-pulse"></i></p>
<h3 id="代码块等"><a href="#代码块等" class="headerlink" title="代码块等"></a>代码块等</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight cpp"><figcaption><span>三个点后面的参数</span><a href="https://a.biugle.cn">a.biugle.cn</a></figcaption><table><tr><td class="code"><pre><span class="line">[language] [title] [url] [link text]</span><br><span class="line"></span><br><span class="line">code snippet</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight diff"><figcaption><span>diff</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">-  printf(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="addition">+  printf(&quot;Hello_World!&quot;);</span></span><br></pre></td></tr></table></figure>

<h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>在文章中插入 iframe。</p>
<figure class="highlight plaintext"><figcaption><span>iframe</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
<iframe src="https://space.bilibili.com/296061058" width="100%" height="400" frameborder="0" loading="lazy" allowfullscreen></iframe>

<h3 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h3><ul>
<li><i class="fa fa-check-square"></i> 已完成</li>
<li><i class="fa fa-square"></i> 未完成</li>
</ul>
<figure class="highlight http"><figcaption><span>Todo list</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;i class=&quot;fa fa-check-square&quot;&gt;&lt;/i&gt; 已完成&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;i class=&quot;fa fa-square&quot;&gt;&lt;/i&gt; 未完成&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--或者--&gt;</span><br><span class="line"></span><br><span class="line">- &lt;i class=&quot;fa fa-check-square&quot;&gt;&lt;/i&gt; 已完成</span><br><span class="line">- &lt;i class=&quot;fa fa-square&quot;&gt;&lt;/i&gt; 未完成</span><br></pre></td></tr></table></figure>

<h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>主题配置文件中打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Label tag.</span><br><span class="line">label: true</span><br></pre></td></tr></table></figure>
<p><code>@</code>前面的是label的名字，后面的是要显示的文字</p>
<mark class="label default">default</mark> <mark class="label primary">primary</mark> <mark class="label success">success</mark> <mark class="label info">info</mark> <mark class="label warning">warning</mark> <mark class="label danger">danger</mark>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% label default@default %&#125;</span><br><span class="line"></span><br><span class="line">primary success info warning danger</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><span class="exturl" data-url="aHR0cDovL3d3dy5teWtlcm5lbC5jbi9teS1oZXhvLW5leHQtMS5odG1s">其他<i class="fa fa-external-link-alt"></i></span></h3><blockquote>
<p>包括小色块、左侧色条、右侧色条、上方色条、数字色块（需要自定义样式）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;download&quot;</span>&gt;</span>下载色块<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-red&quot;</span>&gt;</span>颜色块-红<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-yellow&quot;</span>&gt;</span>颜色块-黄<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-green&quot;</span>&gt;</span>颜色块-绿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-blue&quot;</span>&gt;</span>颜色块-蓝<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-purple&quot;</span>&gt;</span>颜色块-紫<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-left-red&quot;</span>&gt;</span>左侧边框红色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-left-yellow&quot;</span>&gt;</span>左侧边框黄色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-left-green&quot;</span>&gt;</span>左侧边框绿色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-left-blue&quot;</span>&gt;</span>左侧边框蓝色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-left-purple&quot;</span>&gt;</span>左侧边框紫色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-right-red&quot;</span>&gt;</span>右侧边框红色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-right-yellow&quot;</span>&gt;</span>右侧边框黄色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-right-green&quot;</span>&gt;</span>右侧边框绿色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-right-blue&quot;</span>&gt;</span>右侧边框蓝色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-right-purple&quot;</span>&gt;</span>右侧边框紫色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-top-red&quot;</span>&gt;</span>上侧边框红色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-top-yellow&quot;</span>&gt;</span>上侧边框黄色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-top-green&quot;</span>&gt;</span>上侧边框绿色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-top-blue&quot;</span>&gt;</span>上侧边框蓝色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-top-purple&quot;</span>&gt;</span>上侧边框紫色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-bottom-red&quot;</span>&gt;</span>下侧边框红色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-bottom-yellow&quot;</span>&gt;</span>下侧边框黄色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-bottom-green&quot;</span>&gt;</span>下侧边框绿色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-bottom-blue&quot;</span>&gt;</span>下侧边框蓝色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;div-border-bottom-purple&quot;</span>&gt;</span>下侧边框紫色块级<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-toc&quot;</span>&gt;</span>自定义形状色块<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>预览</p>
</blockquote>
<p><span style="margin:1px;"><a id="download">下载色块</a></span><br><span style="margin:1px;"><span id="inline-red">颜色块-红</span></span><br><span style="margin:1px;"><span id="inline-yellow">颜色块-黄</span></span><br><span style="margin:1px;"><span id="inline-green">颜色块-绿</span></span><br><span style="margin:1px;"><span id="inline-blue">颜色块-蓝</span></span><br><span style="margin:1px;"><span id="inline-purple">颜色块-紫</span></span><br><span style="margin:1px;"><p id="div-border-left-red">左侧边框红色块级</p></span><br><span style="margin:1px;"><p id="div-border-left-yellow">左侧边框黄色块级</p></span><br><span style="margin:1px;"><p id="div-border-left-green">左侧边框绿色块级</p></span><br><span style="margin:1px;"><p id="div-border-left-blue">左侧边框蓝色块级</p></span><br><span style="margin:1px;"><p id="div-border-left-purple">左侧边框紫色块级</p></span><br><span style="margin:1px;"><p id="div-border-right-red">右侧边框红色块级</p></span><br><span style="margin:1px;"><p id="div-border-right-yellow">右侧边框黄色块级</p></span><br><span style="margin:1px;"><p id="div-border-right-green">右侧边框绿色块级</p></span><br><span style="margin:1px;"><p id="div-border-right-blue">右侧边框蓝色块级</p></span><br><span style="margin:1px;"><p id="div-border-right-purple">右侧边框紫色块级</p></span><br><span style="margin:1px;"><p id="div-border-top-red">上侧边框红色块级</p></span><br><span style="margin:1px;"><p id="div-border-top-yellow">上侧边框黄色块级</p></span><br><span style="margin:1px;"><p id="div-border-top-green">上侧边框绿色块级</p></span><br><span style="margin:1px;"><p id="div-border-top-blue">上侧边框蓝色块级</p></span><br><span style="margin:1px;"><p id="div-border-top-purple">上侧边框紫色块级</p></span><br><span style="margin:1px;"><p id="div-border-bottom-red">下侧边框红色块级</p></span><br><span style="margin:1px;"><p id="div-border-bottom-yellow">下侧边框黄色块级</p></span><br><span style="margin:1px;"><p id="div-border-bottom-green">下侧边框绿色块级</p></span><br><span style="margin:1px;"><p id="div-border-bottom-blue">下侧边框蓝色块级</p></span><br><span style="margin:1px;"><p id="div-border-bottom-purple">下侧边框紫色块级</p></span><br><span style="margin:1px;"><span id="inline-toc">自定义形状色块</span></span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>defer和async的区别</title>
    <url>/deferandasync/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>script标签，属性defer和async的区别。</p>
</div>
<span id="more"></span> 

<h3 id="表格比较"><a href="#表格比较" class="headerlink" title="表格比较"></a>表格比较</h3><blockquote class="blockquote-center">
<p><code>defer</code>与<code>async</code>仅在使用外部脚本时有效</p>

</blockquote>

<table>
<thead>
<tr>
<th align="center"><strong>属性</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><em><strong>无属性</strong></em></td>
<td>我们正常使用不添加任何属性时，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><em><strong>defer</strong></em></td>
<td>使用<code>defer</code>时，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成（并不是加载完成就立即执行）。</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><em><strong>async</strong></em></td>
<td>使用<code>async</code>时，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。即在不影响后续文档元素渲染的情况下，加载js，加载完成后立即执行。</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center"><em><strong>defer&amp;async</strong></em></td>
<td>同时使用<code>defer</code>和<code>async</code>时，如果浏览器支持<code>async</code>则按<code>async</code>解析；如果不支持，则按<code>defer</code>解析。</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;<code>注意:</code>从实用角度来说呢，首先把所有脚本都丢到 <code>&lt;/body&gt;</code> 之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。</p>
<h3 id="图片示意"><a href="#图片示意" class="headerlink" title="图片示意"></a>图片示意</h3><p><img data-src="/images/loading.gif" data-original="/deferandasync/deferandasync.png"></p>
<blockquote>
<p>此图主要告诉我们以下几点：</p>
</blockquote>
<ol>
<li><code>defer</code>和<code>async</code>在网络读取（下载）这块儿是一样的，都是异步的（相较于<code>HTML解析</code>）。</li>
<li>它俩的差别在于脚本下载完之后何时执行，显然<code>defer</code>是最接近我们对于应用脚本加载和执行的要求的。</li>
<li>关于 <code>defer</code>，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用。</li>
<li><code>async</code>则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行仔细想想，<code>async</code>对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：<code>Google Analytics</code>。</li>
</ol>
<h3 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h3><ul>
<li>二者都是异步去加载外部JS文件</li>
<li><code>async</code>是在外部JS加载完成后，浏览器空闲时，Load事件触发前执行。而<code>defer</code>是在JS加载完成后，整个文档解析完成后执行。</li>
<li><code>defer</code>更像是将<code>&lt;script&gt;</code>标签放在<code>&lt;/body&gt;</code>之后的效果，但是它由于是异步加载JS文件，所以可以节省时间。</li>
</ul>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>条件判断IE版本</title>
    <url>/ietest/</url>
    <content><![CDATA[<div class="note default no-icon"><p>条件注释判断浏览器版本&lt;!–[if lt IE 9]&gt;</p>
</div>
<span id="more"></span> 

<div class="note "><p><span>&lt;!--[if !IE]&gt;&lt;!--&gt; 除IE外都可识别 &lt;!--&lt;![endif]--&gt;</span><br><span>&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 8]&gt; 仅IE8可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 9]&gt; 仅IE9可识别 &lt;![endif]--&gt;</span></p></div>

<table border="2" align="center"> <tbody> <tr><th width="50">项目</th><th width="150">范例</th><th>说明</th></tr> <tr> <td align="middle">!</td><td>[if !IE]</td><td>The NOT operator. This is placed immediately in front of the&nbsp;<em>feature</em>,&nbsp;<em>operator</em>, or&nbsp;<em>subexpression</em>&nbsp;to reverse the Boolean meaning of the expression.<br>NOT运算符。这是摆立即在前面的<em>功能</em>，<em>操作员</em>，或<em>子表达式</em>扭转布尔表达式的意义。</td></tr><tr><td align="middle">lt</td> <td>[if lt IE 5.5]</td> <td>The less-than operator. Returns true if the first argument is less than the second argument.<br>小于运算符。如果第一个参数小于第二个参数，则返回true。</td> </tr><tr><td align="middle">lte</td><td>[if lte IE 6]</td><td>The less-than or equal operator. Returns true if the first argument is less than or equal to the second argument.<br>小于或等于运算。如果第一个参数是小于或等于第二个参数，则返回true。</td> </tr><tr><td align="middle">gt</td><td>[if gt IE 5]</td><td>The greater-than operator. Returns true if the first argument is greater than the second argument.<br>大于运算符。如果第一个参数大于第二个参数，则返回true。</td> </tr><tr><td align="middle">gte</td> <td>[if gte IE 7]</td><td>The greater-than or equal operator. Returns true if the first argument is greater than or equal to the second argument.<br>大于或等于运算。如果第一个参数是大于或等于第二个参数，则返回true。</td> </tr><tr><td align="middle">( )</td><td>[if !(IE 7)]</td><td>Subexpression operators. Used in conjunction with boolean operators to create more complex expressions.<br>子表达式运营商。在与布尔运算符用于创建更复杂的表达式。</td></tr><tr><td align="middle">&amp;</td><td>[if (gt IE 5)&amp;(lt IE 7)]</td><td>The AND operator. Returns true if all subexpressions evaluate to true<br>AND运算符。如果所有的子表达式计算结果为true，返回true</td></tr><tr><td align="middle">|</td><td>[if (IE 6)|(IE 7)]</td><td>The OR operator. Returns true if any of the subexpressions evaluates to true.<br>OR运算符。返回true，如果子表达式计算结果为true。</td></tr></tbody></table>


<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">加载CSS-a</span></span><br><span class="line"><span class="comment">&lt;!--[else]&gt;</span></span><br><span class="line"><span class="comment">加载CSS-b</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>


<p>这样有效是有效，但是用HTML VALIDATOR里，报错，因为这个不符合XHTML 1.1的规范，<br>如果把ELSE语句去掉，则正确。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">加载CSS-b</span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">加载CSS-a(可以把要重写的写在这里).</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>IE</tag>
      </tags>
  </entry>
  <entry>
    <title>关于产品经理的一些知识</title>
    <url>/product0t1/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>关于产品经理的一些知识</p>
</div>
<span id="more"></span> 

<h2 id="产品如何产生"><a href="#产品如何产生" class="headerlink" title="产品如何产生"></a>产品如何产生</h2><blockquote>
<p>总的来说，大致分为几个主要步骤：</p>
</blockquote>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1. 概念产生</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2. 产品分析</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;3. 设计开发</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;4. 产品上线</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;5. 推广运营</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;6. 发展完善</p>
<p>&emsp;&emsp;具体参考知乎大佬提出的15个步骤。</p>
<ol>
<li><p>idea的出现与产生。要做一个产品的想法，一般来自于老板或产品总监或运营负责人或市场人员，当然也可以是自己。</p>
</li>
<li><p>idea的提出。接下来，产生idea的人会找到老板、产品总监、技术总监以非正式的形式聊一聊想法，以确定这个想法是直接否决还是有必要做，如果有必要做，接下来就是后面的流程。这个小会议应当哪些人参与是没有标准的，但至少是领导级别的。</p>
</li>
<li><p>产品总监会叫来产品经理，把第2步的方案讲给产品经理。接下来产品经理上场，正式接手。</p>
</li>
<li><p>产品经理针对此产品进行风险评估、成本(耗费的人力资源、公司场地租金、水电费、人员差旅费等)评估、可行性评估以及特别重要的竞品分析，还要与市场、销售进行讨论，了解市场对于同类产品的看法、需求等。最后输出文档：可行性评估报告、成本分析表格、市场分析报告、竞品分析报告。</p>
</li>
<li><p>产品经理召集技术总监、产品总监、市场、运营、交互设计师开会，将第4步中的文档过一遍。这一会议是发现并改正这些文档的问题、会议目的是确定产品的目标人群、目标市场、功能点等大方向。</p>
</li>
<li><p>正式进入需求分析环节，产品经理开始与交互设计师研讨产品框架这类大纲问题。没交互设计师岗位的公司这一项全部由产品经理完成。 产品经理还需要进行行业相关的用户调研、用户访谈、做用户画像、典型用户标签。 这一步会输出产品需求文档、线框图原型文件。</p>
</li>
<li><p>需求评审会。产品总监、技术总监、产品经理、交互设计师、UI设计师、具体开发人员(产品开发人员和后台服务器人员)、测试主管参与。目的是纠正需求文档和原型文件中的问题，比如开发难度过大时间不允许的功能需要砍掉、没考虑清楚的环节需要记录、意义不大的功能暂缓等。接下来改文档、原型，再评审、直到通过。一般这个时候需求文档和原型文件早已不是最初的模样。</p>
</li>
<li><p>上述确定的需求文档和原型文件邮件发出给所有参与人员，而后产品经理拉着开发、测试、UI挨个找他们评估时间，然后做好项目计划、将需求分为2-3段，分别是核心功能、重要功能和一般功能，再邮件发给所有参与人员以达到所有人明确项目计划和周期的目的。接着，UI正式上场，做图、输出图，包括页面设计图、页面坐标图、切图(包括产品的icon和设计图中的各个切片)。</p>
</li>
<li><p>开发人员开始根据需求、原型和UI敲代码、测试人员根据需求写测试用例。后台的主要工作是部署后台程序如数据库设计、后台代码编写、以及特别重要的接口文档编写(接口文档用于产品与后台的对接)，产品开发人员负责编写界面、本地处理逻辑、使用接口文档等。</p>
</li>
<li><p>测试用例评审。测试用例的编写与开发的工作同时进行，一般测试用例会更快出来，然后负责测试的那位同事会组织开测试用例评审会，产品经理、交互设计师、具体开发人员、测试主管参加，很少数情况产品总监或技术总监会参加。</p>
</li>
</ol>
<ol start="11">
<li>产品出首版(非完整功能的版本，一般是核心功能)之后，测试上场，依照测试用例进行。同时，开发人员继续进行核心功能之后的重要功能和一般功能。一边改bug一边继续新功能开发。这个过程中，产品经理、交互设计师和测试一样负责反复试用产品找出问题并提出修改，UI设计师负责找UI方面的bug。需求变更的情况在这个期间发生的较多，若问如何有好办法解决，答案是暂无。</li>
</ol>
<ol start="12">
<li><p>上一步流程一直循环直至产品完善，然后才能准备发布、上线。还需要和交互设计师、UI设计师一同设计线上展示的宣传图片+图片中的文案。</p>
</li>
<li><p>最后是发布产品。</p>
</li>
<li><p>上线后的产品由运营人员正式接手开始推广运营。</p>
</li>
<li><p>接着是产品生命周期管理，对产品进行维护，扩展等。</p>
</li>
</ol>
<h2 id="产品分类与用户关系"><a href="#产品分类与用户关系" class="headerlink" title="产品分类与用户关系"></a>产品分类与用户关系</h2><h3 id="产品分类"><a href="#产品分类" class="headerlink" title="产品分类"></a>产品分类</h3><h4 id="B端产品"><a href="#B端产品" class="headerlink" title="B端产品"></a>B端产品</h4><p>&emsp;&emsp;B释义为：Business,通常为企业或商家为工作或商业目的而使用的系统型软件、工具或平台。例如：网易云、网易有数或企业内部的ERP系统等等。</p>
<h4 id="C端产品"><a href="#C端产品" class="headerlink" title="C端产品"></a>C端产品</h4><p>&emsp;&emsp;C有释义为：Consumer、Client、Consumer，意为消费者、个人用户或终端用户，使用的是客户端。例如：网易新闻、网易云音乐等等。</p>
<h3 id="用户关系"><a href="#用户关系" class="headerlink" title="用户关系"></a>用户关系</h3><p>&emsp;&emsp;用户关系一般指产品方与用户方的关系，越往后越难启动，但动起来以后惯性更大，难被干掉。</p>
<ul>
<li><p>单点(单点多为工具、小游戏、内容，每个用户自己和产品互动，就能产生用户价值。)</p>
</li>
<li><p>单边(单边典型的是社交，必须要同一类用户通过产品，互相互动，才能产生价值。())</p>
</li>
<li><p>双边(双边最典型是交易平台，买家和卖家都必须有足够数量，才行。)</p>
</li>
<li><p>多边(多边是一个生态，比如O2O餐饮，利用闲置大妈烧菜 + 闲置大叔送餐，那就必须同时有足够的大妈、大叔和买家，才能起来。)</p>
</li>
</ul>
<h2 id="0-1、1-N、N-N-1"><a href="#0-1、1-N、N-N-1" class="headerlink" title="0-1、1-N、N-N+1"></a>0-1、1-N、N-N+1</h2><p>&emsp;&emsp;这个其实不太好理解，按住我看过的资料来说吧，我的想法如下。</p>
<h3 id="0-1-一般是指产品的产生阶段"><a href="#0-1-一般是指产品的产生阶段" class="headerlink" title="0-1 一般是指产品的产生阶段"></a>0-1 一般是指产品的产生阶段</h3><p>&emsp;&emsp;这个阶段是产品从无到有的阶段。</p>
<h3 id="1-N-一般是指产品的发展阶段"><a href="#1-N-一般是指产品的发展阶段" class="headerlink" title="1-N 一般是指产品的发展阶段"></a>1-N 一般是指产品的发展阶段</h3><p>&emsp;&emsp;这个阶段是指产品已经产生了，这个时候要改进不足，收集用户反馈，扩展产品的功能，留住用户群，保持热度。</p>
<h3 id="N-N-1-一般是指产品的转型阶段"><a href="#N-N-1-一般是指产品的转型阶段" class="headerlink" title="N-N+1 一般是指产品的转型阶段"></a>N-N+1 一般是指产品的转型阶段</h3><p>&emsp;&emsp;这个阶段则是在产品有了一定的热度，但是要一直活跃下去的话，就必需不断的扩展新业务，吸引新用户，跟上时代发展。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNzE1Njc5Mw==">参考文章<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>产品经理</tag>
      </tags>
  </entry>
  <entry>
    <title>记2019年5月软考</title>
    <url>/ruankao/</url>
    <content><![CDATA[<div class="note success no-icon"><p>记2019年5月软件设计师考试。</p>
</div>
<span id="more"></span> 
<h1 id="2019年5月25日，阴雨连绵，我前往长沙广播电视大学参加软件设计师考试，一切顺利。"><a href="#2019年5月25日，阴雨连绵，我前往长沙广播电视大学参加软件设计师考试，一切顺利。" class="headerlink" title="2019年5月25日，阴雨连绵，我前往长沙广播电视大学参加软件设计师考试，一切顺利。"></a>2019年5月25日，阴雨连绵，我前往长沙广播电视大学参加软件设计师考试，一切顺利。</h1><h1 id="2019年5月26日，晴，我过着当代大学生的恶臭生活。"><a href="#2019年5月26日，晴，我过着当代大学生的恶臭生活。" class="headerlink" title="2019年5月26日，晴，我过着当代大学生的恶臭生活。"></a>2019年5月26日，晴，我过着当代大学生的恶臭生活。</h1><h1 id="2019年7月忘了哪日，风和日丽，我在学校实验室查询成绩，万幸通过，感觉还行。"><a href="#2019年7月忘了哪日，风和日丽，我在学校实验室查询成绩，万幸通过，感觉还行。" class="headerlink" title="2019年7月忘了哪日，风和日丽，我在学校实验室查询成绩，万幸通过，感觉还行。"></a>2019年7月忘了哪日，风和日丽，我在学校实验室查询成绩，万幸通过，感觉还行。</h1><h1 id="2019年10月18日，多云，鄙人深圳实习，证书顺利到手。"><a href="#2019年10月18日，多云，鄙人深圳实习，证书顺利到手。" class="headerlink" title="2019年10月18日，多云，鄙人深圳实习，证书顺利到手。"></a>2019年10月18日，多云，鄙人深圳实习，证书顺利到手。</h1><h1 id="2019年10月18日证书到手后两分钟59秒，索然无味。"><a href="#2019年10月18日证书到手后两分钟59秒，索然无味。" class="headerlink" title="2019年10月18日证书到手后两分钟59秒，索然无味。"></a>2019年10月18日证书到手后两分钟59秒，索然无味。</h1><p>&emsp;&emsp;嘻嘻，小皮一下。还是推荐大家有时间可以考一下，考试说难不难，说简单也不简单，想考的朋友加油咯。以上别看我记流水账，但是水平相当之高，逻辑相当缜密，你看这几句，时间地点人物事件样样俱全～～～<code>/滑稽</code></p>
<p><img data-src="/images/loading.gif" data-original="/ruankao/ruankao.jpg"></p>
]]></content>
      <categories>
        <category>一般垃圾</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL总结</title>
    <url>/sql/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>SQL增删改查(CRUD)语句与常用函数总结。</p>
</div>
<span id="more"></span> 

<h2 id="SQL-Introduction"><a href="#SQL-Introduction" class="headerlink" title="SQL Introduction"></a>SQL Introduction</h2><p>&emsp;&emsp;一般我们对数据库的操作主要分为四种，增<strong>C</strong>(CREATE)、删<strong>D</strong>(DELETE)、改<strong>U</strong>(UPDATE)、查<strong>R</strong>(READ)，所以，我就从<strong>CRUD</strong>这四个方面来制作查询表。</p>
<p>&emsp;&emsp;<code>开发规则:</code></p>
<p>&emsp;&emsp;&emsp;&emsp;1. 尽量减少对数据库的访问次数，且不能查询无用的数据，浪费效能（例如：我只要男生的数据，你把所有人的数据都查询出来）。</p>
<p>&emsp;&emsp;&emsp;&emsp;2. 属于<code>SQL</code>语法的要使用大写 （SELECT, WHERE, INSERT etc…）。</p>
<p>&emsp;&emsp;&emsp;&emsp;3. 属于使用者自己定义的要使用小写（表名、列名 etc…）。</p>
<p>&emsp;&emsp;&emsp;&emsp;4. 表名与列名前后使用 ` 包起来，防止与关键字冲突（例如：&nbsp;INSERT&nbsp;INTO `user` VALUES(a,b); ）。</p>
<p>&emsp;&emsp;&emsp;&emsp;5. 禁止使用 Table Join。</p>
<p>&emsp;&emsp;&emsp;&emsp;6. 禁止使用 Oracle Trigger。</p>
<p>&emsp;&emsp;&emsp;&emsp;7. 禁止使用 SELECT * （为了加强代码可读性）。</p>
<p>&emsp;&emsp;&emsp;&emsp;8. 不能将查询数据库的 SQL 放在循环中查询。</p>
<h2 id="新增（CREATE）"><a href="#新增（CREATE）" class="headerlink" title="新增（CREATE）"></a>新增（CREATE）</h2><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th align="center"><strong>语句</strong></th>
</tr>
</thead>
<tbody><tr>
<td>创建数据库</td>
<td align="center"><code>CREATE DATABASE &lt;数据库名&gt;;</code></td>
</tr>
<tr>
<td>创建数据表</td>
<td align="center"><code>CREATE TABLE  &lt;表名&gt; (</code><br><code>&lt;列名1&gt; &lt;数据类型&gt; &lt;约束条件&gt;,</code><br><code>&lt;列名2&gt; &lt;数据类型&gt; &lt;约束条件&gt;,</code><br><code>&lt;列名3&gt; &lt;数据类型&gt; &lt;约束条件&gt;,</code><br><code>......</code><br><code>&lt;该表的的约束条件1&gt; </code><br><code>&lt;该表的的约束条件2&gt;...);</code></td>
</tr>
<tr>
<td>插入数据</td>
<td align="center"><code>INSERT INTO &lt;表名&gt; (列名1,列名2,...) VALUES (值1,值2,...);</code><br>（每列都有数据插入时，可省略列名。但是为了代码的可读性，不建议如此操作。）</td>
</tr>
<tr>
<td>增加列</td>
<td align="center"><code>ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; &lt;数据类型&gt; &lt;约束条件&gt; AFTER &lt;前一列列名&gt;;</code><br>（默认插入到最后一列）</td>
</tr>
</tbody></table>
<h2 id="删除（DELETE）"><a href="#删除（DELETE）" class="headerlink" title="删除（DELETE）"></a>删除（DELETE）</h2><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th align="center"><strong>语句</strong></th>
</tr>
</thead>
<tbody><tr>
<td>删除数据库</td>
<td align="center"><code>DROP DATABASE &lt;数据库名&gt;;</code></td>
</tr>
<tr>
<td>删除数据表</td>
<td align="center"><code>DROP TABLE &lt;表名&gt;;</code></td>
</tr>
<tr>
<td>清空表数据</td>
<td align="center"><code>DELETE FROM &lt;表名&gt;;</code> 或者 <code>TRUNCATE TABLE &lt;表名&gt;;</code></td>
</tr>
<tr>
<td>删除行数据</td>
<td align="center"><code>DELETE FROM &lt;表名&gt; WHERE &lt;条件&gt;;</code></td>
</tr>
<tr>
<td>删除列数据</td>
<td align="center"><code>ALTER TABLE &lt;表名&gt; DROP &lt;列名&gt;;</code></td>
</tr>
</tbody></table>
<h2 id="修改（UPDATE）"><a href="#修改（UPDATE）" class="headerlink" title="修改（UPDATE）"></a>修改（UPDATE）</h2><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th align="center"><strong>语句</strong></th>
</tr>
</thead>
<tbody><tr>
<td>修改数据库名</td>
<td align="center"><code>RENAME DATABASE &lt;旧名称&gt; TO &lt;新名称&gt;;</code></td>
</tr>
<tr>
<td>修改表名</td>
<td align="center"><code>RENAME TABLE &lt;旧名称&gt; TO &lt;新名称&gt;;</code></td>
</tr>
<tr>
<td></td>
<td align="center"></td>
</tr>
<tr>
<td><code>注意：</code></td>
<td align="center"><code>重命名数据库与数据表一般不推荐使用，若想测试，请先备份好自己的数据库~</code></td>
</tr>
<tr>
<td></td>
<td align="center"></td>
</tr>
<tr>
<td>修改数据</td>
<td align="center"><code>UPDATE &lt;表名&gt; SET &lt;列名1&gt; = &lt;新值1&gt;,&lt;列名2&gt; = &lt;新值2&gt; WHERE &lt;条件&gt;;</code></td>
</tr>
<tr>
<td>修改列名</td>
<td align="center"><code>ALTER TABLE &lt;表名&gt; CHANGE &lt;旧列名&gt; &lt;新列名&gt; &lt;数据类型&gt; &lt;约束条件&gt;;</code></td>
</tr>
</tbody></table>
<h2 id="查询（-R-E-A-D-）"><a href="#查询（-R-E-A-D-）" class="headerlink" title="查询（  R  E  A  D  ）"></a>查询（  R  E  A  D  ）</h2><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th align="center"><strong>语句</strong></th>
</tr>
</thead>
<tbody><tr>
<td>查询所有数据库</td>
<td align="center"><code>SHOW DATABASES;</code></td>
</tr>
<tr>
<td>查询指定数据库中所有表名</td>
<td align="center"><code>USE &lt;数据库名&gt;;</code> 然后 <code>SHOW TABLES;</code><br>或者 <code>SHOW TABLES FROM &lt;数据库名&gt;;</code></td>
</tr>
<tr>
<td>查询表中所有列信息</td>
<td align="center"><code>SHOW COLUMNS FROM &lt;表名&gt;;</code></td>
</tr>
<tr>
<td>查询表中所有数据</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名&gt;;</code></td>
</tr>
<tr>
<td>查询表中某个数据</td>
<td align="center"><code>SELECT &lt;列名&gt; FROM &lt;表名&gt;;</code></td>
</tr>
<tr>
<td>查询表中指定多个数据</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名&gt; WHERE &lt;条件&gt;;</code></td>
</tr>
<tr>
<td>查询表中指定一个数据</td>
<td align="center"><code>SELECT &lt;列名&gt; FROM &lt;表名&gt; WHERE &lt;条件&gt;;</code></td>
</tr>
<tr>
<td>查询指定范围数据</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名&gt; WHERE </code><br><code>&lt;某列名&gt; BETWEEN &lt;某列名范围值-小&gt; AND &lt;某列名范围值-大&gt;;</code></td>
</tr>
<tr>
<td>字符串模式匹配查询</td>
<td align="center"><code>SELECT &lt;列名&gt; FROM &lt;表名&gt; WHERE name LIKE &#39;Y%&#39;;</code><br>（查询以Y开头的，更多匹配方式自行百度哦~。）</td>
</tr>
<tr>
<td>指定多个值数据查询</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名&gt; WHERE </code><br><code>&lt;某列名&gt; IN (&#39;&lt;某列名值1&gt;&#39;,&#39;&lt;某列名值2&gt;&#39;,&#39;&lt;某列名值3&gt;&#39;,...);</code></td>
</tr>
<tr>
<td>查询结果排序</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名&gt; ORDER BY &lt;某列名&gt; DESC;</code><br>（此处为递减排列，默认为递增<code>ASC</code>）</td>
</tr>
<tr>
<td>查询指定几笔数据</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名&gt; LIMIT n,m;</code><br>（从<code>n</code>到<code>m</code>笔数据）</td>
</tr>
<tr>
<td>分群查询</td>
<td align="center"><code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,...,&lt;函数&gt; FROM &lt;表名&gt; GROUP BY &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,...;</code><br>（常搭配函数有：<code>SUM()</code>、<code>AVG()</code>、<code>COUNT()</code>、<code>MAX()</code>、<code>MIN()</code>）</td>
</tr>
<tr>
<td>查询不重复结果</td>
<td align="center"><code>SELECT DISTINCT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt; FROM &lt;表名&gt; WHERE 条件</code></td>
</tr>
</tbody></table>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><table>
<thead>
<tr>
<th align="center"><strong>函数名</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><em><strong><code>ABS(数值)</code></strong></em></td>
<td>ABS函数（求绝对值）</td>
</tr>
<tr>
<td align="center"><em><strong><code>MOD(被除数,除数)</code></strong></em></td>
<td>MOD函数（求余）</td>
</tr>
<tr>
<td align="center"><em><strong><code>ROUND(对象数值,保留小数的位数)</code></strong></em></td>
<td>ROUND函数（四舍五入）</td>
</tr>
<tr>
<td align="center"><em><strong><code>字符串1丨丨字符串2</code></strong></em></td>
<td>丨丨函数（拼接）</td>
</tr>
<tr>
<td align="center"><em><strong><code>LENGTH(字符串)</code></strong></em></td>
<td>LENGTH函数（求字符串长度）</td>
</tr>
<tr>
<td align="center"><em><strong><code>LOWER(字符串)</code></strong></em></td>
<td>LOWER函数（小写转换）</td>
</tr>
<tr>
<td align="center"><em><strong><code>UPPER(字符串)</code></strong></em></td>
<td>UPPER函数（大写转换）</td>
</tr>
<tr>
<td align="center"><em><strong><code>REPLACE(对象字符串,替换前的字符串,替换后的字符串)</code></strong></em></td>
<td>REPLACE函数（字符串的替换）</td>
</tr>
<tr>
<td align="center"><em><strong><code>SUBSTRING (对象字符串,截取的起始位置,截取的字符数)</code></strong></em></td>
<td>SUBSTRING函数（字符串的截取）</td>
</tr>
<tr>
<td align="center"><em><strong><code>CURRENT_DATE</code></strong></em></td>
<td>CURRENT_DATE函数（当前日期）</td>
</tr>
<tr>
<td align="center"><em><strong><code>CURRENT_TIME</code></strong></em></td>
<td>CURRENT_TIME函数（当前时间）</td>
</tr>
<tr>
<td align="center"><em><strong><code>CURRENT_TIMESTAMP</code></strong></em></td>
<td>CURRENT_TIMESTAMP函数（当前日期和时间）若用于on update可以在更新数据时更新此栏位</td>
</tr>
<tr>
<td align="center"><em><strong><code>EXTRACT(日期元素 FROM 日期)</code></strong></em></td>
<td>EXTRACT函数（截取日期元素）</td>
</tr>
<tr>
<td align="center"><em><strong><code>CAST(转换前的值 AS 想要转换的数据类型)</code></strong></em></td>
<td>CAST函数（类型转换）</td>
</tr>
<tr>
<td align="center"><em><strong><code>COALESCE(数据1,数据2,数据3....)</code></strong></em></td>
<td>COALESCE函数（将NULL转换为其他值）</td>
</tr>
<tr>
<td align="center"><em><strong><code>SELECT uuid() as uuid</code></strong></em></td>
<td>可以利用数据库生成 Version 1的UUID</td>
</tr>
<tr>
<td align="center"><em><strong><code>OPTIMIZE TABLE table1, table2</code></strong></em></td>
<td>可以最佳化数据表</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;补充：CASE表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE WHEN &lt;求值表达式&gt; THEN &lt;表达式&gt;            </span><br><span class="line">     WHEN &lt;求值表达式&gt; THEN &lt;表达式&gt;            </span><br><span class="line">     WHEN &lt;求值表达式&gt; THEN &lt;表达式&gt; </span><br><span class="line">     ......            </span><br><span class="line">     ELSE &lt;表达式&gt; </span><br><span class="line"> END</span><br></pre></td></tr></table></figure>


<h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><h3 id="常见数据类型"><a href="#常见数据类型" class="headerlink" title="常见数据类型"></a>常见数据类型</h3><p><img data-src="/images/loading.gif" data-original="/sql/data_type.png"></p>
<p><img data-src="/images/loading.gif" data-original="/sql/date_type.png"></p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>&emsp;&emsp;给表设置别名，让SQL更简洁。例如：</p>
<p>&emsp;&emsp;&emsp;&emsp;<code>SELECT &lt;列名1&gt;,&lt;列名2&gt;,&lt;列名3&gt;,... FROM &lt;表名1&gt; &lt;别名a&gt;,&lt;表名2&gt; &lt;别名b&gt; WHERE &lt;别名a&gt;.&lt;某值&gt; = &lt;别名b&gt;.&lt;某值&gt;;</code></p>
<p>&emsp;&emsp;列名也可以设置别名。例如：</p>
<p>&emsp;&emsp;&emsp;&emsp;<code>SELECT &lt;列名1&gt; &lt;别名a&gt;,&lt;列名2&gt; &lt;别名b&gt;,&lt;列名3&gt; &lt;别名c&gt;,... FROM &lt;表名&gt;;</code> 或者 <code>SELECT &lt;列名1&gt; AS &lt;别名a&gt;,&lt;列名2&gt; AS &lt;别名b&gt;,&lt;列名3&gt; AS &lt;别名c&gt;,... FROM &lt;表名&gt;;</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;如需要找到符合条件的一些表可以去查询information_schema中的信息，例如：<code>SELECT * FROM information_schema.TABLES</code><br>&emsp;&emsp;以上整理的内容均为基础内容，更多进阶知识还需各位自行Google。</p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>设置网站运行时间</title>
    <url>/old_now/</url>
    <content><![CDATA[<div class="note success no-icon"><p>设置网站运行时间</p>
</div>
<span id="more"></span> 

<h2 id="网站运行时间计算一"><a href="#网站运行时间计算一" class="headerlink" title="网站运行时间计算一"></a>网站运行时间计算一</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 底部运行时间计算（记得设置html&lt;span id=&quot;old-now&quot;&gt;&lt;/span&gt;）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showDatetime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;showDatetime()&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">BirthDay</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;08/01/2019 00:00:00&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> timeold = (today.<span class="title function_">getTime</span>() - <span class="title class_">BirthDay</span>.<span class="title function_">getTime</span>());</span><br><span class="line">  <span class="keyword">let</span> sectimeold = timeold / <span class="number">1000</span>;</span><br><span class="line">  secondsold = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sectimeold);</span><br><span class="line">  <span class="keyword">let</span> msPerDay = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">let</span> e_daysold = timeold / msPerDay;</span><br><span class="line">  <span class="keyword">let</span> daysold = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e_daysold);</span><br><span class="line">  <span class="keyword">let</span> e_hrsold = (e_daysold - daysold) * <span class="number">24</span>;</span><br><span class="line">  <span class="keyword">let</span> hrsold = <span class="title function_">setZero</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(e_hrsold));</span><br><span class="line">  <span class="keyword">let</span> e_minsold = (e_hrsold - hrsold) * <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">let</span> minsold = <span class="title function_">setZero</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((e_hrsold - hrsold) * <span class="number">60</span>));</span><br><span class="line">  <span class="keyword">let</span> seconds = <span class="title function_">setZero</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((e_minsold - minsold) * <span class="number">60</span>));</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#old-now&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&amp;nbsp已运行&amp;nbsp;&quot;</span> + daysold + <span class="string">&quot;&amp;nbsp天&amp;nbsp&quot;</span> + hrsold + <span class="string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + minsold + <span class="string">&quot;&amp;nbsp分&amp;nbsp&lt;strong style=&#x27;color:#A52A2A&#x27;&gt;&quot;</span> + seconds + <span class="string">&quot;&lt;/strong&gt;&amp;nbsp秒&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归零</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Integer</span>&#125; nothing。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setZero</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    i = <span class="string">&quot;0&quot;</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="网站运行时间计算二"><a href="#网站运行时间计算二" class="headerlink" title="网站运行时间计算二"></a>网站运行时间计算二</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> run = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;05/28/2018 20:01:01&quot;</span>);</span><br><span class="line">  <span class="comment">//总秒数</span></span><br><span class="line">  <span class="keyword">var</span> runTime = (now - run) / <span class="number">1000</span>,</span><br><span class="line">    days = <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>),</span><br><span class="line">    hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * days)),</span><br><span class="line">    minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(runTime / <span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * days) - (<span class="number">60</span> * hours)),</span><br><span class="line">    seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((now - run) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * days) - (<span class="number">60</span> * <span class="number">60</span> * hours) - (<span class="number">60</span> * minutes));</span><br><span class="line">  <span class="comment">//前置零</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(hours).<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    hours = <span class="string">&quot;0&quot;</span> + hours;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(minutes).<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    minutes = <span class="string">&quot;0&quot;</span> + minutes;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(seconds).<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    seconds = <span class="string">&quot;0&quot;</span> + seconds;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*document.querySelector(&quot;.run-times&quot;).innerHTML = days + &quot;&amp;thinsp;天&amp;thinsp;&quot; + hours</span></span><br><span class="line"><span class="comment">          + &quot;&amp;thinsp;时&amp;thinsp;&quot; + minutes + &quot;&amp;thinsp;分&amp;thinsp;&quot; + seconds + &quot;&amp;thinsp;秒&quot;;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.run-times&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;RunTime: &quot;</span> + days + <span class="string">&quot;,&quot;</span> + hours</span><br><span class="line">          + <span class="string">&quot;:&quot;</span> + minutes + <span class="string">&quot;:&quot;</span> + seconds + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setInterval(&quot;createTime()&quot;, 500);</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> siteTime = <span class="built_in">setInterval</span>(<span class="string">&quot;createTime()&quot;</span>, <span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(siteTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTML写法</span></span><br><span class="line"><span class="comment">&lt;span class=&quot;run-times&quot; title=&quot;网站运行时间&quot;&gt;载入中...&lt;/span&gt;</span></span><br><span class="line"><span class="comment">&lt;p class=&quot;run-times&quot; title=&quot;主页运行时间&quot;&gt;RunTime Loading...&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>html+css+js实现的进度条</title>
    <url>/progress/</url>
    <content><![CDATA[<div class="note info no-icon"><p>html+css+js实现的进度条</p>
</div>
<span id="more"></span> 

<h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-dialog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>载入中...<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-body&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-wrap&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;progressMove();&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 我的css */</span></span><br><span class="line"><span class="selector-class">.progress-dialog</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5vw</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-dialog</span> <span class="selector-tag">strong</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">18%</span> auto;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1%</span>;</span><br><span class="line">  <span class="attribute">color</span>: chocolate;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">30%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-body</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15vw</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bdd0e4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#489ef9</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15vw</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">5vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进度条显示，CSS样式自行设计。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">progressMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> dialogPar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.progress-dialog&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> dialogWrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.progress-wrap&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> wrapWidth = <span class="number">0</span>;</span><br><span class="line">  dialogPar.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (wrapWidth &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(temp);</span><br><span class="line">      dialogPar.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">      dialogWrap.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;0%&quot;</span>;</span><br><span class="line">      dialogWrap.<span class="property">innerHTML</span> = <span class="string">&quot;0%&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      wrapWidth += <span class="number">5</span>;</span><br><span class="line">      dialogWrap.<span class="property">style</span>.<span class="property">width</span> = wrapWidth + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">      dialogWrap.<span class="property">innerHTML</span> = wrapWidth + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">90</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>选项卡欺骗提示</title>
    <url>/xuanxiangka/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>选项卡欺骗提示</p>
</div>
<span id="more"></span> 
<h2 id="网页选项卡切换提示"><a href="#网页选项卡切换提示" class="headerlink" title="网页选项卡切换提示"></a>网页选项卡切换提示</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态栏判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">OriginTitle</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line">  <span class="keyword">var</span> titleTime;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;                   <span class="comment">//浏览器切换事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;hidden&#x27;</span>) &#123;                                <span class="comment">//状态判断</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27; (╥﹏╥) 你快回来 ~ &#x27;</span>;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27; (∩_∩) 欢迎回来 ~ &#x27;</span> + <span class="title class_">OriginTitle</span>;</span><br><span class="line">      titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitle</span>;</span><br><span class="line">      &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c欢迎来到DoubleAm的主页 ～ &#x27;</span>, <span class="string">&#x27;background:chocolate;border:1px solid tomato;border-radius:10px;box-sizing:border-box;color:yellow;font-size:26px;padding:13px;line-height:26px;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>js验证码</title>
    <url>/setcodes/</url>
    <content><![CDATA[<div class="note info no-icon"><p>html+css+js实现的验证码</p>
</div>
<span id="more"></span> 

<h2 id="js验证码"><a href="#js验证码" class="headerlink" title="js验证码"></a>js验证码</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;codediv&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code&quot;</span> <span class="attr">id</span>=<span class="string">&quot;codes&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;createCode();&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;code&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;code-input&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 我的css */</span></span><br><span class="line"><span class="selector-class">.codediv</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.code</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">code_bg.png</span>);//图片地址：https://a.biugle.cn/setcodes/code_bg.png</span><br><span class="line">  font-family: Arial;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">3px</span> <span class="number">1px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">21px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">21px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.code-input</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4876ff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#777</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">121px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码，CSS样式自行设计。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> code;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> codeLength = <span class="number">4</span>;<span class="comment">//验证码的长度</span></span><br><span class="line">  <span class="keyword">var</span> checkCode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#codes&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> codeChars = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;贺&#x27;</span>);<span class="comment">//所有候选组成验证码的字符，可以用中文。</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> charNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>);</span><br><span class="line">    code += codeChars[charNum];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (checkCode) &#123;</span><br><span class="line">    checkCode.<span class="property">className</span> = <span class="string">&quot;code&quot;</span>;</span><br><span class="line">    checkCode.<span class="property">innerHTML</span> = code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 记得先将输入的内容全转为大写或者小写，再进行验证。 */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP获取ip地址</title>
    <url>/phpip/</url>
    <content><![CDATA[<div class="note default no-icon"><p>PHP获取ip地址的方式</p>
</div>
<span id="more"></span>

<blockquote class="blockquote-center">
<p>废话不多说，上代码。</p>

</blockquote> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取ip地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String ip地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ip</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="string">&#x27;未知IP&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_ip</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>)) ? <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>) : <span class="variable">$ip</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_ip</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)) ? <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) : <span class="variable">$ip</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_ip</span>(<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;REMOTE_ADDR&#x27;</span>)) ? <span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&#x27;REMOTE_ADDR&#x27;</span>) : <span class="variable">$ip</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断ip地址正确性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> String $str ip地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean 判断是否为ip地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_ip</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$ip</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$ip</span>[<span class="variable">$i</span>] &gt; <span class="number">255</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$/&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用原生方法与正则表达式check ip与IP段（例如：1.*,1.1.*,1.1.1.*）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkIp</span>(<span class="params"><span class="variable">$ip</span></span>): <span class="title">bool</span> </span>&#123;</span><br><span class="line">  <span class="variable">$pattern</span> = <span class="string">&#x27;/(^(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.\*$)|(^(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])\.\*$)|(^(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.\*$)|(\*)/&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$ip</span>) || <span class="title function_ invoke__">filter_var</span>(<span class="variable">$ip</span>, FILTER_VALIDATE_IP)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP的资料接收传递</title>
    <url>/phpformdata/</url>
    <content><![CDATA[<div class="note default no-icon"><p>PHP的资料接收、过滤。</p>
</div>
<span id="more"></span> 

<h3 id="资料接收"><a href="#资料接收" class="headerlink" title="资料接收"></a>资料接收</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_ invoke__">filter_input</span>(<span class="variable">$type</span>, <span class="variable">$variable_name</span>)<span class="comment">//type资料类型，variable_name变量名称。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* type有以下类型 */</span></span><br><span class="line">INPUT_GET</span><br><span class="line">INPUT_POST</span><br><span class="line">INPUT_COOKIE</span><br><span class="line">INPUT_ENV</span><br><span class="line">INPUT_SERVER</span><br><span class="line">INPUT_SESSION</span><br><span class="line"><span class="title function_ invoke__">INPUT_REQUEST</span> (Not yet implemented)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="资料过滤"><a href="#资料过滤" class="headerlink" title="资料过滤"></a>资料过滤</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>);<span class="comment">//替换HTML特殊字符为实体字符</span></span><br><span class="line"><span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>);<span class="comment">//去除不必要的符号（空白、换行等）</span></span><br><span class="line"><span class="title function_ invoke__">stripslashes</span>(<span class="variable">$str</span>);<span class="comment">//删除倒斜线</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$link</span>, <span class="variable">$escapestr</span>);<span class="comment">//替换SQL特殊字符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>前端跨域</title>
    <url>/js_kuayu/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>前端常见跨域问题</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTE0NTM2NA==">转载文章<i class="fa fa-external-link-alt"></i></span></p>

</blockquote>


<h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><p><strong>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</strong></p>
<p>广义的跨域：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.) 资源跳转： A链接、重定向、表单提交。</span><br><span class="line">2.) 资源嵌入： &lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;等dom标签，还有样式中background:url()、@font-face()等文件外链。</span><br><span class="line">3.) 脚本请求： js发起的ajax请求、dom和js对象的跨域操作等。</span><br></pre></td></tr></table></figure>

<p>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p>
<h2 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h2><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>
<p>同源策略限制以下几种行为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.) Cookie、LocalStorage 和 IndexDB 无法读取</span><br><span class="line">2.) DOM 和 Js对象无法获得</span><br><span class="line">3.) AJAX 请求不能发送</span><br></pre></td></tr></table></figure>

<h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL                                      说明                    是否允许通信</span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://www.domain.com/b.js         同一域名，不同文件或路径。         允许</span><br><span class="line">http://www.domain.com/lab/c.js</span><br><span class="line"></span><br><span class="line">http://www.domain.com:8000/a.js</span><br><span class="line">http://www.domain.com/b.js         同一域名，不同端口。              不允许</span><br><span class="line"> </span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">https://www.domain.com/b.js        同一域名，不同协议。              不允许</span><br><span class="line"> </span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://192.168.4.12/b.js           域名和域名对应相同ip              不允许</span><br><span class="line"> </span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://x.domain.com/b.js           主域相同，子域不同。              不允许</span><br><span class="line">http://domain.com/c.js</span><br><span class="line"> </span><br><span class="line">http://www.domain1.com/a.js</span><br><span class="line">http://www.domain2.com/b.js        不同域名                          不允许</span><br></pre></td></tr></table></figure>

<h2 id="跨域解决方案？"><a href="#跨域解决方案？" class="headerlink" title="跨域解决方案？"></a>跨域解决方案？</h2><p>1、 通过jsonp跨域<br>2、 document.domain + iframe跨域<br>3、 location.hash + iframe<br>4、 window.name + iframe跨域<br>5、 postMessage跨域<br>6、 跨域资源共享（CORS）<br>7、 nginx代理跨域<br>8、 nodejs中间件代理跨域<br>9、 WebSocket协议跨域</p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Js一些常用demo</title>
    <url>/jsdemo/</url>
    <content><![CDATA[<div class="note info no-icon"><p>JavaScript一些常用demo汇总</p>
</div>
<span id="more"></span> 
<h2 id="获取显示当前时间"><a href="#获取显示当前时间" class="headerlink" title="获取显示当前时间"></a>获取显示当前时间</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* jQuery代码 */</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;#now-time&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;onselectstart&quot;</span>, <span class="string">&quot;return false&quot;</span>);<span class="comment">//禁止选中文字</span></span><br><span class="line">  $(<span class="string">&quot;#now-time&quot;</span>).<span class="title function_">text</span>(<span class="title function_">currentTime</span>());</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#now-time&quot;</span>).<span class="title function_">text</span>(<span class="title function_">currentTime</span>());</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取最新时间/可使用BiugleJS挂在Date原型上的方法format获取当前时间new Date().format(&quot;yyyy-mm-dd h:i:s&quot;);</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">String</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">currentTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> time;</span><br><span class="line">    <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = date.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">var</span> minute = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">var</span> second = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">    hour = (hour &lt; <span class="number">10</span>) ? (<span class="string">&quot;0&quot;</span> + hour) : hour;</span><br><span class="line">    minute = (minute &lt; <span class="number">10</span>) ? (<span class="string">&quot;0&quot;</span> + minute) : minute;</span><br><span class="line">    second = (second &lt; <span class="number">10</span>) ? (<span class="string">&quot;0&quot;</span> + second) : second;</span><br><span class="line">    time = year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span> + <span class="string">&quot; &quot;</span> + hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="前台处理字符串"><a href="#前台处理字符串" class="headerlink" title="前台处理字符串"></a>前台处理字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理问题字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; 要处理的字符串。//可使用es6trim方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatStr</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&quot;&quot;</span>);<span class="comment">//去掉前后空格</span></span><br><span class="line">  <span class="comment">//str = str.replace(/\s+/g,&quot;&quot;);//去掉空格</span></span><br><span class="line">  <span class="comment">//str=str.replace( /^\s/, &#x27;&#x27;);//去掉左空格</span></span><br><span class="line">  <span class="comment">//str=str.replace(/(\s$)/g, &quot;&quot;);//去掉右空格</span></span><br><span class="line">  <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  div.<span class="property">textContent</span> = str;<span class="comment">//利用textContent属性转化&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;&amp;&quot;,&quot;&#x27;&quot;等字符 </span></span><br><span class="line">  <span class="keyword">let</span> formatString = div.<span class="property">innerHTML</span>;</span><br><span class="line">  <span class="keyword">return</span> formatString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="onkeydown设置键盘事件"><a href="#onkeydown设置键盘事件" class="headerlink" title="onkeydown设置键盘事件"></a>onkeydown设置键盘事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键盘事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Event</span>&#125; 当前按下的按键。SPA网站记得离开页面时off掉原有事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addKeyboard</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">//console.log(e.key);//获取键值</span></span><br><span class="line">  <span class="keyword">var</span> keyNum = <span class="variable language_">window</span>.<span class="property">event</span> ? e.<span class="property">keyCode</span> : e.<span class="property">which</span>;</span><br><span class="line">  <span class="comment">//console.log(keyNum);</span></span><br><span class="line">  <span class="keyword">if</span> (keyNum === <span class="variable constant_">XXX</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (keyNum === <span class="variable constant_">XXX</span> &amp;&amp; e.<span class="property">altKey</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (keyNum === <span class="variable constant_">XXX</span> &amp;&amp; e.<span class="property">ctrlKey</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数组处理"><a href="#数组处理" class="headerlink" title="数组处理"></a>数组处理</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 第一种方法 */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="comment">/* 第二种方法 */</span></span><br><span class="line"><span class="keyword">let</span> A = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span>.<span class="title function_">call</span>(A, <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 取第一个值 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> response) &#123;</span><br><span class="line">  result = response[key];</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> response) &#123;</span><br><span class="line">   result = value;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环处理数组/对象 jquery举例子，更多js遍历数组方法不介绍了。 */</span></span><br><span class="line"><span class="comment">/* 需注意，除for...of，for，for...in之外，其他方法均不能强行跳出。 */</span></span><br><span class="line">$.<span class="title function_">each</span>([array/object], <span class="keyword">function</span> (<span class="params">key, val</span>) &#123;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例a */</span></span><br><span class="line">$.<span class="title function_">each</span>([<span class="number">1</span>, <span class="number">2</span>], <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(index + <span class="string">&#x27;: &#x27;</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* 这将产生两个信息 */</span></span><br><span class="line"><span class="comment">/* 0: 52 */</span></span><br><span class="line"><span class="comment">/* 1: 97 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例b */</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="string">&quot;a&quot;</span>: <span class="string">&quot;AAA&quot;</span>,</span><br><span class="line">  <span class="string">&quot;b&quot;</span>: <span class="string">&quot;BBB&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">$.<span class="title function_">each</span>(obj, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( key + <span class="string">&quot;: &quot;</span> + value );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* 这将产生两个信息 */</span></span><br><span class="line"><span class="comment">/* a: AAA */</span></span><br><span class="line"><span class="comment">/* b: BBB */</span></span><br></pre></td></tr></table></figure>

<h2 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数"></a>产生随机数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; 随机数范围</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Number</span>&#125; 产生的随机数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandnum</span>(<span class="params">range</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>() * range;</span><br><span class="line">  num = <span class="built_in">parseInt</span>(num);</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="控制台打印内容"><a href="#控制台打印内容" class="headerlink" title="控制台打印内容"></a>控制台打印内容</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">consoleInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c博客名称%cDoubleAm&quot;</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#3fa9f5;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c网站地址%chttps://a.biugle.cn&quot;</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#00bc12;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c扣扣号码%c1005760694&quot;</span>, <span class="string">&quot;line-height:28px;padding:4px;background:#a1afc9;color:#000;font-size:16px;margin-right:15px&quot;</span>, <span class="string">&quot;color:#ff9900;line-height:28px;font-size:16px;&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%c桃李春风一杯酒，江湖夜雨十年灯！&quot;</span>, <span class="string">&quot;line-height:28px;padding:5px;color:#fff;font-weight:bolder;font-size:16px;background-color:chocolate;color:#fff;&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">console</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">log</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c页面加载消耗了 %c<span class="subst">$&#123;(<span class="built_in">Math</span>.round(<span class="number">100</span> * performance.now()) / <span class="number">100</span> / <span class="number">1e3</span>).toFixed(<span class="number">2</span>)&#125;</span>s`</span>, <span class="string">&quot;background: #fff;color: #333;text-shadow: 0 0 2px #eee, 0 0 3px #eee, 0 0 3px #eee, 0 0 2px #eee, 0 0 3px #eee;&quot;</span>, <span class="string">&quot;color:tomato;font-weight:bolder;&quot;</span>);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;access&quot;</span>) || <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;access&quot;</span>, (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>());</span><br><span class="line">    <span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;access&quot;</span>)));</span><br><span class="line">    <span class="keyword">let</span> o = <span class="string">`<span class="subst">$&#123;e.getFullYear()&#125;</span>年<span class="subst">$&#123;e.getMonth() + <span class="number">1</span>&#125;</span>月<span class="subst">$&#123;e.getDate()&#125;</span>日`</span>;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;hit&quot;</span>) ? t = <span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;hit&quot;</span>)) : <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;hit&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;hit&quot;</span>, ++t);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%c这是你自 %c<span class="subst">$&#123;o&#125;</span> %c以来第 %c<span class="subst">$&#123;t&#125;</span> %c次在本站打开控制台，你想知道什么秘密吗～`</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;color:chocolate;font-weight:bolder;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;color:chocolate;font-weight:bolder;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="禁止使用快捷键打开控制台"><a href="#禁止使用快捷键打开控制台" class="headerlink" title="禁止使用快捷键打开控制台"></a>禁止使用快捷键打开控制台</h2><blockquote>
<p>这个是闹着玩的，只需把右键点击事件取消，在把<code>Ctrl+U</code>和<code>F12</code>这两个快捷键原本的事件取消，或者重新设置一个监听方法就可以了。</p>
</blockquote>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP与数据库的连接</title>
    <url>/phpsql/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>PHP与数据库的连接方法</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p><strong>废话不多说，贴代码。</strong></p>

</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;数据库地址&quot;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;账号&quot;</span>;</span><br><span class="line"><span class="variable">$pwd</span> = <span class="string">&quot;密码&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;数据库名&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$hxb_db = new mysqli($host, $user, $pwd, $dbname); //面向对象连接方式</span></span><br><span class="line"><span class="variable">$hxb_db</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$host</span>, <span class="variable">$user</span>, <span class="variable">$pwd</span>, <span class="variable">$dbname</span>); <span class="comment">//面向过程连接方式</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hxb_db</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;数据库连接失败！！！！！&quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$set_code</span> = <span class="string">&quot;SET NAMES UTF8&quot;</span>; <span class="comment">//设置编码格式</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$hxb_db</span>, <span class="variable">$set_code</span>); <span class="comment">//执行查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">filter_input</span>(INPUT_SERVER, <span class="string">&quot;REQUEST_METHOD&quot;</span>) === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$hxb_db</span>); <span class="comment">//直接访问此文件时关闭数据库！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">
<p>其他</p>

</blockquote>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);          <span class="comment">//只能返回一个一位数组，只能通过下标来显示，$row[0];</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);        <span class="comment">//不只可以返回一个一维数组，还可以返回键值对的方式，从而通过$array[&#x27;title&#x27;]方式来显示。</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_fetch_object</span>(<span class="variable">$result</span>);       <span class="comment">//从结果集中取得一行，并作为对象返回。</span></span><br><span class="line"><span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>);            <span class="comment">//返回mysql查询结果的数目</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_affected_rows</span>(<span class="variable">$connect</span>);     <span class="comment">//取得影响行数</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_insert_id</span>(<span class="variable">$connect</span>);         <span class="comment">//取得最后一笔自动新增的 id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table><tbody><tr><th width="30%">函数</th><th width="70%">描述</th></tr><tr><td>mysqli_affected_rows()</td><td>返回前一次 MySQL 操作所影响的记录行数。</td></tr><tr><td>mysqli_autocommit()</td><td>打开或关闭自动提交数据库修改。</td></tr><tr><td>mysqli_change_user()</td><td>更改指定数据库连接的用户。</td></tr><tr><td>mysqli_character_set_name()</td><td>返回数据库连接的默认字符集。</td></tr><tr><td>mysqli_close()</td><td>关闭先前打开的数据库连接。</td></tr><tr><td>mysqli_commit()</td><td>提交当前事务。</td></tr><tr><td>mysqli_connect_errno()</td><td>返回上一次连接错误的错误代码。</td></tr><tr><td>mysqli_connect_error()</td><td>返回上一次连接错误的错误描述。</td></tr><tr><td>mysqli_connect()</td><td>打开一个到 MySQL 服务器的新的连接。</td></tr><tr><td>mysqli_data_seek()</td><td>调整结果指针到结果集中的一个任意行。</td></tr><tr><td>mysqli_debug()</td><td>执行调试操作。</td></tr><tr><td>mysqli_dump_debug_info()</td><td>转储调试信息到日志中。</td></tr><tr><td>mysqli_errno()</td><td>返回最近调用函数的最后一个错误代码。</td></tr><tr><td>mysqli_error_list()</td><td>返回最近调用函数的错误列表。</td></tr><tr><td>mysqli_error()</td><td>返回最近调用函数的最后一个错误描述。</td></tr><tr><td>mysqli_fetch_all()</td><td>从结果集中取得所有行作为关联数组，或数字数组，或二者兼有。</td></tr><tr><td>mysqli_fetch_array()</td><td>从结果集中取得一行作为关联数组，或数字数组，或二者兼有。</td></tr><tr><td>mysqli_fetch_assoc()</td><td>从结果集中取得一行作为关联数组。</td></tr><tr><td>mysqli_fetch_field_direct()</td><td>从结果集中取得某个单一字段的 meta-data，并作为对象返回。</td></tr><tr><td>mysqli_fetch_field()</td><td>从结果集中取得下一字段，并作为对象返回。</td></tr><tr><td>mysqli_fetch_fields()</td><td>返回结果中代表字段的对象的数组。</td></tr><tr><td>mysqli_fetch_lengths()</td><td>返回结果集中当前行的每个列的长度。</td></tr><tr><td>mysqli_fetch_object()</td><td>从结果集中取得当前行，并作为对象返回。</td></tr><tr><td>mysqli_fetch_row()</td><td>从结果集中取得一行，并作为枚举数组返回。</td></tr><tr><td>mysqli_field_count()</td><td>返回最近查询的列数。</td></tr><tr><td>mysqli_field_seek()</td><td>把结果集中的指针设置为指定字段的偏移量。</td></tr><tr><td>mysqli_field_tell()</td><td>返回结果集中的指针的位置。</td></tr><tr><td>mysqli_free_result()</td><td>释放结果内存。</td></tr><tr><td>mysqli_get_charset()</td><td>返回字符集对象。</td></tr><tr><td>mysqli_get_client_info()</td><td>返回 MySQL 客户端库版本。</td></tr><tr><td>mysqli_get_client_stats()</td><td>返回有关客户端每个进程的统计。</td></tr><tr><td>mysqli_get_client_version()</td><td>将 MySQL 客户端库版本作为整数返回。</td></tr><tr><td>mysqli_get_connection_stats()</td><td>返回有关客户端连接的统计。</td></tr><tr><td>mysqli_get_host_info()</td><td>返回 MySQL 服务器主机名和连接类型。</td></tr><tr><td>mysqli_get_proto_info()</td><td>返回 MySQL 协议版本。</td></tr><tr><td>mysqli_get_server_info()</td><td>返回 MySQL 服务器版本。</td></tr><tr><td>mysqli_get_server_version()</td><td>将 MySQL 服务器版本作为整数返回。</td></tr><tr><td>mysqli_info()</td><td>返回有关最近执行查询的信息。</td></tr><tr><td>mysqli_init()</td><td>初始化 MySQLi 并返回 mysqli_real_connect() 使用的资源。</td></tr><tr><td>mysqli_insert_id()</td><td>返回最后一个查询中自动生成的 ID。</td></tr><tr><td>mysql_kill()</td><td>请求服务器杀死一个 MySQL 线程。</td></tr><tr><td>mysqli_more_results()</td><td>检查一个多查询是否有更多的结果。</td></tr><tr><td>mysqli_multi_query()</td><td>执行一个或多个针对数据库的查询。</td></tr><tr><td>mysqli_next_result()</td><td>为 mysqli_multi_query() 准备下一个结果集。</td></tr><tr><td>mysqli_num_fields()</td><td>返回结果集中字段的数量。</td></tr><tr><td>mysqli_num_rows()</td><td>返回结果集中行的数量。</td></tr><tr><td>mysqli_options()</td><td>设置额外的连接选项，用于影响连接行为。</td></tr><tr><td>mysqli_ping()</td><td>进行一个服务器连接，如果连接已断开则尝试重新连接。</td></tr><tr><td>mysqli_prepare()</td><td>准备执行一个 SQL 语句。</td></tr><tr><td>mysqli_query()</td><td>执行某个针对数据库的查询。</td></tr><tr><td>mysqli_real_connect()</td><td>打开一个到 MySQL 服务器的新的链接。</td></tr><tr><td>mysqli_real_escape_string()</td><td>转义在 SQL 语句中使用的字符串中的特殊字符。</td></tr><tr><td>mysqli_real_query()</td><td>执行 SQL 查询</td></tr><tr><td>mysqli_reap_async_query()</td><td>返回异步查询的结果。</td></tr><tr><td>mysqli_refresh()</td><td>刷新表或缓存，或者重置复制服务器信息。</td></tr><tr><td>mysqli_rollback()</td><td>回滚数据库中的当前事务。</td></tr><tr><td>mysqli_select_db()</td><td>更改连接的默认数据库。</td></tr><tr><td>mysqli_set_charset()</td><td>设置默认客户端字符集。</td></tr><tr><td>mysqli_set_local_infile_default()</td><td>撤销用于 load local infile 命令的用户自定义句柄。</td></tr><tr><td>mysqli_set_local_infile_handler()</td><td>设置用于 LOAD DATA LOCAL INFILE 命令的回滚函数。</td></tr><tr><td>mysqli_sqlstate()</td><td>返回最后一个 MySQL 操作的 SQLSTATE 错误代码。</td></tr><tr><td>mysqli_ssl_set()</td><td>用于创建 SSL 安全连接。</td></tr><tr><td>mysqli_stat()</td><td>返回当前系统状态。</td></tr><tr><td>mysqli_stmt_init()</td><td>初始化声明并返回 mysqli_stmt_prepare() 使用的对象。</td></tr><tr><td>mysqli_store_result()</td><td>传输最后一个查询的结果集。</td></tr><tr><td>mysqli_thread_id()</td><td>返回当前连接的线程 ID。</td></tr><tr><td>mysqli_thread_safe()</td><td>返回是否将客户端库编译成 thread-safe。</td></tr><tr><td>mysqli_use_result()</td><td>从上次使用 mysqli_real_query() 执行的查询中初始化结果集的检索。</td></tr><tr><td>mysqli_warning_count()</td><td>返回连接中的最后一个查询的警告数量。</td></tr></tbody></table>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP学习记录</title>
    <url>/phpstudy/</url>
    <content><![CDATA[<div class="note success no-icon"><p>PHP的一些基础知识</p>
</div>
<span id="more"></span> 

<h2 id="网页架构"><a href="#网页架构" class="headerlink" title="网页架构"></a>网页架构</h2><p><img data-src="/images/loading.gif" data-original="/phpstudy/3ceng.png"></p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul>
<li>高阶程序语言</li>
<li>直译式程序语言 (脚本式程序语言)</li>
<li>动态型别程序语言 (Dynamic typed language)</li>
<li>动态网页程序语言</li>
</ul>
<h2 id="网页类型"><a href="#网页类型" class="headerlink" title="网页类型"></a>网页类型</h2><h3 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h3><p>从服务器下载后在 Client 执行</p>
<p>HTML、CSS、JavaScript</p>
<h3 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h3><p>先在服务器执行后才下载到 Client 执行</p>
<p>PHP、ASP.NET、JSP</p>
<h2 id="Date-amp-Time"><a href="#Date-amp-Time" class="headerlink" title="Date &amp; Time"></a>Date &amp; Time</h2><p><img data-src="/images/loading.gif" data-original="/phpstudy/phptime.png"></p>
<h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timestamp                   时间标记</span><br><span class="line">代表的是该时间点与 Unix 纪元 (1970年1月1日00:00:00) 的时间差</span><br><span class="line">单位为秒</span><br><span class="line"></span><br><span class="line">相关函数</span><br><span class="line">time()                      取得目前 timestamp</span><br><span class="line">strtotime($str)             字符串转 timestamp</span><br><span class="line">date($format, $timestamp)   格式化时间(例date(&#x27;Y-m-d h:i:s&#x27;))</span><br></pre></td></tr></table></figure>

<h3 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间计算</span><br><span class="line">strtotime(&#x27;+ 数量 单位&#x27;)</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">strtotime(&#x27;+ 7 day&#x27;)</span><br><span class="line">strtotime(&#x27;2017-03-02 22:00:00 + 1 week&#x27;)</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/loading.gif" data-original="/phpstudy/phptime-calc.png"></p>
<h2 id="引用其他档案"><a href="#引用其他档案" class="headerlink" title="引用其他档案"></a>引用其他档案</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include($filepath)</span><br><span class="line">include_once($filepath)</span><br><span class="line">require($filepath)</span><br><span class="line">require_once($filepath)</span><br><span class="line"></span><br><span class="line">include 和 require 的差别</span><br><span class="line">include</span><br><span class="line">发生错误时仅显示警告，程序会继续执行。</span><br><span class="line">require</span><br><span class="line">发生错误时会中断程序</span><br><span class="line">once 的差别</span><br><span class="line">档案只会被引入一次，不会被重复引入。</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>下课了，没时间写，我就放脑子里吧……</p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM与DOM</title>
    <url>/jsdomandbom/</url>
    <content><![CDATA[<div class="note info no-icon"><p>BOM与DOM到底是什么</p>
</div>
<span id="more"></span> 

<h2 id="BOM（Browser-Object-Model）"><a href="#BOM（Browser-Object-Model）" class="headerlink" title="BOM（Browser Object Model）"></a>BOM（Browser Object Model）</h2><p>&emsp;&emsp;Browser Object Model（浏览器对象模型）,即把「浏览器」当做一个「对象」来看待。BOM没有相关标准，BOM的最核心对象是window对象。window对象既为javascript访问浏览器提供API，同时在ECMAScript中充当Global对象。BOM和浏览器关系密切，浏览器很多东西可以通过javascript控制，例如打开窗口、打开选项卡、关闭页面、收藏夹等。这些功能与网页内容无关。由于没有标准，不同的浏览器实现同一功能，可以通过不同的实现方式。例如，加入收藏夹这个功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IE浏览器: window.external.AddFavorite(url,title);</span><br><span class="line"></span><br><span class="line">FireFox浏览器: window.sidebar.addPanel(title,url,&quot;&quot;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>虽然没有统一标准，但是各个浏览器的常用功能的js代码大同小异，对于常用的功能已经有默认的标准了。</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/jsdomandbom/bom.png"></p>
<h2 id="DOM（Document-Object-Model）"><a href="#DOM（Document-Object-Model）" class="headerlink" title="DOM（Document Object Model）"></a>DOM（Document Object Model）</h2><p>&emsp;&emsp;Document Object Model（文档对象模型），就是把「文档」当做一个「对象」来看待。DOM是W3C标准，DOM的最根本对象是document（window.document），这个对象实际上是window对象的属性，这个对象的独特之处是这个是唯一一个既属于BOM又属于DOM的对象。DOM和文档有关，这里的文档指的是网页，也就是html文档。DOM和浏览器无关，他关注的是网页本身的内容，由于和浏览器没有多大的关系，所以标准就好定了。</p>
<p><img data-src="/images/loading.gif" data-original="/jsdomandbom/dom.png"></p>
<h2 id="BOM与DOM的联系"><a href="#BOM与DOM的联系" class="headerlink" title="BOM与DOM的联系"></a>BOM与DOM的联系</h2><p><img data-src="/images/loading.gif" data-original="/jsdomandbom/bomanddom.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5MTY2Ng==">参考文章<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>BOM</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript与jQuery其他操作对比</title>
    <url>/jsandjquery/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>JavaScript与jQuery其他元素操作对比</p>
</div>
<span id="more"></span> 

<h2 id="JavaScript与jQuery其他操作对比"><a href="#JavaScript与jQuery其他操作对比" class="headerlink" title="JavaScript与jQuery其他操作对比"></a>JavaScript与jQuery其他操作对比</h2><table>
<thead>
<tr>
<th>功能</th>
<th align="center">JavaScript</th>
<th align="center">jQuery</th>
</tr>
</thead>
<tbody><tr>
<td><strong>创建元素</strong></td>
<td align="center"><code>createElement(&quot;tag-name&quot;)</code></td>
<td align="center"><code>$(&quot;&lt;tag-name&gt;&lt;/tag-name&gt;&quot;)</code></td>
</tr>
<tr>
<td><strong>清空节点hxb</strong></td>
<td align="center"><code>hxb.innerHTML=&quot;&quot;</code></td>
<td align="center"><code>hxb.empty()</code></td>
</tr>
<tr>
<td><strong>删除节点hxb</strong></td>
<td align="center"><code>hxb.parentNode.removeChild(hxb)</code></td>
<td align="center"><code>hxb.remove()</code></td>
</tr>
<tr>
<td><strong>获取HTML</strong></td>
<td align="center"><code>innerHTML</code></td>
<td align="center"><code>html()</code></td>
</tr>
<tr>
<td><strong>获取文本</strong></td>
<td align="center"><code>innerText</code></td>
<td align="center"><code>text()</code></td>
</tr>
<tr>
<td><strong>获取值</strong></td>
<td align="center"><code>value</code></td>
<td align="center"><code>val()</code></td>
</tr>
<tr>
<td><strong>获取属性</strong></td>
<td align="center"><code>getAttribute(&quot;attr-name&quot;)</code></td>
<td align="center"><code>attr(&quot;attr-name&quot;)</code></td>
</tr>
<tr>
<td><strong>设置属性</strong></td>
<td align="center"><code>setAttribute(&quot;attr-name&quot;,&quot;attr-val&quot;)</code></td>
<td align="center"><code>attr(&quot;attr-name&quot;,&quot;attr-val&quot;)</code></td>
</tr>
<tr>
<td><strong>删除属性</strong></td>
<td align="center"><code>removeAttribute(&quot;attr-name&quot;)</code></td>
<td align="center"><code>removeAttr(&quot;attr-name&quot;)</code></td>
</tr>
<tr>
<td><strong>设置css</strong></td>
<td align="center"><code>style.cssAttr</code></td>
<td align="center"><code>css(&quot;css-attr&quot;,&quot;css-val&quot;)</code></td>
</tr>
<tr>
<td><strong>添加class</strong></td>
<td align="center"><code>classList.add(&quot;class-name&quot;)</code></td>
<td align="center"><code>addClass(&quot;class-name&quot;)</code></td>
</tr>
<tr>
<td><strong>删除class</strong></td>
<td align="center"><code>classList.remove(&quot;class-name&quot;)</code></td>
<td align="center"><code>removeClass(&quot;class-name&quot;)</code></td>
</tr>
</tbody></table>
<blockquote>
<p>toggleClass(“class-name”,条件);</p>
</blockquote>
<blockquote>
<p><strong>添加元素操作</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">JavaScript</span></span><br><span class="line"></span><br><span class="line">hxb.<span class="title function_">insertBefore</span>(<span class="title class_">Element</span>,hxb.<span class="property">firstElementChild</span>);  <span class="comment">//在hxb中插入子节点/文本到最开始</span></span><br><span class="line">hxb.<span class="title function_">appendChild</span>(<span class="title class_">Element</span>);                         <span class="comment">//在hxb中插入子节点/文本到最后</span></span><br><span class="line">hxb.<span class="title function_">removeChild</span>(<span class="title class_">Element</span>);                         <span class="comment">//删除hxb中的子节点/文本</span></span><br><span class="line">hxb.<span class="title function_">insertBefore</span>(newElement,targetElement);       <span class="comment">//在hxb中插入newElement到子节点targetElement之前。</span></span><br><span class="line">hxb.<span class="title function_">insertAfter</span>(newElement,targetElement);        <span class="comment">//在hxb中插入newElement到子节点targetElement之后。因为js中没有insertAfter()方法，所以自己写一个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* insertAfter()方法 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertAfter</span>(<span class="params">newElement,targetElement</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> parent = targetElement.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="keyword">if</span>(parent.<span class="property">lastElementChild</span> === targetElement)&#123;</span><br><span class="line">        parent.<span class="title function_">appendChild</span>(newElement);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        parent.<span class="title function_">insertBefore</span>(newElement,targetElement.<span class="property">nextElementSibling</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">append</span>($(<span class="string">&#x27;.appendDom&#x27;</span>));       <span class="comment">//在#id的最后添加.appendDom元素节点</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">prevpend</span>($(<span class="string">&#x27;appendDom&#x27;</span>));      <span class="comment">//在#id的最开始添加.appendDom元素节点</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">after</span>($(<span class="string">&#x27;appendDom&#x27;</span>));         <span class="comment">//在#id节点之前添加.appendDom元素节点</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">before</span>($(<span class="string">&#x27;appendDom&#x27;</span>));        <span class="comment">//在#id节点之后添加.appendDom元素节点</span></span><br><span class="line">$(<span class="string">&#x27;.appendDom&#x27;</span>).<span class="title function_">appendTo</span>(<span class="string">&#x27;#id&#x27;</span>);        <span class="comment">//把.appendDom元素节点插入到#id节点的最后(内部)（和append效果相同）</span></span><br><span class="line">$(<span class="string">&#x27;.appendDom&#x27;</span>).<span class="title function_">prevpendTo</span>(<span class="string">&#x27;#id&#x27;</span>);      <span class="comment">//把.appendDom元素节点插入到#id节点的最开始(内部)（和prevpend效果相同）</span></span><br><span class="line">$(<span class="string">&#x27;.appendDom&#x27;</span>).<span class="title function_">insertAfter</span>(<span class="string">&#x27;#id&#x27;</span>);     <span class="comment">//把.appendDom元素节点插入到#id节点之后(同级)（和after效果相同）</span></span><br><span class="line">$(<span class="string">&#x27;.appendDom&#x27;</span>).<span class="title function_">insertBefore</span>(<span class="string">&#x27;#id&#x27;</span>);    <span class="comment">//把.appendDom元素节点插入到#id节点之前(同级)（和before效果相同）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>jQuery&amp;JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery常见结点操作</title>
    <url>/jquerynode/</url>
    <content><![CDATA[<div class="note default no-icon"><p>jQuery常见结点操作汇总</p>
</div>
<span id="more"></span> 

<h2 id="jQuery获取节点"><a href="#jQuery获取节点" class="headerlink" title="jQuery获取节点"></a>jQuery获取节点</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table>
<thead>
<tr>
<th>功能</th>
<th align="center">操作</th>
<th>注意事项</th>
</tr>
</thead>
<tbody><tr>
<td>获取hxb的<strong>子节点</strong></td>
<td align="center"><code>hxb.children(expr)</code></td>
<td>可以传入expr进行过滤，比如hxb.children()或者hxb.children(“span”)。</td>
</tr>
<tr>
<td>获取hxb的<strong>父节点</strong></td>
<td align="center"><code>hxb.parent(expr)</code></td>
<td>可以传入expr进行过滤，比如hxb.parent()或者hxb.parent(“.class”)。</td>
</tr>
<tr>
<td>—</td>
<td align="center"><strong>注意</strong></td>
<td>获取某个子节点或者父节点使用<code>选择器过滤</code>即可！</td>
</tr>
<tr>
<td>获取hxb的<strong>所有祖先元素</strong></td>
<td align="center"><code>hxb.parents(expr)</code></td>
<td>这是是查找所有祖先元素，不限于父元素。类似于js中的offsetParent。</td>
</tr>
<tr>
<td>获取hxb的<strong>所有内容</strong></td>
<td align="center"><code>hxb.contents();</code></td>
<td>返回元素的所有内容，包括节点和文本。这个方法和children()的区别就在于，包括空白文本，也会被作为一个jQuery对象返回，children()则只会返回节点。</td>
</tr>
<tr>
<td>获取hxb的<strong>下一个兄弟节点</strong></td>
<td align="center"><code>hxb.next()</code></td>
<td>—</td>
</tr>
<tr>
<td>获取hxb的<strong>上一个兄弟节点</strong></td>
<td align="center"><code>hxb.prev()</code></td>
<td>—</td>
</tr>
<tr>
<td>获取hxb<strong>之前的所有兄弟节点</strong></td>
<td align="center"><code>hxb.nextAll()</code></td>
<td>—</td>
</tr>
<tr>
<td>获取hxb<strong>之后的所有兄弟节点</strong></td>
<td align="center"><code>hxb.prevAll()</code></td>
<td>—</td>
</tr>
<tr>
<td>获取hxb的<strong>所有兄弟姐妹节点</strong></td>
<td align="center"><code>hxb.siblings()</code></td>
<td>返回所有兄弟姐妹节点，不分前后。</td>
</tr>
</tbody></table>
<h3 id="都坐下"><a href="#都坐下" class="headerlink" title="都坐下"></a>都坐下</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">parentsUntil</span>(<span class="string">&#x27;.class&#x27;</span>); <span class="comment">//获取 #id 到 .class 之间的#id 的父级节点</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">nextUntil</span>(<span class="string">&#x27;.class&#x27;</span>);    <span class="comment">//获取 #id 之后到 .class 之间的所有节点</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">prevUntil</span>(<span class="string">&#x27;.class&#x27;</span>);    <span class="comment">//获取 #id 之前到 .class 之间的所有节点</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">first</span>();                <span class="comment">//获取第一个div节点</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">last</span>();                 <span class="comment">//获取最后一个div节点</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">eq</span>(index);              <span class="comment">//获取第index+1个div节点，index为索引值从0开始。</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">not</span>(<span class="string">&#x27;.class&#x27;</span>);          <span class="comment">//获取所有类名不为class的div节点</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">filter</span>(<span class="string">&#x27;.class&#x27;</span>);       <span class="comment">//获取所有类名为class的div节点------找自己</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;条件&#x27;</span>);           <span class="comment">//()不能为空，find会一直向子集（子集的子集···）寻找直到满足条件为止。------找儿子孙子孙孙子......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>jQuery.find(expr)</code> 跟 <code>jQuery.filter(expr)</code> 完全不一样。<code>jQuery.filter()</code>是从初始的jQuery对象集合中筛选出一部分，而<code>jQuery.find()</code>的返回结果，不会有初始集合中的内容，比如<code>$(&quot;p&quot;).find(&quot;span&quot;)</code>，是从p元素开始找，等同于<code>$(&quot;p span&quot;)</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript常见结点操作</title>
    <url>/jsnode/</url>
    <content><![CDATA[<div class="note default no-icon"><p>JavaScript常见结点操作汇总</p>
</div>
<span id="more"></span> 
<h2 id="JavaScript获取节点"><a href="#JavaScript获取节点" class="headerlink" title="JavaScript获取节点"></a>JavaScript获取节点</h2><table>
<thead>
<tr>
<th>功能</th>
<th align="center">操作</th>
<th>注意事项</th>
</tr>
</thead>
<tbody><tr>
<td>获取hxb的<strong>全部子节点</strong></td>
<td align="center"><code>hxb.childNodes;</code><br> 或 <code>hxb.children;</code></td>
<td>childNodes和children返回的都是子节点的集合，都是一个数组的格式。但是childNodes会把换行和空格也当成是节点信息。<br> js的childNodes属性是标准的，children属性是非标准的，但为了方便一般会用的是children属性。</td>
</tr>
<tr>
<td>获取hxb的<strong>指定子节点</strong></td>
<td align="center"><code>hxb.childNodes[num];</code><br> 或 <code>hxb.children[num];</code></td>
<td>因为获取结果为数组，所以可以用数组形式访问，区别同上。</td>
</tr>
<tr>
<td>获取hxb<strong>子节点个数</strong></td>
<td align="center"><code>hxb.childElementCount;</code></td>
<td>返回的为子节点个数或者说数组长度</td>
</tr>
<tr>
<td>获取hxb的<strong>全部父节点</strong></td>
<td align="center"><code>hxb.offsetParent;</code></td>
<td>一看offset我们就知道是偏移量，其实这个是与位置有关的上下级，直接能够获取到所有父亲节点，这个对应的值是body下的所有节点信息。</td>
</tr>
<tr>
<td>获取hxb的<strong>父节点</strong></td>
<td align="center"><code>hxb.parentNode;</code><br> 或 <code>hxb.parentElement;</code></td>
<td>parentElement和parentNode一样，只是parentElement是ie的标准。</td>
</tr>
<tr>
<td>获取hxb的<strong>下一个兄弟节点</strong></td>
<td align="center"><code>hxb.nextSibling;</code><br> 或 <code>hxb.nextElementSibling;</code></td>
<td>nextSibling会匹配字符，包括换行和空格，而不是节点。nextElementSibling则直接匹配元素节点。</td>
</tr>
<tr>
<td>获取hxb的<strong>上一个兄弟节点</strong></td>
<td align="center"><code>hxb.previousSibling;</code><br> 或 <code>hxb.previousElementSibling;</code></td>
<td>区别同上</td>
</tr>
<tr>
<td>获取hxb的<strong>第一个子节点</strong></td>
<td align="center"><code>hxb.firstChild;</code><br> 或 <code>hxb.firstElementChild;</code></td>
<td>区别同上</td>
</tr>
<tr>
<td>获取hxb的<strong>最后一个子节点</strong></td>
<td align="center"><code>hxb.lastChild;</code><br> 或 <code>hxb.lastElementChild;</code></td>
<td>区别同上</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的几个demo</title>
    <url>/cssdemo/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>CSS的几个demo……</p>
</div>
<span id="more"></span> 

<h2 id="图片加速旋转特效"><a href="#图片加速旋转特效" class="headerlink" title="图片加速旋转特效"></a>图片加速旋转特效</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">666turn</span>);</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-property</span>: all;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">59s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);</span><br><span class="line">  -moz-<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);       <span class="comment">/* Firefox 4 */</span></span><br><span class="line">  -webkit-<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);    <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">  -o-<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">34</span>,<span class="number">0</span>,.<span class="number">84</span>,<span class="number">1</span>);         <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浮云特效"><a href="#浮云特效" class="headerlink" title="浮云特效"></a>浮云特效</h2><h3 id="html-example"><a href="#html-example" class="headerlink" title="html example"></a>html example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mid-ground&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wall&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;for-eground&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wall&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@-webkit-keyframes</span> STAR-MOVE &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">600%</span> <span class="number">0%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">@keyframes</span> STAR-MOVE &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">600%</span> <span class="number">0%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wall</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#mid-ground</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&#x27;midground.png&#x27;</span>) repeat <span class="number">20%</span> <span class="number">0%</span>;      //图片地址：http://a.biugle.cn/img/midground.png</span><br><span class="line">  z-index:<span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>:STAR-MOVE  <span class="number">90s</span> linear infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>:STAR-MOVE  <span class="number">90s</span> linear infinite;</span><br><span class="line">  -ms-<span class="attribute">animation</span>:STAR-MOVE  <span class="number">90s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>:STAR-MOVE  <span class="number">90s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>:alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#fore-ground</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&#x27;foreground.png&#x27;</span>) repeat <span class="number">35%</span> <span class="number">0%</span>;     //图片地址：http://a.biugle.cn/img/foreground.png</span><br><span class="line">  z-index:<span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>:STAR-MOVE  <span class="number">55s</span> linear infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>:STAR-MOVE  <span class="number">55s</span> linear infinite;</span><br><span class="line">  -ms-<span class="attribute">animation</span>:STAR-MOVE  <span class="number">55s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>:STAR-MOVE  <span class="number">55s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>:alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a>滚动条样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CHROME浏览器中自定义滚动条样式 */</span></span><br><span class="line"><span class="comment">/* 滚动条的宽度 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">1.5vh</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">1.5vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ::-webkit-scrollbar-track-piece滚动条凹槽的颜色，还可以设置边框属性。 */</span></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>:inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#888</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:hover&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: chocolate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 滚动条的设置 */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123; </span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>:inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#2f2f2f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjgwMDQ1MA==">参考文章<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="底部版权信息模板"><a href="#底部版权信息模板" class="headerlink" title="底部版权信息模板"></a>底部版权信息模板</h2><h3 id="html-example-1"><a href="#html-example-1" class="headerlink" title="html example"></a>html example</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-bottom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;emsp;</span>湘ICP备19012697号<span class="symbol">&amp;emsp;</span>Copyright<span class="symbol">&amp;copy;</span>2018<span class="symbol">&amp;emsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://biugle.cn&quot;</span>&gt;</span>DoubleAm<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;emsp;</span>www.biugle.cn<span class="symbol">&amp;emsp;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.footer-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">10</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">5vh</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1vh</span>;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">1vh</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>:<span class="number">0.1vh</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-bottom</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-bottom</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: chocolate <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置鼠标样式"><a href="#设置鼠标样式" class="headerlink" title="设置鼠标样式"></a>设置鼠标样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">image-url</span>),type;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习</title>
    <url>/jsstudy/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>JavaScript基础知识备份</p>
</div>
<span id="more"></span> 

<p><img data-src="/images/loading.gif" data-original="/jsstudy/geng.jpg" alt="奇怪的 JS"></p>
<h2 id="JavaScript引入方式与放置位置区别"><a href="#JavaScript引入方式与放置位置区别" class="headerlink" title="JavaScript引入方式与放置位置区别"></a>JavaScript引入方式与放置位置区别</h2><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//do something</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外联式"><a href="#外联式" class="headerlink" title="外联式"></a>外联式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：除非特殊情况需要先执行js，一般我们都将js放在body中且在<code>&lt;/body&gt;</code>标签之前，因为页面装载需要等待js的下载与执行，这样操作可以在页面装载完成之后，再去下载和执行js，既不会影响页面的正常加载，又可以提高效率！</p>
</blockquote>
<h2 id="开发测试常用"><a href="#开发测试常用" class="headerlink" title="开发测试常用"></a>开发测试常用</h2><h3 id="弹出框，可以打断后续代码执行"><a href="#弹出框，可以打断后续代码执行" class="headerlink" title="弹出框，可以打断后续代码执行"></a>弹出框，可以打断后续代码执行</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(message);                     <span class="comment">//提示框</span></span><br><span class="line"><span class="title function_">confirm</span>(message);                   <span class="comment">//确认框</span></span><br><span class="line"><span class="title function_">prompt</span>(message,defaultValue);       <span class="comment">//输入框</span></span><br></pre></td></tr></table></figure>

<h3 id="控制台打印"><a href="#控制台打印" class="headerlink" title="控制台打印"></a>控制台打印</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br></pre></td></tr></table></figure>

<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>,delay);    <span class="comment">//循环执行，执行无限多次。（每多少毫秒执行一次）</span></span><br><span class="line"><span class="built_in">clearInterval</span>(intervalID);      <span class="comment">//清除循环计时器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>,delay);     <span class="comment">//延迟执行，仅执行一次。（多少毫秒后执行一次）</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timeoutID);        <span class="comment">//清除延迟执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><tbody><tr><th><b>优先级</b></th><th><b>运算符</b></th><th><b>说明</b></th><th><b>结合性</b></th></tr><tr><td>1</td><td><code>[]</code>、<code>.</code>、<code>()</code></td><td>字段访问、数组索引、函数调用和表达式分组</td><td>从左向右</td></tr><tr><td>2</td><td>++ -- ! new typeof void</td><td>一元运算符、返回数据类型、对象创建、未定<br>义的值</td><td>从右向左</td></tr><tr><td>3</td><td>*、/、%</td><td>相乘、相除、求余数</td><td>从左向右</td></tr><tr><td>4</td><td>+、-</td><td>相加、相减、字符串串联</td><td>从左向右</td></tr><tr><td>5</td><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td><td>左位移、右位移、无符号右移</td><td>从左向右</td></tr><tr><td>6</td><td>&lt;、&lt;=、&gt;、&gt;=、instanceof</td><td>小于、小于或等于、大于、大于或等于、是否<br>为特定类的实例</td><td>从左向右</td></tr><tr><td>7</td><td>==、!=、===、!==</td><td>相等、不相等、全等，不全等</td><td>从左向右</td></tr><tr><td>8</td><td>&amp;</td><td>按位“与”</td><td>从左向右</td></tr><tr><td>9</td><td>^</td><td>按位“异或”</td><td>从左向右</td></tr><tr><td>10</td><td>|</td><td>按位“或”</td><td>从左向右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>短路与（逻辑“与”）</td><td>从左向右</td></tr><tr><td>12</td><td>||</td><td>短路或（逻辑“或”）</td><td>从左向右</td></tr><tr><td>13</td><td>?:</td><td>条件运算符</td><td>从右向左</td></tr><tr><td>14</td><td><code>=、+=、-=、✲=、/=、%=、</code>&amp;=、|=、^=、&lt;、&lt;=、&gt;、&gt;=、&gt;&gt;=</td><td>混合赋值运算符</td><td>从右向左</td></tr><tr><td>15</td><td>,</td><td>多个计算</td><td>按优先级计算，然后从右向左。</td></tr></tbody></table>


<h2 id="常用运算汇总表"><a href="#常用运算汇总表" class="headerlink" title="常用运算汇总表"></a>常用运算汇总表</h2><p><img data-src="/images/loading.gif" data-original="/jsstudy/yunsuan1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/yunsuan2.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/yunsuan3.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/yunsuan4.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/yunsuan5.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/yunsuan6.png"></p>
<h2 id="常用事件汇总表"><a href="#常用事件汇总表" class="headerlink" title="常用事件汇总表"></a>常用事件汇总表</h2><p><img data-src="/images/loading.gif" data-original="/jsstudy/shijian1.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/shijian2.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/shijian3.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/shijian4.png"></p>
<p><img data-src="/images/loading.gif" data-original="/jsstudy/shijian5.png"></p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>flex-grow与flex-shrink的计算</title>
    <url>/flex_calc/</url>
    <content><![CDATA[<div class="note default no-icon"><p>介绍 <code>flex-grow</code> 与 <code>flex-shrink</code> 的比例如何计算。</p>
</div>
<span id="more"></span> 

<h2 id="先放几张之前的图"><a href="#先放几张之前的图" class="headerlink" title="先放几张之前的图"></a>先放几张之前的图</h2><p><img data-src="/images/loading.gif" data-original="/flex_calc/flex-grow.PNG"></p>
<p><img data-src="/images/loading.gif" data-original="/flex_calc/flex-shrink.png"></p>
<p><img data-src="/images/loading.gif" data-original="/flex_calc/flex-1.PNG"></p>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>&emsp;&emsp;当剩余空间为 x，三个元素的 flex-grow 分别为 a，b，c。设 sum 为 <code>a + b + c</code>。那么三个元素将得到剩余空间分别是 <code>x * (a / sum)</code>, <code>x * (b / sum)</code>, <code>x * (c / sum)</code>，这是他们各自的权重。</p>
<blockquote>
<p>举个栗子：</p>
</blockquote>
<p>父元素宽度 <code>500px</code>，三个子元素的 width 分别为 <code>100px</code>，<code>150px</code>，<code>100px</code>。</p>
<p>于是剩余空间为 <code>150px</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">三个元素的 flex-grow 分别是 1，2，3，于是 sum 为 6</span><br><span class="line">则三个元素所得到的多余空间分别是：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">150 * (1 / 6) = 25px</span><br><span class="line">150 * (2 / 6) = 50px</span><br><span class="line">150 * (3 / 6) = 75px</span><br><span class="line"></span><br><span class="line">三个元素最终的宽度分别为 125px，200px，175px。</span><br><span class="line"></span><br><span class="line">100px + 25px = 125px</span><br><span class="line">150px + 50px = 200px</span><br><span class="line">100px + 75px = 175px</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;还有一种情况，当所有元素的 flex-grow 之和小于 1 的时候（注意是 1，也就是说每个元素的 flex-grow 都是一个小数。），上面式子中的 sum 将会使用 1 来参与计算，而不论它们的和是多少。<br>&emsp;&emsp;也就是说，当所有的元素的 flex-grow 之和小于 1 的时候，剩余空间不会全部分配给各个元素。实际上用来分配的空间是 <code>(flex-grow / 1) * 剩余空间</code>，这些用来分配的空间依然是按 flex-grow 的比例来分配。</p>
<blockquote>
<p>举个栗子：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">三个元素的 flex-grow 分别是 0.1，0.2，0.3。</span><br><span class="line">则三个元素所得到的多余空间分别是：</span><br><span class="line"></span><br><span class="line">150 * (0.1 / 1) = 15px</span><br><span class="line">150 * (0.2 / 1) = 30px</span><br><span class="line">150 * (0.3 / 1) = 45px</span><br><span class="line"></span><br><span class="line">150px - 15px - 30px - 45px = 60px，即还有 60px 没有分配给任何子元素。</span><br><span class="line"></span><br><span class="line">三个元素的最终宽度分别为：</span><br><span class="line"></span><br><span class="line">100px + 15px = 115px</span><br><span class="line">150px + 30px = 180px</span><br><span class="line">100px + 45px = 145px</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;另外，flex-grow 还会受到 max-width 的影响。如果最终 grow 后的结果大于 max-width 指定的值，max-width 的值将会优先使用。同样会导致父元素有部分剩余空间没有分配。</p>
<p>&emsp;&emsp;<strong>以上就是 <code>flex-grow</code> 的计算方式。</strong></p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>&emsp;&emsp;n既然可以在空间有多余时把多余空间分配给各个子元素，当然也可以在空间不够时让各个子元素收缩以适应有限的空间了，这就是 flex-shrink 属性的作用。你可能会觉得 flex-shrink 的计算方式跟 flex-grow 很类似，然而事情并没有这么简单。</p>
<p>&emsp;&emsp;flex-shrink 属性定义空间不够时各个元素如何收缩。其值默认为 1。很多文章对此基本是一笔带过：“flex-shrink 属性定义了元素的收缩系数”，根本就不说它具体是怎么计算的。flex-shrink 定义的仅仅只是元素宽度变小的一个权重分量。</p>
<p>&emsp;&emsp;每个元素具体收缩多少，还有另一个重要因素，即它本身的宽度。</p>
<p>举个栗子：</p>
<p>父元素 <code>500px</code>。三个子元素分别设置为 150px，200px，300px。</p>
<p>三个子元素的 flex-shrink 的值分别为 1，2，3。</p>
<p>首先，计算子元素溢出多少：<code>150 + 200 + 300 - 500 = -150px</code>。</p>
<p>那这 <code>-150px</code> 将由三个元素的分别收缩一定的量来弥补。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">具体的计算方式为：每个元素收缩的权重为其 flex-shrink 乘以其宽度。</span><br><span class="line"></span><br><span class="line">所以总权重为 1 * 150 + 2 * 200 + 3 * 300 = 1450</span><br><span class="line"></span><br><span class="line">三个元素分别收缩：</span><br><span class="line"></span><br><span class="line">[150 * (1(flex-shrink) * 150(width))] / 1450 = -15.5</span><br><span class="line">[150 * (2(flex-shrink) * 200(width))] / 1450 = -41.4</span><br><span class="line">[150 * (3(flex-shrink) * 300(width))] / 1450 = -93.1</span><br><span class="line"></span><br><span class="line">其中150为溢出空间</span><br><span class="line"></span><br><span class="line">三个元素的最终宽度分别为：</span><br><span class="line"></span><br><span class="line">150 - 15.5 = 134.5</span><br><span class="line">200 - 41.4 = 158.6</span><br><span class="line">300 - 93.1 = 206.9</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;同样，当所有元素的 flex-shrink 之和小于 1 时，计算方式也会有所不同，此时，并不会收缩所有的空间，而只会收缩 flex-shrink 之和相对于 1 的比例的空间。</p>
<p>举个栗子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">还是上面的例子，但是 flex-shrink 分别改为 0.1，0.2，0.3。</span><br><span class="line"></span><br><span class="line">于是总权重为 145（正好缩小 10 倍，略去计算公式。）。</span><br><span class="line"></span><br><span class="line">三个元素收缩总和并不是 150px，而是只会收缩 150px 的 [(0.1 + 0.2 + 0.3) / 1] 即 60% 的空间：90px。</span><br><span class="line"></span><br><span class="line">每个元素收缩的空间为：</span><br><span class="line"></span><br><span class="line">90 * 0.1(flex-shrink) * 150(width) / 145 = 9.31</span><br><span class="line">90 * 0.2(flex-shrink) * 200(width) / 145 = 24.83</span><br><span class="line">90 * 0.3(flex-shrink) * 300(width) / 145 = 55.86</span><br><span class="line"></span><br><span class="line">三个元素的最终宽度分别为：</span><br><span class="line"></span><br><span class="line">150 - 9.31 = 140.69</span><br><span class="line">200 - 24.83 = 175.17</span><br><span class="line">300 - 55.86 = 244.14</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;当然，类似 flex-grow，flex-shrink 也会受到 min-width 的影响。</p>
<p>&emsp;&emsp;<strong>以上就是 <code>flex-grow</code> 的计算方式。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;虽然上面的公式看起来很复杂，其实计算过程还是比较简单的：如果所有元素的 flex-grow/shrink 之和大于等于 1，则所有子元素的尺寸一定会被调整到适应父元素的尺寸（在不考虑 max/min-width/height 的前提下），而如果 flex-grow/shrink 之和小于 1，则只会 grow 或 shrink 所有元素 flex-grow/shrink 之和相对于 1 的比例。grow 时的每个元素的权重即为元素的 flex-grow 的值；shrink 时每个元素的权重则为元素 flex-shrink 乘以 width 后的值。</p>
<blockquote>
<p>转改自<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDM3MjI3OQ==">知乎<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<blockquote>
<p>详细属性介绍<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMzI0ODc5L2FydGljbGUvZGV0YWlscy8xMDI1Mjg3OTc=">CSDN-FlexAttribute<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>FlexBox</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Flexbox 弹性盒子</title>
    <url>/cssflex/</url>
    <content><![CDATA[<div class="note default no-icon"><p>CSS Flexbox 超详细图解！带图！速收藏！</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p>前几天，我在一个外网上看到一篇 Flexbox 的文章，图文并茂，特别不错。所以，特地转了几张图片分享给大家！(本文未对 FlexBox 的相关属性进行解释，仅适用于有一定基础的朋友阅读。)</p>

</blockquote> 

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;2009年，W3C提出了一种新的方案，叫Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。连 Bootstrap4 都是基于 FlexBox 来设计的。<br>&emsp;&emsp;FlexBox 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局(<code>display: flex;</code>)。</p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/flex-normal.PNG"></p>
<h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p><strong>元素的排列方向</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/flex-direction.PNG"></p>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p><strong>决定是否换行</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/flex-wrap.PNG"></p>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p><strong>元素在主轴上的对齐方式</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/justify-content.PNG"></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/justify-content-v.png"></p>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p><strong>元素在交叉轴上如何对齐</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/align-items.PNG"></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/align-items-v.png"></p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p><strong>行与行的对齐方式</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/align-content.PNG"></p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p><strong>元素自身在交叉轴的对齐方式</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/align-self.PNG"></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/align-self-v.PNG"></p>
<blockquote>
<p>另外补充一下，<code>justify-self</code>是无效的。假如我们想让主轴上某个元素居左或者居右，可以通过 <code>margin-left/right: auto;</code> 来实现。</p>
</blockquote>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><strong>元素的排列顺序，数字越小越靠前，默认为0。</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/order.PNG"></p>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><blockquote>
<p>flex-basis(默认值:auto)属性定义了在分配多余空间之前，项目占据的主轴空间。</p>
</blockquote>
<p>  &emsp;&emsp;<code>flex-basis</code>是主轴方向上的长度，而且会根据父元素大小<code>自动适配</code>，即若<code>子元素 flex-basis &gt; 父元素主轴上长度</code>，那么子元素的长度会等于父元素，并<strong>不会溢出</strong>。若<code>所有子元素的 flex-basis 之和 &gt; 父元素主轴上长度</code>，那么子元素会按 <strong>flex-basis 进行比例计算</strong>，并按比例占满父元素。</p>
<ul>
<li>flex-direction: row; =&gt; flex-basis ≈ width </li>
<li>flex-direction: column; =&gt; flex-basis ≈ height </li>
<li>同时设置 flex-basis 与 width/height 时，flex-basis &gt; width。</li>
<li>若 flex-basis 和 width/height 其中有一个是 auto，那么另外一个非 auto 的属性优先级会更高。</li>
<li>若 flex-basis 设置为 0, 则子元素内容周围的剩余空间不会根据 flex-grow 按比例分配。</li>
<li>若 flex-basis 设置为 auto，则子元素周围的剩余空间会根据 flex-grow 按照比例分配。</li>
</ul>
<h2 id="flex-grow-amp-flex-shrink"><a href="#flex-grow-amp-flex-shrink" class="headerlink" title="flex-grow&amp;flex-shrink"></a>flex-grow&amp;flex-shrink</h2><p><strong>flex-grow是定义元素的<code>放大比例</code>，默认为0，即如果存在<code>剩余空间</code>，也不放大。</strong><br><strong>flex-shrink是定义元素的<code>缩小比例</code>，默认为1，即如果<code>空间不足</code>，该项目将缩小。</strong></p>
<blockquote>
<p>关于比例的计算，后续会更新相关介绍！</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/cssflex/flex-grow.PNG"></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/flex-shrink.png"></p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p><strong>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</strong></p>
<p><img data-src="/images/loading.gif" data-original="/cssflex/flex-1.PNG"></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><blockquote class="blockquote-center">
<p>提供相关测试代码，可自行理解测试！</p>

</blockquote> 

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex-test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bigdiv</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#e2cafd</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*display: flex;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-direction: column;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*justify-content: center;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*align-items: center;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*align-content: flex-end;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-wrap: wrap;*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span>,<span class="selector-class">.box2</span>,<span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#ffa378</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-grow: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-shrink: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-basis: auto;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*order: 1;*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-grow: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-shrink: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-basis: auto;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*order: 1;*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-grow: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-shrink: 1;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*flex-basis: auto;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*order: 1;*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigdiv&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        HXB</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">        HXB</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">        HXB</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>FlexBox</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶知识</title>
    <url>/cssmore/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>CSS进阶知识补充</p>
</div>
<span id="more"></span> 

<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>background:bg-color bg-image bg-repeat bg-attachment bg-position/bg-size;</code></p>
<blockquote>
<p>eg: <code>background: red url(&#39;./background.png&#39;) no-repeat fixed center/cover;</code></p>
</blockquote>
<table><tbody><tr><th>值</th><th>说明</th><th>CSS</th></tr><tr><td><i>background-color</i></td><td>指定要使用的背景颜色</td><td>1</td></tr><tr><td><i>background-position</i></td><td>指定背景图像的位置</td><td>1</td></tr><tr><td><i>background-size</i></td><td>指定背景图片的大小</td><td>3</td></tr><tr><td><i>background-repeat</i></td><td>指定如何重复背景图像</td><td>1</td></tr><tr><td><i>background-origin</i></td><td>指定背景图像的定位区域</td><td>3</td></tr><tr><td><i>background-clip</i></td><td>指定背景图像的绘画区域</td><td>3</td></tr><tr><td><i>background-attachment</i></td><td>设置背景图像是否固定或者随着页面的其余部分滚动。</td><td>1</td></tr><tr><td><i>background-image</i></td><td>指定要使用的一个或多个背景图像</td><td>1</td></tr></tbody></table>

<h2 id="opacity、visibility、display"><a href="#opacity、visibility、display" class="headerlink" title="opacity、visibility、display"></a>opacity、visibility、display</h2><table>
<thead>
<tr>
<th align="center"><strong>介绍</strong></th>
<th><strong>opacity</strong></th>
<th><strong>visibility</strong></th>
<th><strong>display</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>作用</code></td>
<td>设置透明度</td>
<td>设置元素是否可见</td>
<td>设置元素的显示类型</td>
</tr>
<tr>
<td align="center"><code>是否占据页面空间</code></td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td align="center"><code>是否影响子元素</code></td>
<td>是</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td align="center"><code>是否可触发绑定事件</code></td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td align="center"><code>是否产生回流（reflow）</code></td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td align="center"><code>是否产生重绘（repaint）</code></td>
<td>不一定</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td align="center"><code>是否支持transition</code></td>
<td>是</td>
<td>是</td>
<td>否（还会让transition失效）</td>
</tr>
</tbody></table>
<blockquote>
<p>注意:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visibility 和 display 属性是不会影响其他元素触发事件的，而 opacity 属性 如果遮挡住其他元素，其他的元素就不会触发事件了。 </span><br><span class="line"></span><br><span class="line">回流：当页面中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(也有人会把回流叫做是重布局或者重排)。每个页面至少需要一次回流，就是在页面第一次加载的时候。</span><br><span class="line"></span><br><span class="line">重绘：当页面中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的时候，比如background-color。则称为重绘。</span><br><span class="line"></span><br><span class="line">回流必将引起重绘，而重绘不一定会引起回流。</span><br></pre></td></tr></table></figure>

<h2 id="css可继承与不可继承的属性"><a href="#css可继承与不可继承的属性" class="headerlink" title="css可继承与不可继承的属性"></a>css可继承与不可继承的属性</h2><h3 id="无继承性的属性"><a href="#无继承性的属性" class="headerlink" title="无继承性的属性"></a>无继承性的属性</h3><ol>
<li><p>display：规定元素的显示类型</p>
</li>
<li><p>文本属性：</p>
</li>
</ol>
<ul>
<li><p>vertical-align：垂直文本对齐</p>
</li>
<li><p>text-decoration：规定添加到文本的装饰</p>
</li>
<li><p>text-shadow：文本阴影效果</p>
</li>
<li><p>white-space：空白符的处理</p>
</li>
<li><p>unicode-bidi：设置文本的方向</p>
</li>
</ul>
<ol start="3">
<li><p>盒子模型的属性：width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left</p>
</li>
<li><p>背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment</p>
</li>
<li><p>定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</p>
</li>
<li><p>生成内容属性：content、counter-reset、counter-increment</p>
</li>
<li><p>轮廓样式属性：outline-style、outline-width、outline-color、outline</p>
</li>
<li><p>页面样式属性：size、page-break-before、page-break-after</p>
</li>
<li><p>声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</p>
</li>
</ol>
<h3 id="有继承性的属性"><a href="#有继承性的属性" class="headerlink" title="有继承性的属性"></a>有继承性的属性</h3><ol>
<li>字体系列属性</li>
</ol>
<ul>
<li><p>font：组合字体</p>
</li>
<li><p>font-family：规定元素的字体系列</p>
</li>
<li><p>font-weight：设置字体的粗细</p>
</li>
<li><p>font-size：设置字体的尺寸</p>
</li>
<li><p>font-style：定义字体的风格</p>
</li>
<li><p>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</p>
</li>
<li><p>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</p>
</li>
<li><p>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</p>
</li>
</ul>
<ol start="2">
<li>文本系列属性</li>
</ol>
<ul>
<li><p>text-indent：文本缩进</p>
</li>
<li><p>text-align：文本水平对齐</p>
</li>
<li><p>line-height：行高</p>
</li>
<li><p>word-spacing：增加或减少单词间的空白（即字间隔）</p>
</li>
<li><p>letter-spacing：增加或减少字符间的空白（字符间距）</p>
</li>
<li><p>text-transform：控制文本大小写</p>
</li>
<li><p>direction：规定文本的书写方向</p>
</li>
<li><p>color：文本颜色</p>
</li>
</ul>
<ol start="3">
<li><p>元素可见性：visibility</p>
</li>
<li><p>表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout</p>
</li>
<li><p>列表布局属性：list-style-type、list-style-image、list-style-position、list-style</p>
</li>
<li><p>生成内容属性：quotes</p>
</li>
<li><p>光标属性：cursor</p>
</li>
<li><p>页面样式属性：page、page-break-inside、windows、orphans</p>
</li>
<li><p>声音样式属性：speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、pitch、pitch-range、stress、richness、、azimuth、elevation</p>
</li>
</ol>
<h3 id="所有元素可以继承的属性"><a href="#所有元素可以继承的属性" class="headerlink" title="所有元素可以继承的属性"></a>所有元素可以继承的属性</h3><ol>
<li><p>元素可见性：visibility</p>
</li>
<li><p>光标属性：cursor</p>
</li>
</ol>
<h3 id="内联元素可以继承的属性"><a href="#内联元素可以继承的属性" class="headerlink" title="内联元素可以继承的属性"></a>内联元素可以继承的属性</h3><ol>
<li><p>字体系列属性</p>
</li>
<li><p>除text-indent、text-align之外的文本系列属性</p>
</li>
</ol>
<h3 id="块级元素可以继承的属性"><a href="#块级元素可以继承的属性" class="headerlink" title="块级元素可以继承的属性"></a>块级元素可以继承的属性</h3><ol>
<li>text-indent、text-align</li>
</ol>
<h2 id="浏览器默认属性值问题"><a href="#浏览器默认属性值问题" class="headerlink" title="浏览器默认属性值问题"></a>浏览器默认属性值问题</h2><p>&emsp;&emsp;由于各浏览器对于HTML标签都存在预设值，所以为了让我们设计的页面在不同的浏览器上显示效果相同，就需要用<code>resetcss</code>。</p>
<p>&emsp;&emsp;世界知名的 CSS 大师「Eric A. Meyer」整理出一个很棒的解决方法，针对 CSS 语法最容易出问题的部份。例如 margin 外间距，各大浏览器最常发生不一致的状况，写成了一个 Reset CSS 档案，将 margin  全部统一归 0 ，其他部份，文字大小和行高也全部统成一样的大小 … 等，只要挂上这一段「Reset CSS」语法，就可以让所有的各大浏览器乖乖听话，呈现一样的结果，CSS 的大同世界就在这里啊，哈哈哈哈哈！</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* http://meyerweb.com/eric/tools/css/reset/ </span></span><br><span class="line"><span class="comment">   v2.0 | 20110126</span></span><br><span class="line"><span class="comment">   License: none (public domain)</span></span><br><span class="line"><span class="comment">   doubleam get 20191126</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, embed, </span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, output, ruby, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, </span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">  <span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一些简单样式汇总"><a href="#一些简单样式汇总" class="headerlink" title="一些简单样式汇总"></a>一些简单样式汇总</h2><h3 id="cursor样式"><a href="#cursor样式" class="headerlink" title="cursor样式"></a>cursor样式</h3><p><img data-src="/images/loading.gif" data-original="/cssmore/cursor.png"></p>
<h3 id="list-style-type样式"><a href="#list-style-type样式" class="headerlink" title="list-style-type样式"></a>list-style-type样式</h3><p><img data-src="/images/loading.gif" data-original="/cssmore/list.png"></p>
<h3 id="border样式"><a href="#border样式" class="headerlink" title="border样式"></a>border样式</h3><p><img data-src="/images/loading.gif" data-original="/cssmore/border-style.png"></p>
<h2 id="checkbox与radio与文字水平对齐"><a href="#checkbox与radio与文字水平对齐" class="headerlink" title="checkbox与radio与文字水平对齐"></a>checkbox与radio与文字水平对齐</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 其实很简单，只需要给对齐的元素都添加vertical-align:middle;属性即可。 */</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">label</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;checkbox&quot; value=&quot;<span class="selector-tag">A</span>&quot; style=&quot;<span class="attribute">vertical-align</span>:middle;&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">span</span> style=&quot;<span class="attribute">vertical-align</span>:middle;&quot;&gt;<span class="selector-tag">B</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">label</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="图片等比例缩放、翻转等"><a href="#图片等比例缩放、翻转等" class="headerlink" title="图片等比例缩放、翻转等"></a>图片等比例缩放、翻转等</h2><h3 id="图片等比例缩放"><a href="#图片等比例缩放" class="headerlink" title="图片等比例缩放"></a>图片等比例缩放</h3><h4 id="在img标签里面只设置宽，不设置高，图片就会等比例缩放。"><a href="#在img标签里面只设置宽，不设置高，图片就会等比例缩放。" class="headerlink" title="在img标签里面只设置宽，不设置高，图片就会等比例缩放。"></a>在img标签里面只设置宽，不设置高，图片就会等比例缩放。</h4><h4 id="也可以使用css属性调整图片显示位置，或者使用background来调整亦可。"><a href="#也可以使用css属性调整图片显示位置，或者使用background来调整亦可。" class="headerlink" title="也可以使用css属性调整图片显示位置，或者使用background来调整亦可。"></a>也可以使用css属性调整图片显示位置，或者使用<code>background</code>来调整亦可。</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">object-fit</span>: cover;</span><br><span class="line"><span class="attribute">object-position</span>: center;</span><br></pre></td></tr></table></figure>

<h4 id="使用-padding-解决"><a href="#使用-padding-解决" class="headerlink" title="使用 padding 解决"></a>使用 padding 解决</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">如果原始图片大小是 800 * 250，即宽高比为 800 / 250 = 3.2。</span><br><span class="line">我们可以给图片的父元素设置 padding 来保持图片本身的宽高比。</span><br><span class="line">当 img 的宽度为 100% 时，那么父元素的 padding-bottom/top(任意一个均可) 的值为 100%(图片想要设置的宽度) / 3.2(图片的原始宽高比) = 31.25%。</span><br><span class="line">如果你想把 img 的宽度设为 50% 的话，那么 padding-bottom/top 的值为 50% / 3.2 = 15.625%。</span><br><span class="line">这样设置后，无论页面如何变动，图片的比例都不会出问题。</span><br></pre></td></tr></table></figure>

<h3 id="图片翻转"><a href="#图片翻转" class="headerlink" title="图片翻转"></a>图片翻转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*水平翻转*/</span></span><br><span class="line"><span class="selector-class">.flipx</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>:<span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform</span>:<span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>:<span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*IE*/</span></span><br><span class="line">    <span class="attribute">filter</span>:FlipH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*垂直翻转*/</span></span><br><span class="line"><span class="selector-class">.flipy</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>:<span class="built_in">scaleY</span>(-<span class="number">1</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform</span>:<span class="built_in">scaleY</span>(-<span class="number">1</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>:<span class="built_in">scaleY</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*IE*/</span></span><br><span class="line">    <span class="attribute">filter</span>:FlipV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*水平翻转*/</span></span><br><span class="line"><span class="selector-class">.flipx</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*垂直翻转*/</span></span><br><span class="line"><span class="selector-class">.flipy</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>); &#125;</span><br></pre></td></tr></table></figure>

<h2 id="水平居中的方式"><a href="#水平居中的方式" class="headerlink" title="水平居中的方式"></a>水平居中的方式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>:center;          //文本水平居中</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自身 */</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto;              //块级元素水平居中</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;               //使用<span class="attribute">flex</span></span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;               //使用<span class="attribute">flex</span></span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>:column;</span><br><span class="line">  <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;               //使用<span class="attribute">flex</span></span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>:column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-center</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">父元素相对定位 子元素绝对定位 然后设置 <span class="attribute">left</span>:<span class="number">50%</span>; <span class="attribute">margin-left</span>:子元素宽度的一半;（已知宽高）</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自身 */</span></span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自身 */</span></span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="垂直居中的方式"><a href="#垂直居中的方式" class="headerlink" title="垂直居中的方式"></a>垂直居中的方式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">paddingtop=paddingbottom; or <span class="attribute">line-height</span>=<span class="attribute">height</span>;    //文本垂直居中</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;                                       //使用<span class="attribute">flex</span></span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;                                       //使用<span class="attribute">flex</span></span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>:column;</span><br><span class="line">  <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;                                       //使用<span class="attribute">flex</span></span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>:row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-center</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">父元素相对定位 子元素绝对定位 然后设置 <span class="attribute">top</span>:<span class="number">50%</span>; <span class="attribute">margin-top</span>:子元素高度的一半;（已知宽高）</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自身 */</span></span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自身 */</span></span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 也可用于多行文本垂直居中 */</span></span><br></pre></td></tr></table></figure>

<h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!-- 方法<span class="number">1</span>：绝对定位+<span class="attribute">margin</span>:auto; --&gt;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法<span class="number">2</span>：绝对定位+负<span class="attribute">margin</span>（已知宽高） --&gt;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">100px</span>;              //自身的宽度一半</span><br><span class="line">  <span class="attribute">margin-top</span>:-<span class="number">100px</span>;               //自身高度的一半</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法<span class="number">3</span>：绝对定位+<span class="attribute">transform</span> --&gt;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;                        //定位父级的<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>); //自己的<span class="number">50%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法<span class="number">4</span>：<span class="attribute">flex</span>布局 --&gt;</span><br><span class="line"><span class="comment">/* 父元素只要三句话就可以实现不定宽高水平垂直居中。 */</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  //<span class="attribute">flex-direction</span>:row;元素水平排列，垂直排列为column。row为默认值所以可以不写。</span><br><span class="line">  <span class="attribute">justify-content</span>:center;         //子元素水平居中</span><br><span class="line">  <span class="attribute">align-items</span>:center;             //子元素垂直居中</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法<span class="number">5</span>：<span class="selector-tag">table</span>-cell实现居中 --&gt;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;                  //子元素<span class="attribute">margin</span>:auto;或者<span class="attribute">margin</span>:<span class="number">0</span> auto;均可</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 也可用于多行文本垂直居中，直接编写文本即可。 */</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS单行、多行文本溢出-换行"><a href="#CSS单行、多行文本溢出-换行" class="headerlink" title="CSS单行、多行文本溢出/换行"></a>CSS单行、多行文本溢出/换行</h2><h3 id="单行溢出"><a href="#单行溢出" class="headerlink" title="单行溢出"></a>单行溢出</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-truncate</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多行溢出"><a href="#多行溢出" class="headerlink" title="多行溢出"></a>多行溢出</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-truncate-multiple</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span> : hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">3</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 只适用于 webkit 内核浏览器，其他浏览器也借助伪类、绝对定位或js来实现此效果。 */</span></span><br></pre></td></tr></table></figure>

<h3 id="完美换行"><a href="#完美换行" class="headerlink" title="完美换行"></a>完美换行</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">  <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 腾讯 Alloyteam 推荐 */</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS-Overflow"><a href="#CSS-Overflow" class="headerlink" title="CSS Overflow"></a>CSS Overflow</h2><blockquote>
<p>overflow: auto|visible|hidden|scroll|inherit;</p>
</blockquote>
<ul>
<li>auto 自动产生滚动条，哪个方向超出了就出现滚动条。</li>
<li>visible 不显示滚动条，但是超出部分会显示。</li>
<li>hidden 不显示滚动条，超出部分不会显示。</li>
<li>scroll 显示滚动条，就算某个方向没超出也会显示。</li>
<li>inherit 继承父元素的设置</li>
</ul>
<h2 id="CSS动画基本语法"><a href="#CSS动画基本语法" class="headerlink" title="CSS动画基本语法"></a>CSS动画基本语法</h2><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x, y);      //偏移</span><br><span class="line"><span class="attribute">x</span>: X 轴偏移量，可为百分比。</span><br><span class="line">y: Y 轴偏移量，可为百分比。</span><br><span class="line"></span><br><span class="line">transform: <span class="built_in">rotate</span>(ndeg);         //旋转</span><br><span class="line">预设以元素中心为旋转中心点</span><br><span class="line">正数值为顺时钟旋转</span><br><span class="line">负数值为逆时钟旋转</span><br><span class="line">需加 deg 单位</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform-origin</span>: x y;           //旋转中心点</span><br><span class="line"><span class="attribute">x</span>: X 轴偏移量，可为百分比、left、center、right。</span><br><span class="line">y: Y 轴偏移量，可为百分比、top、center、bottom。</span><br><span class="line"></span><br><span class="line">transform: <span class="built_in">scale</span>(w-rate, h-rate);//缩放</span><br><span class="line">w-rate: 宽度缩放倍率</span><br><span class="line">h-rate: 高度缩放倍率</span><br><span class="line"></span><br><span class="line">transform: <span class="built_in">skew</span>(xdeg, ydeg);     //扭转</span><br><span class="line"><span class="attribute">x</span>: 沿着 x 轴扭转</span><br><span class="line">y: 沿着 y 轴扭转</span><br><span class="line">需加 deg 单位</span><br><span class="line">transform: <span class="built_in">skewX</span>(xdeg);          //沿着 <span class="attribute">x</span> 轴扭转</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewY</span>(ydeg);          //沿着 <span class="attribute">y</span> 轴扭转</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(x);        //<span class="attribute">x</span> 轴偏移</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(y);        //<span class="attribute">y</span> 轴偏移</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(z);        //z 轴偏移</span><br><span class="line">不可为百分比</span><br><span class="line">需搭配 <span class="attribute">perspective</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x, y, z); //xyz 偏移</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(xdeg);        //沿着 <span class="attribute">x</span> 轴旋转</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(ydeg);        //沿着 <span class="attribute">y</span> 轴旋转</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(zdeg);        //沿着 z 轴旋转</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(x, y, z, adeg);</span><br><span class="line"><span class="attribute">x</span>, <span class="attribute">y</span>, z: <span class="number">0</span> 或 <span class="number">1</span></span><br><span class="line"><span class="number">0</span> 表不沿着该轴旋转, <span class="number">1</span> 表沿着该轴旋转。</span><br><span class="line">a: 旋转角度</span><br><span class="line"></span><br><span class="line">transform: <span class="built_in">scaleX</span>(rate);         //沿着 <span class="attribute">x</span> 轴缩放 (胖瘦)</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(rate);         //沿着 <span class="attribute">y</span> 轴缩放 (高矮)</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleZ</span>(rate);         //沿着 z 轴缩放</span><br><span class="line">须搭配其他变形</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x, y, z);</span><br></pre></td></tr></table></figure>

<h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>                       //转场动画</span><br><span class="line"><span class="attribute">transition-property</span>              //属性名称</span><br><span class="line"><span class="attribute">all</span> (default);</span><br><span class="line"><span class="attribute">transition-duration</span>              //效果持续时间 (单位 s, ms)</span><br><span class="line"><span class="number">0s</span> (default，不会有效果)</span><br><span class="line"><span class="attribute">transition-timing-function</span>       //加速度曲线</span><br><span class="line">linear                    //均速</span><br><span class="line">ease                      //先加速后减速 (default)</span><br><span class="line">ease-in                   //加速</span><br><span class="line">ease-out                  //减速</span><br><span class="line">ease-in-out               //平缓的先加速后减速</span><br><span class="line"><span class="attribute">transition-delay</span>          //延迟播放 (单位 s, ms)</span><br></pre></td></tr></table></figure>

<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* from and to */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animation-name&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="comment">/* 起始样式 (相当于 0%) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="comment">/* 结束样式 (相当于 100%) */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进度百分比 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animation-name&#123;</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="comment">/* 起始样式 (相当于 from) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line">        <span class="comment">/* 50% 样式 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="comment">/* 结束样式 (相当于 to) */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span>                             //动画</span><br><span class="line"><span class="attribute">animation-name</span>                        //动画名称</span><br><span class="line"><span class="attribute">animation-duration</span>                    //动画持续时间 (单位 s, ms)</span><br><span class="line"><span class="attribute">animation-timing-function</span>             //加速度曲线</span><br><span class="line">linear                      //均速</span><br><span class="line">ease                        //先加速后减速 (default)</span><br><span class="line">ease-in                     //加速</span><br><span class="line">ease-out                    //减速</span><br><span class="line">ease-in-out                 //平缓的先加速后减速</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-delay</span>                       //延迟播放</span><br><span class="line"><span class="attribute">animation-iteration-count</span>             //播放次数 (infinite: 无限循环)</span><br><span class="line">animation-direction                   //播放方向</span><br><span class="line">normal                      //<span class="number">0%</span> ~ <span class="number">100%</span> (default)</span><br><span class="line">reverse                     //<span class="number">100%</span> ~ <span class="number">0%</span></span><br><span class="line">alternate                   //<span class="number">0%</span> ~ <span class="number">100%</span>，<span class="number">100%</span> ~ <span class="number">0%</span> </span><br><span class="line">alternate-reverse           //<span class="number">100%</span> ~ <span class="number">0%</span>，<span class="number">0%</span> ~ <span class="number">100%</span></span><br><span class="line">------------------------------</span><br><span class="line">animation-fill-mode                   //播放前后的状态</span><br><span class="line">none                        //回到未播放动画效果前 (default)</span><br><span class="line">forwards                    //停在最后一个状态上</span><br><span class="line">backwards                   //停在第一个状态上</span><br><span class="line">both                        //视 animation-direction</span><br><span class="line">animation-play-state        //播放或暂停</span><br><span class="line">running                     //播放 (default)</span><br><span class="line">paused                      //暂停</span><br></pre></td></tr></table></figure>

<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><blockquote>
<p>BFC <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvR3VpZGUvQ1NTL0Jsb2NrX2Zvcm1hdHRpbmdfY29udGV4dA==">块格式化上下文<i class="fa fa-external-link-alt"></i></span>（Block Formatting Context） 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p>
</blockquote>
<h2 id="设计哲学"><a href="#设计哲学" class="headerlink" title="设计哲学"></a>设计哲学</h2><h3 id="RWD"><a href="#RWD" class="headerlink" title="RWD"></a>RWD</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">常用绝对单位</span><br><span class="line">px</span><br><span class="line">pt</span><br><span class="line"></span><br><span class="line">常用相对单位</span><br><span class="line">% (以父节点为基准的百分比)</span><br><span class="line">em (预设 16px)</span><br><span class="line">rem (root em，预设 16px)，我们也可以通过 html &#123; font-size: xxx; &#125; 来设置。</span><br><span class="line"></span><br><span class="line">em 和 rem</span><br><span class="line">em = 父节点大小(其实就是本身的基准大小，主要是本身未设置时默认继承父元素的大小。) *  em倍数</span><br><span class="line">rem = 根节点大小 * rem倍数</span><br><span class="line"></span><br><span class="line">响应式网页设计 (Responsive Web Design)</span><br><span class="line">网页的设计可以自动适应不同访问设备(计算机, 平板, 手机。)</span><br><span class="line">单纯透过 CSS Media Query 控制，不须维护第二套程序码。</span><br><span class="line"></span><br><span class="line">强调使用</span><br><span class="line">相对单位 (%, rem, em)</span><br><span class="line">流动、弹性的设计 (inline-block, float…)</span><br><span class="line"></span><br><span class="line">mata-viewport可视区域 </span><br><span class="line">user-scalable=no</span><br><span class="line">取消移动装置的缩放功能</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Media-Queries-与界面容器"><a href="#Media-Queries-与界面容器" class="headerlink" title="Media Queries 与界面容器"></a>Media Queries 与界面容器</h3><p><img data-src="/images/loading.gif" data-original="/cssmore/screen.png"></p>
<blockquote>
<p>为了让不同使用者的荧幕分辨率可以获得最佳浏览效果，根据荧幕分辨率，制定不同大小的界面容器，增加使用者体验。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: width-a) <span class="keyword">and</span> (<span class="attribute">max-width</span>: width-b) &#123;</span><br><span class="line">    <span class="comment">/* 符合条件，套用的样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见的界面容器宽度</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/cssmore/screen-width.png"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">!important                  //避免样式被覆盖</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:not</span>()                      //非</span><br><span class="line"><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first-child</span>)          //不是第一个子节点的</span><br><span class="line"><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:empty</span>)                //非空</span><br><span class="line"></span><br><span class="line">calc()                      //不同单位计算</span><br><span class="line"><span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">200px</span>)    //<span class="number">100%</span>-<span class="number">200px</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>content-visibility: auto;</code> 优化长列表渲染，若 img 这种元素的高度是有图片内容决定的，还需要使用 <code>contains-intrinsic-size</code> 属性来优化。</p>
</blockquote>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础知识</title>
    <url>/cssstudy/</url>
    <content><![CDATA[<div class="note success no-icon"><p>本文为CSS基础知识。</p>
</div>
<span id="more"></span> 
<blockquote class="blockquote-center">
<p>CSS的一些基础知识</p>

</blockquote> 

<h1 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h1><p>&emsp;&emsp;CSS全称（Cascading Style Sheets）称为层叠样式表，他的存在使 HTML 与样式分离。</p>
<blockquote>
<p>目的</p>
</blockquote>
<ul>
<li>增加开发速度</li>
<li>易维护</li>
<li>易变更样式</li>
</ul>
<h1 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h1><h2 id="链接式"><a href="#链接式" class="headerlink" title="链接式"></a>链接式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;url地址&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">title</span>=<span class="string">&quot;不同屏幕大小的引入范例&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (max-width: 699px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>HTML5中，type可以省略，但是rel不可省略。</strong></p>
<h2 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">  css代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引入式"><a href="#引入式" class="headerlink" title="引入式"></a>引入式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> url(...);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>链接式与引入式(导入式)的区别：</strong>引入式在网页加载完成后再装载CSS，因此这就导致了一个问题，如果网页比较大则会出现先显示无样式的页面，闪烁一下之后，再出现网页的样式。这是一个缺陷。而引入式在网页加载时装载。</p>
<h2 id="行内式（不推荐）"><a href="#行内式（不推荐）" class="headerlink" title="行内式（不推荐）"></a>行内式（不推荐）</h2><p>直接在Element中添加<code>style</code>属性即可。</p>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="全部选择"><a href="#全部选择" class="headerlink" title="全部选择"></a>全部选择</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#id-name</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用：<code>&lt;tag id=&quot;id-name&quot;&gt;&lt;/tag&gt;</code></p>
</blockquote>
<h2 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.class-name</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 一个标签有多个类时可以这样选取：（tagname<span class="selector-class">.classnameA</span><span class="selector-class">.classnameB</span><span class="selector-class">.classnameC</span>） --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用：<code>&lt;tag class=&quot;class-name&quot;&gt;&lt;/tag&gt;</code></p>
</blockquote>
<h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>所有相同的标签名称都会被选取</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">tagname &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>所有具有该属性，不论属性值为何都会被选取</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-attr">[tag-attribute]</span> &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="属性值选择器"><a href="#属性值选择器" class="headerlink" title="属性值选择器"></a>属性值选择器</h2><p>符合指定属性与其属性值的元素才会被选取</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-attr">[tag-attribute=keyword]</span> &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>【 = 】 完全相符关键字<br>【*=】 完全相符关键字，或包含「关键字」。<br>【~=】 完全相符关键字，或包含「△关键字」 「△关键字△」「关键字△」（△为空格）。<br>【^ =】 完全相符关键字，或以「关键字」开头。<br>【| =】 完全相符关键字，或以「关键字」「关键字-」开头。<br>【$ =】 完全相符关键字，或以「关键字」结尾。</p>
<blockquote class="blockquote-center">
<p>以上选择器可配合一起使用：<code>tagname.class-name[tag-attribute=keyword] {...}</code>。<br><br>（注意：单个文件中，id选择器只能拥有一个，且只能使用一次。）</p>

</blockquote>

<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 选取super-selector后代中，所有的sub-selector --&gt;</span><br><span class="line">super-selector△sub-selector &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 选取parent-selector中的所有子child-selector（必须是儿子，孙子就不行了！） --&gt;</span><br><span class="line">parent-selector &gt; child-selector &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 选取selectorA的下一个selectorB --&gt;</span><br><span class="line">selectorA + selectorB&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 选取selectorA之后的selectorB --&gt;</span><br><span class="line">selectorA ~ selectorB&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 结果属于第一个子节点（查找<span class="selector-tag">div</span>下面的第一个子节点） --&gt;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结果属于最后一个子节点（查找<span class="selector-tag">div</span>下面的最后一个<span class="selector-tag">a</span>） --&gt;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结果不属于最后一个子节点（查找<span class="selector-tag">div</span>下面不是最后一个<span class="selector-tag">a</span>的所有元素）后面的选择器也可以使用，均类似。 --&gt;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-pseudo">:not</span>(<span class="selector-tag">a</span><span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结果属于第 n 个子节点(单数节点：odd，偶数节点：even) --&gt;</span><br><span class="line">selector<span class="selector-pseudo">:nth-child</span>(n) &#123;</span><br><span class="line">    ...查找第n个子selector，后同。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结果属于第 an+<span class="selector-tag">b</span> 个子节点(n从<span class="number">0</span>开始的递增值，<span class="selector-tag">a</span>、<span class="selector-tag">b</span>为数字。) --&gt;</span><br><span class="line">selector<span class="selector-pseudo">:nth-child</span>(an+<span class="selector-tag">b</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结果相同元素的属于第 n 个子节点(单数节点：odd，偶数节点：even) --&gt;</span><br><span class="line">selector<span class="selector-pseudo">:nth-of-type</span>(n) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结果相同元素的属于第 an+<span class="selector-tag">b</span> 个子节点(n从<span class="number">0</span>开始的递增值，<span class="selector-tag">a</span>、<span class="selector-tag">b</span>为数字。) --&gt;</span><br><span class="line">selector<span class="selector-pseudo">:nth-of-type</span>(an+<span class="selector-tag">b</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>注意：</strong></p>
</blockquote>
<ol>
<li>选择器是由右到左执行的。</li>
<li>不要写冗余的选择器，尽量编写最简化的代码。</li>
<li>选择器存在优先级，优先级高的会覆盖优先级低的样式。</li>
<li>css中，后定义的样式会覆盖之前定义的样式。最近的祖先样式比其他祖先样式优先级高。</li>
<li>优先级为： <code>!important &gt; 行内样式 &gt; id &gt; class &gt; 属性 &gt; 伪类 &gt; 伪元素 &gt; 标签 &gt; 通配(全选)</code>。</li>
<li>选择器可以权重叠加，例如：<code>#id-name&#123;...&#125;</code>虽然优先级高，但是<code>div #id-name&#123;...&#125;</code>的权重为<code>1+1=2(单个选择器权重为1)</code>，其大于前面的id选择器权重。所以会覆盖前面的样式。如果二者权重都为2，即<code>#superid-name #id-name与div #id-name</code>二者相比，那么<strong>按顺序依次比较优先级大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中都相等，则按照”就近原则”来判断</strong>（在这里，我们通过比较发现，前者的id选择器&gt;标签选择器，所以前者的优先级更高。另外我们也可以这样认为，同样情况下选择器越多的优先级越高，例如：<code>#id1#id1 &gt; #id1/.class1.class1 &gt; .class1</code>）。<strong>（注意：在属性值对后面加 <code>△！important</code>，可以防止样式被覆盖，即优先级最高。)</strong></li>
<li>选择器执行效率：<code>id &gt; class &gt; 标签 &gt; 兄弟 &gt; 子代 &gt; 后代 &gt; 通配(全选) &gt; 属性</code>。(由快到慢，选择器三字省略…)</li>
<li>class中可以使用多个选择器,使用空格隔开。（例：<code>&lt;div class=&quot;selectorA selectorB selectorC&quot;&gt;&lt;/div&gt;</code>）</li>
<li>css中，为了后续的可扩展性和可维护性，应尽量少使用id选择器，尽量不使用行内样式，且css应建立单独文档引入。</li>
</ol>
<h1 id="伪类-amp-伪元素"><a href="#伪类-amp-伪元素" class="headerlink" title="伪类&amp;伪元素"></a>伪类&amp;伪元素</h1><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><table>
<thead>
<tr>
<th align="center"><strong>名称</strong></th>
<th align="center"><strong>使用时机</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><em><strong>:hover</strong></em></td>
<td align="center">当鼠标移过元素时</td>
</tr>
<tr>
<td align="center"><em><strong>:focus</strong></em></td>
<td align="center">当元素被 focus 时（聚焦）</td>
</tr>
<tr>
<td align="center"><em><strong>:active</strong></em></td>
<td align="center">当元素执行时，或者说被点击时。</td>
</tr>
<tr>
<td align="center"><em><strong>:target</strong></em></td>
<td align="center">当元素被呼叫时</td>
</tr>
<tr>
<td align="center"><em><strong>:first-child</strong></em></td>
<td align="center">当元素为第一个子节点时</td>
</tr>
<tr>
<td align="center"><em><strong>:last-child</strong></em></td>
<td align="center">当元素为最后一个子节点时</td>
</tr>
</tbody></table>
<blockquote class="blockquote-center">
<p><strong>例</strong>让所有书签被呼叫时，字体颜色为红色： <code>*:target { color: red; }</code> (星号可写可不写)。</p>

</blockquote>

<h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><table>
<thead>
<tr>
<th align="center"><strong>名称</strong></th>
<th align="center"><strong>使用时机</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><em><strong>:::first-line</strong></em></td>
<td align="center">第一行</td>
</tr>
<tr>
<td align="center"><em><strong>::first-letter</strong></em></td>
<td align="center">第一个字</td>
</tr>
<tr>
<td align="center"><em><strong>::before</strong></em></td>
<td align="center">元素内容之前</td>
</tr>
<tr>
<td align="center"><em><strong>::after</strong></em></td>
<td align="center">元素内容之后</td>
</tr>
<tr>
<td align="center"><em><strong>::marker</strong></em></td>
<td align="center">用于生成项目元素符号或数字</td>
</tr>
</tbody></table>
<p><strong>例</strong>在a标签后面添加内容ABC：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;ABC&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>例</strong>在a标签后面添加背景： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">...</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>例</strong>在a标签后面添加某个属性的值： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(attribute-name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>伪类还有很多巧妙的用法(排序、贴图等)可以自己去探索~</strong></p>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p><img data-src="/images/loading.gif" data-original="/cssstudy/boxmodel.gif"></p>
<h2 id="margin-外边距"><a href="#margin-外边距" class="headerlink" title="margin 外边距"></a>margin 外边距</h2><p><img data-src="/images/loading.gif" data-original="/cssstudy/margin.png"></p>
<h2 id="border-边框"><a href="#border-边框" class="headerlink" title="border 边框"></a>border 边框</h2><p><img data-src="/images/loading.gif" data-original="/cssstudy/border.png"></p>
<blockquote>
<p>注意：边框还可以分为内边框和外边框。默认为外边框，如果你想要变成内边框（即元素内容的宽度包含边框），只需设置属性 <code>box-sizing: border-box;</code></p>
</blockquote>
<h2 id="padding-内填充"><a href="#padding-内填充" class="headerlink" title="padding 内填充"></a>padding 内填充</h2><p><img data-src="/images/loading.gif" data-original="/cssstudy/padding.png"></p>
<h2 id="元素实际占用"><a href="#元素实际占用" class="headerlink" title="元素实际占用"></a>元素实际占用</h2><p>元素实际宽高为：左(上)margin+左(上)border+左(上)padding+内容+右(下)padding+右(下)border+右(下)margin</p>
<p>元素背景占用为：左(上)border+左(上)padding+内容+右(下)padding+右(下)border</p>
<p>还可以设置最大最小宽高（<code>max-width</code> or <code>min-height</code>)具体操作自己摸索。</p>
<h2 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h2><h3 id="W3C盒模型"><a href="#W3C盒模型" class="headerlink" title="W3C盒模型"></a>W3C盒模型</h3><blockquote>
<p>box-sizing: content-box(default)</p>
</blockquote>
<p>width = content-width<br>height = content-height</p>
<h3 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a>IE盒模型</h3><blockquote>
<p>box-sizing: border-box</p>
</blockquote>
<p>width = content-width + 左(右)padding + 左(右)border<br>height = content-height + 上(下)padding + 上(下))border</p>
<h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="color-颜色"><a href="#color-颜色" class="headerlink" title="color 颜色"></a>color 颜色</h2><p>css中颜色有很多种写法。</p>
<ol>
<li><p><code>color: colorname;</code> 这种写法，支持那些常用的颜色。（透明色：transparent）</p>
<blockquote>
<p>例: <strong>color: red;</strong></p>
</blockquote>
</li>
<li><p><code>color: rgb(red,green,blue);</code> 这种写法，是使用三原色调色。</p>
<blockquote>
<p>例: <strong>color: rgb(0,0,0);</strong></p>
</blockquote>
</li>
<li><p><code>color: rgb(red,green,blue,Alpha);</code> (Alpha是0～1之间的值，0 完全透明，1完全不透明)这种写法同上。</p>
<blockquote>
<p>例: <strong>color: rgb(0,0,0,0.5);</strong></p>
</blockquote>
</li>
<li><p><code>color: HEX;</code> 这种写法是写颜色的16进制值。</p>
<blockquote>
<p>例: <strong>color: #FFF;</strong> <strong>color: #FF0000;</strong></p>
</blockquote>
</li>
</ol>
<h2 id="font-字体"><a href="#font-字体" class="headerlink" title="font 字体"></a>font 字体</h2><ol>
<li><p>font-style 默认为normal正常，可设置italic斜体。</p>
</li>
<li><p>font-weight 默认为normal正常，可设置bold或者bolder加粗。</p>
</li>
<li><p>font-size 自己设置，也可使用其样式（例：small、large、x-larger等等）。</p>
</li>
<li><p>font-family 字体设置，需搭配@font-face。</p>
</li>
</ol>
<blockquote>
<p>例：</p>
</blockquote>
<p>有两种类型的字体系列名称：</p>
<ul>
<li><p>指定的系列名称：具体字体的名称，比如：“times”、“courier”、“arial”。(或者自定义的字体)</p>
</li>
<li><p>通常字体系列名称：比如：“serif”、“sans-serif”、“cursive”、“fantasy”、“monospace”</p>
</li>
</ul>
<p><strong>&emsp;&emsp;font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。<br>提示：使用逗号分割每个值，并始终提供一个类族名称作为最后的选择。<br>注意：使用某种特定的字体系列（Geneva）完全取决于用户机器上该字体系列是否可用；这个属性没有指示任何字体下载。因此，强烈推荐使用一个通用字体系列名作为后路。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;my-font-family-name&quot;</span>,Serif;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: my-font-family-name;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;url地址&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-stretch</span>: 拉伸字体;</span><br><span class="line">    <span class="attribute">font-style</span>: 字体样式;</span><br><span class="line">    <span class="attribute">font-weight</span>: 字体粗细;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="text-文字"><a href="#text-文字" class="headerlink" title="text 文字"></a>text 文字</h2><ol>
<li><p>text-indent 首行缩进 自己设置值</p>
</li>
<li><p>text-align 文字排列（center、right、left）</p>
</li>
<li><p>text-shadow 文字阴影 （四个值：分别是水平阴影 垂直阴影 模糊范围 颜色）</p>
</li>
<li><p>text-transform 字母大小写 （<code>none</code> 原格式|<code>uppercase</code> 大写|<code>lowercase</code> 小写|<code>capitalize</code> 首字母大写）</p>
</li>
<li><p>text-decoration 字符装饰 （<code>none</code> 无装饰|<code>underline</code> 下划线|<code>overline</code> 顶线|<code>line-through</code> 删除线）</p>
</li>
<li><p>letter-spacing 字符之间的间距</p>
</li>
<li><p>line-height 行高（一般设置与元素高度相同，字符就会垂直居中。）</p>
</li>
</ol>
<h2 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h2><ul>
<li>新的伪类与伪元素</li>
<li>选择器(基本选择器 属性选择器 伪类选择器)</li>
<li>背景渐变</li>
<li>边框圆角阴影</li>
<li>转换和变形</li>
<li>过渡</li>
<li>动画</li>
<li>盒模型(以box-sizing区分，前面有介绍。)</li>
<li>媒体查询</li>
</ul>
<h2 id="WC太多了，基础篇写到这里。上厕所去了，其他内容后续再介绍。"><a href="#WC太多了，基础篇写到这里。上厕所去了，其他内容后续再介绍。" class="headerlink" title="WC太多了，基础篇写到这里。上厕所去了，其他内容后续再介绍。"></a>WC太多了，基础篇写到这里。上厕所去了，其他内容后续再介绍。</h2><blockquote>
<p>进阶内容：</p>
</blockquote>
<ol>
<li><p>background</p>
</li>
<li><p>opacity visibility display:none区别</p>
</li>
<li><p>column、outline、border、boxshadow、list、table</p>
</li>
<li><p>cursor、overflow、resize</p>
</li>
<li><p>display</p>
</li>
<li><p>position、z-index</p>
</li>
<li><p>float、对齐方式、上下左右居中方式</p>
</li>
<li><p>动画</p>
</li>
<li><p>各浏览器默认属性以及可继承与不可继承的属性</p>
</li>
<li><p>常用单位、设计哲学</p>
</li>
</ol>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>【GET】与【POST】的区别</title>
    <url>/htmlform/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>【GET】与【POST】的区别</p>
</div>
<span id="more"></span> 

<table>
<thead>
<tr>
<th><strong>内容</strong></th>
<th align="center"><strong>GET</strong></th>
<th align="center"><strong>POST</strong></th>
</tr>
</thead>
<tbody><tr>
<td>传输内容</td>
<td align="center">附加在url后方</td>
<td align="center">隐藏，放在Request body中。</td>
</tr>
<tr>
<td>长度限制</td>
<td align="center">有，2048个字符。<br>一般是浏览器决定。</td>
<td align="center">无，一般是服务器大小决定。</td>
</tr>
<tr>
<td>应用场景</td>
<td align="center">传输资料不敏感时</td>
<td align="center">传输资料敏感时</td>
</tr>
<tr>
<td>可见性</td>
<td align="center">可在url看见</td>
<td align="center">不可在url看见</td>
</tr>
<tr>
<td>书签保存</td>
<td align="center">可以</td>
<td align="center">无法保存</td>
</tr>
<tr>
<td>浏览记录保存</td>
<td align="center">可以</td>
<td align="center">无法保存</td>
</tr>
<tr>
<td>加密?</td>
<td align="center">不加密</td>
<td align="center">不加密</td>
</tr>
<tr>
<td>封包名称</td>
<td align="center">Query String Parameters</td>
<td align="center">Form Data</td>
</tr>
<tr>
<td>类型</td>
<td align="center">明信片</td>
<td align="center">信封</td>
</tr>
</tbody></table>
<blockquote>
<p>其他</p>
</blockquote>
<ul>
<li><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p>
</li>
<li><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p>
</li>
<li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p>
</li>
<li><p>GET请求只能进行url编码，而POST支持多种编码方式。</p>
</li>
<li><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Web存储方式</title>
    <url>/webstorage/</url>
    <content><![CDATA[<div class="note info no-icon"><p>Web的几种存储方式介绍</p>
</div>
<span id="more"></span> 
<h2 id="web存储方式有哪些？"><a href="#web存储方式有哪些？" class="headerlink" title="web存储方式有哪些？"></a>web存储方式有哪些？</h2><blockquote>
<p>如下图，常见的浏览器端存储技术有（<code>Local Storage</code>、<code>Session Storage</code>、<code>IndexedDB</code>、<code>Web SQL</code>还有<code>Cookies</code></p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/webstorage/webstorage.PNG"></p>
<h2 id="Local-Storage与Session-Storage"><a href="#Local-Storage与Session-Storage" class="headerlink" title="Local Storage与Session Storage"></a>Local Storage与Session Storage</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><p><code>Local Storage</code>是没有时间限制的存储（关闭浏览器，再次打开浏览器，存储的数据依然存在，除非主动清除。）</p>
</li>
<li><p><code>Session Storage</code>是针对一个<strong>Session</strong>的数据存储（关闭浏览器窗口，存储的数据清空。），前进、后退、刷新数据依然存在。</p>
</li>
<li><p>它们均只能存储字符串类型的对象，都是用来存储客户端临时信息的对象。</p>
</li>
<li><p>不同浏览器无法共享<code>Session Storage</code>、<code>Local Storage</code>中的信息.</p>
</li>
<li><p>相同浏览器不同页面可以共享<code>Local Storage</code>中的信息（同协议，同域名，同端口，即不能跨域。），但是<code>Session Storage</code>不行。</p>
</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 存储变量 */</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;item&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取变量的值 */</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除指定变量 */</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除本地存储的所有信息 */</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取当前存储的键值对数量 */</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：localStorage存储的值只能是字符串形式。当存储的数据为引用对象，会默认调用对象的toString方法，转为字符串在存储。在存储数组的时候，存储的数据项以“,”隔开，解析的时候需要分解为数组在操作。对于对象，需要JSON.stringify转化在存储，获取数据后用JSON.parse转为对象。</p>
</blockquote>
<blockquote class="blockquote-center">
<p>顺带一提服务端的存储技术<code>Session</code>与<code>Session Storage</code>是不同的。<code>Session</code>数据是放在服务器上，而<code>Session Storage</code>是放在浏览器上的。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9waHAvcGhwLXNlc3Npb25zLmh0bWw=">PHP-SESSION<i class="fa fa-external-link-alt"></i></span></p>

</blockquote>

<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;网络早期最大的问题之一是如何管理状态。简而言之，服务器无法知道两个请求是否来自同一个浏览器。当时最简单的方法是在请求时，在页面中插入一些参数，并在下一个请求中传回参数。这需要使用包含参数的隐藏的表单，或者作为URL参数的一部分传递。这两个解决方案都手动操作，容易出错。cookie出现来解决这个问题。</p>
<p>&emsp;&emsp;cookie是纯文本，没有可执行代码。存储数据，当用户访问了某个网站（网页）的时候，我们就可以通过cookie来向访问者电脑上存储数据，或者某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）。</p>
<p>&emsp;&emsp;当网页要发http请求时，浏览器会先检查是否有相应的cookie，有则自动添加在request header中的cookie字段中。这些是浏览器自动帮我们做的，而且每一次http请求浏览器都会自动帮我们做。这个特点很重要，因为这关系到“什么样的数据适合存储在cookie中”。</p>
<p>&emsp;&emsp;存储在cookie中的数据，每次都会被浏览器自动放在http请求中，如果这些数据并不是每个请求都需要发给服务端的数据，浏览器这设置自动处理无疑增加了网络开销；但如果这些数据是每个请求都需要发给服务端的数据（比如身份认证信息），浏览器这设置自动处理就大大免去了重复添加操作。所以对于那种设置“每次请求都要携带的信息（最典型的就是身份认证信息）”就特别适合放在cookie中，其他类型的数据就不适合了。</p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li><p>不同的浏览器存放的cookie位置不一样，也是不能通用的。</p>
</li>
<li><p>cookie的存储是以域名形式进行区分的，不同的域下存储的cookie是独立的。</p>
</li>
<li><p>我们可以设置cookie生效的域（当前设置cookie所在域的子域），也就是说，我们能够操作的cookie是当前域以及当前域下的所有子域。</p>
</li>
<li><p>一个域名下存放的cookie的个数是有限制的，不同的浏览器存放的个数不一样,一般为20个。</p>
</li>
<li><p>cookie也可以设置过期的时间，默认是会话结束的时候，当时间到期自动销毁。</p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>&emsp;&emsp;由于源生cookie设置不是很友好，我们要自己写函数实现。</p>
<h4 id="使用JavaScript"><a href="#使用JavaScript" class="headerlink" title="使用JavaScript"></a>使用JavaScript</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置cookie，name-存Cookie的变量名，value-变量的值，days-有效期 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value, days</span>) &#123;</span><br><span class="line">    days = days || <span class="number">30</span>;                                       <span class="comment">//没有设置有效期，默认有效期是30天</span></span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>();                                    <span class="comment">//获取当前日期</span></span><br><span class="line">    exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() + days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">//设置过期日期</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + <span class="built_in">escape</span>(value) + <span class="string">&quot;;expires=&quot;</span> + exp.<span class="title function_">toGMTString</span>() + <span class="string">&quot;;path=/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取cookie */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr, reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^| )&quot;</span> + name + <span class="string">&quot;=([^;]*)(;|$)&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">match</span>(reg)) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除cookie */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> cval = <span class="title function_">getCookie</span>(name);</span><br><span class="line">    <span class="keyword">if</span> (cval != <span class="literal">null</span>) <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + cval + <span class="string">&quot;;expires=&quot;</span> + exp.<span class="title function_">toGMTString</span>() + <span class="string">&quot;;path=/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用jQuery插件"><a href="#使用jQuery插件" class="headerlink" title="使用jQuery插件"></a>使用jQuery插件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用之前记得引入jquery与jquery.cookie.js */</span></span><br><span class="line"><span class="comment">/* 设置cookie */</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);                             <span class="comment">//如果未指定过期时间，则会在关闭浏览器或过期。</span></span><br><span class="line"></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);             <span class="comment">//创建 cookie，并设置 7 天后过期。</span></span><br><span class="line"></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);  <span class="comment">//创建 cookie，并设置 cookie 的有效路径，路径为网站的根目录。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取cookie */</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>); </span><br><span class="line"></span><br><span class="line">$.<span class="title function_">cookie</span>();       <span class="comment">//读取所有的 cookie 信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除cookie */</span></span><br><span class="line"><span class="comment">// cookie 删除成功返回 true，否则返回 false</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; false </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 写入使用了 path时，读取也需要使用相同的属性 (path, domain) </span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 以下代码【删除失败】</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="comment">// 以下代码【删除成功】</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<h4 id="使用php"><a href="#使用php" class="headerlink" title="使用php"></a>使用php</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置cookie */</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(name, value, expire, path, domain);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取cookie */</span></span><br><span class="line"><span class="title function_ invoke__">filter_input</span>(INPUT_COOKIE, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除cookie */</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">time</span>()-<span class="number">3600</span>);   <span class="comment">//当删除 cookie 时，您应当使过期日期变更为过去的时间点。</span></span><br></pre></td></tr></table></figure>

<h2 id="Web-SQL"><a href="#Web-SQL" class="headerlink" title="Web SQL"></a>Web SQL</h2><blockquote>
<p>未来会被取代，主要有以下几个原因：</p>
</blockquote>
<ul>
<li>W3C舍弃 Web SQL database草案,而且是在2010年年底，规范不支持了，浏览器厂商已经支持的就支持了，没有支持的也不打算支持了，比如IE和Firefox。</li>
<li>为什么要舍弃？因为 Web SQL database 本质上是一个关系型数据库，后端可能熟悉，但是前端就有很多不熟悉了，虽然SQL的简单操作不难，但是也得需要学习。</li>
<li>SQL熟悉后，真实操作中还得把你要存储的东西，比如对象，转成SQL语句，也挺麻烦的。</li>
</ul>
<h2 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h2><blockquote>
<p>来自MDN的解释： indexedDB 是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索。虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。所以，IndexedDB API是强大的，但对于简单的情况可能看起来太复杂了，所以要看你的业务场景来选择到底是用还是不用。</p>
</blockquote>
<h2 id="其他对比"><a href="#其他对比" class="headerlink" title="其他对比"></a>其他对比</h2><h3 id="Local-Storage、Session-Storage、Cookies对比"><a href="#Local-Storage、Session-Storage、Cookies对比" class="headerlink" title="Local Storage、Session Storage、Cookies对比"></a><code>Local Storage</code>、<code>Session Storage</code>、<code>Cookies</code>对比</h3><table>
<thead>
<tr>
<th align="center"><strong>对比内容</strong></th>
<th><code>Local Storage</code></th>
<th><code>Session Storage</code></th>
<th><code>Cookies</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据生命周期</td>
<td><strong>除非被清除，否则永久保留。</strong></td>
<td><strong>关闭页面或者浏览器后清除</strong></td>
<td><strong>有失效时间</strong></td>
</tr>
<tr>
<td align="center">存放数据大小</td>
<td><strong>一般为5MB(由各浏览器厂商决定)</strong></td>
<td><strong>同前者</strong></td>
<td><strong>一般是4KB左右</strong></td>
</tr>
<tr>
<td align="center">与服务器端通信</td>
<td><strong>仅保存在客户端，不与服务器通信。</strong></td>
<td><strong>同前者</strong></td>
<td><strong>每次都会携带在HTTP请求头里面，如果使用Cookie保存过多数据会带来性能问题。</strong></td>
</tr>
<tr>
<td align="center">易用性</td>
<td><strong>源生可用，也可再次封装。</strong></td>
<td><strong>源生可用，也可再次封装。</strong></td>
<td><strong>源生的Cookie接口不友好，需自己封装。</strong></td>
</tr>
<tr>
<td align="center">应用场景</td>
<td><strong>保存一些持久性数据，像游戏数据等。</strong></td>
<td><strong>保存一些暂时性的数据</strong></td>
<td><strong>一般用来保存一些验证信息</strong></td>
</tr>
</tbody></table>
<h3 id="cookie、session区别"><a href="#cookie、session区别" class="headerlink" title="cookie、session区别"></a>cookie、session区别</h3><ol>
<li><p>cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
</li>
<li><p>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑*到安全应当使用session。</p>
</li>
<li><p>session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</p>
</li>
<li><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
</li>
<li><p>建议将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>
</li>
<li><p>session保存在服务器，客户端不知道其中的信息，cookie保存在客户端，服务器能够知道其中的信息。</p>
</li>
<li><p>session中保存的是对象，cookie中保存的是字符串。</p>
</li>
<li><p>session不能区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的。</p>
</li>
</ol>
<h3 id="客户端（浏览器）本地存储与服务器端存储"><a href="#客户端（浏览器）本地存储与服务器端存储" class="headerlink" title="客户端（浏览器）本地存储与服务器端存储"></a>客户端（浏览器）本地存储与服务器端存储</h3><p>&emsp;&emsp;其实数据既可以在浏览器本地存储，也可以在服务器端存储。浏览器可以保存一些数据，需要的时候直接从本地存取，sessionStorage、localStorage和cookie都是由浏览器存储在本地的数据，服务器端也可以保存所有用户的所有数据，但需要的时候浏览器要向服务器请求数据。</p>
<ul>
<li><p>服务器端可以保存用户的持久数据，如数据库和云存储将用户的大量数据保存在服务器端。</p>
</li>
<li><p>服务器端也可以保存用户的临时会话数据，服务器端的session机制，如session对象，数据保存在服务器上，实际上，服务器和浏览器之间仅需传递session id即可，服务器根据session id找到对应用户的session对象，会话数据仅在一段时间内有效，这个时间就是server端设置的session有效期。</p>
</li>
<li><p>服务器端保存所有的用户的数据，所以服务器端的开销较大，而浏览器端保存则把不同用户需要的数据分别保存在用户各自的浏览器中，浏览器端一般只用来存储小数据，而非服务可以存储大数据或小数据服务器存储数据安全一些，浏览器只适合存储一般数据。</p>
</li>
<li><p>千万不能在客户端存储敏感信息。</p>
</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjU3ODc5NA==">参考文章<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>WebStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习记录</title>
    <url>/htmlstudy/</url>
    <content><![CDATA[<div class="note success no-icon"><p>HTML的一些基础知识。  </p>
</div>
<span id="more"></span> 

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;html全称为：超文本标记语言 (Hyper Text Markup Language, HTML)，是用于建立网页的标准标记语言，由成双成对的标签组合而成。</p>
<p><img data-src="/images/loading.gif" data-original="/htmlstudy/html_progress.png"></p>
<h2 id="html-基本结构"><a href="#html-基本结构" class="headerlink" title="html 基本结构"></a>html 基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;语言&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="comment">&lt;!-- 设置编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><span class="comment">&lt;!-- 设置设备缩放比例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;url...&quot;</span> &gt;</span><span class="comment">&lt;!-- 网页图标（logo） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...Content...</span><br><span class="line">  HTML5新增语义元素</span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span>...<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>...<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>...<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用代码与标签"><a href="#常用代码与标签" class="headerlink" title="常用代码与标签"></a>常用代码与标签</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><p>&emsp;&emsp;自己找吧懒得写了<del>嘻嘻</del></p>
<h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>&emsp;&emsp;一般我们粗体和斜体使用的都是<code>&lt;b&gt;</code>和<code>&lt;i&gt;</code>，但是如果是强调作用的话，我们一般推荐使用<code>&lt;strong&gt;</code>和<code>&lt;em&gt;</code>，他们更有利于SEO。</p>
<h3 id="实体符号"><a href="#实体符号" class="headerlink" title="实体符号"></a>实体符号</h3><p><img data-src="/images/loading.gif" data-original="/htmlstudy/shiti_char.png"></p>
<h2 id="HTML语义元素-amp-媒体元素"><a href="#HTML语义元素-amp-媒体元素" class="headerlink" title="HTML语义元素 &amp; 媒体元素"></a>HTML语义元素 &amp; 媒体元素</h2><table>
<thead>
<tr>
<th align="center"><strong>语义元素</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;header&gt;</code></td>
<td align="left">定义文档或节的页眉</td>
</tr>
<tr>
<td align="center"><code>&lt;nav&gt;</code></td>
<td align="left">定义文档内的导航连结</td>
</tr>
<tr>
<td align="center"><code>&lt;article&gt;</code></td>
<td align="left">定义文档内的文章</td>
</tr>
<tr>
<td align="center"><code>&lt;section&gt;</code></td>
<td align="left">定义文档中的节</td>
</tr>
<tr>
<td align="center"><code>&lt;aside&gt;</code></td>
<td align="left">定义页面内容之外的内容</td>
</tr>
<tr>
<td align="center"><code>&lt;footer&gt;</code></td>
<td align="left">定义文档或节的页脚</td>
</tr>
<tr>
<td align="center"><code>&lt;main&gt;</code></td>
<td align="left">定义文档的主内容</td>
</tr>
<tr>
<td align="center"><code>&lt;mark&gt;</code></td>
<td align="left">定义重要或强调的内容</td>
</tr>
<tr>
<td align="center"><code>&lt;bdi&gt;</code></td>
<td align="left">定义与其他文本不同的文本方向</td>
</tr>
<tr>
<td align="center"><code>&lt;details&gt;</code></td>
<td align="left">定义用户可查看或隐藏的额外细节</td>
</tr>
<tr>
<td align="center"><code>&lt;summary&gt;</code></td>
<td align="left">定义 <code>&lt;details&gt;</code> 元素的可见标题</td>
</tr>
<tr>
<td align="center"><code>&lt;dialog&gt;</code></td>
<td align="left">定义对话方块或窗口</td>
</tr>
<tr>
<td align="center"><code>&lt;figure&gt;</code></td>
<td align="left">定义自包含内容，如图示、图表、照片、代码清单等</td>
</tr>
<tr>
<td align="center"><code>&lt;figcaption&gt;</code></td>
<td align="left">定义 <code>&lt;figure&gt;</code> 元素的标题</td>
</tr>
<tr>
<td align="center"><code>&lt;menuitem&gt;</code></td>
<td align="left">定义使用者能够从弹出功能表的命令/功能表项目</td>
</tr>
<tr>
<td align="center"><code>&lt;meter&gt;</code></td>
<td align="left">定义已知范围（尺度）内的标量测量</td>
</tr>
<tr>
<td align="center"><code>&lt;progress&gt;</code></td>
<td align="left">定义任务进度</td>
</tr>
<tr>
<td align="center"><code>&lt;rp&gt;</code></td>
<td align="left">定义在不支持 ruby 注释的浏览器中显示什么</td>
</tr>
<tr>
<td align="center"><code>&lt;rt&gt;</code></td>
<td align="left">定义关于字符的解释/发音（用于东亚字体）</td>
</tr>
<tr>
<td align="center"><code>&lt;ruby&gt;</code></td>
<td align="left">定义 ruby 注释（用于东亚字体）</td>
</tr>
<tr>
<td align="center"><code>&lt;time&gt;</code></td>
<td align="left">定义日期/时间</td>
</tr>
<tr>
<td align="center"><code>&lt;wbr&gt;</code></td>
<td align="left">定义可能的折行（line-break）</td>
</tr>
<tr>
<td align="center"><strong>媒体元素</strong></td>
<td align="left"><strong>描述</strong></td>
</tr>
<tr>
<td align="center"><code>&lt;audio&gt;</code></td>
<td align="left">定义声音或音乐内容</td>
</tr>
<tr>
<td align="center"><code>&lt;embed&gt;</code></td>
<td align="left">定义外部应用程序的容器（比如外挂程序、SVG等），单标签。ps：使用SVG图片时，可能会失焦，若要设置点击事件可设置css[pointer-events: none;]，然后给其父元素设置click。</td>
</tr>
<tr>
<td align="center"><code>&lt;source&gt;</code></td>
<td align="left">定义 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 的来源</td>
</tr>
<tr>
<td align="center"><code>&lt;track&gt;</code></td>
<td align="left">定义 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 的轨道</td>
</tr>
<tr>
<td align="center"><code>&lt;video&gt;</code></td>
<td align="left">定义视频或影片内容</td>
</tr>
</tbody></table>
<h2 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h2><h3 id="HTML5-新增了语义元素、新增一些Input类型、表单元素与表单属性"><a href="#HTML5-新增了语义元素、新增一些Input类型、表单元素与表单属性" class="headerlink" title="HTML5 新增了语义元素、新增一些Input类型、表单元素与表单属性"></a>HTML5 新增了语义元素、新增一些Input类型、表单元素与表单属性</h3><h3 id="HTML5-Web-Workers"><a href="#HTML5-Web-Workers" class="headerlink" title="HTML5 Web Workers"></a>HTML5 Web Workers</h3><ul>
<li>当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。Web Workers 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 Web Workers 在后台运行。（相当于实现多线程并发）</li>
</ul>
<h3 id="HTML5-SSE"><a href="#HTML5-SSE" class="headerlink" title="HTML5 SSE"></a>HTML5 SSE</h3><ul>
<li>Server-Sent 事件指的是网页自动获取来自服务器的更新。以前也可能做到这一点，前提是网页不得不询问是否有可用的更新。通过服务器发送事件，更新能够自动到达。</li>
</ul>
<h3 id="HTML5-离线Web应用（应用程序缓存）"><a href="#HTML5-离线Web应用（应用程序缓存）" class="headerlink" title="HTML5 离线Web应用（应用程序缓存）"></a>HTML5 离线Web应用（应用程序缓存）</h3><h3 id="HTML5-newAPI"><a href="#HTML5-newAPI" class="headerlink" title="HTML5 newAPI"></a>HTML5 newAPI</h3><ul>
<li>Canvas</li>
<li>Drop &amp; Drag Event</li>
<li>Touch Event</li>
<li>Geolocation</li>
<li>WebSocket</li>
<li>Video &amp; Audio</li>
<li>Local Storage &amp; Session Storage</li>
<li>Cache</li>
<li>Notification</li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="html使用SVG的另一种方式Object"><a href="#html使用SVG的另一种方式Object" class="headerlink" title="html使用SVG的另一种方式Object"></a>html使用SVG的另一种方式Object</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;image/svg xml&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./test.svg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;src&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./test.svg&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="关于html头部语言"><a href="#关于html头部语言" class="headerlink" title="关于html头部语言"></a>关于html头部语言</h3><ul>
<li>zh-CN其实已经算弃用了</li>
<li>简体中文页面：html lang = zh-cmn-Hans</li>
<li>繁体中文页面：html lang = zh-cmn-Hant</li>
<li>英语页面：html lang = en</li>
</ul>
<blockquote>
<p>还有需要加地区代码的情况(一般比较少，除非为了强调不同地区汉语使用差异。)比如：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hans&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hans-CN&quot;</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hant-TW&quot;</span>&gt;</span>梨<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  其实是同一种水果。</span><br><span class="line">  只是大陆和台湾称谓不同，且新马一带的称谓也是不同的，称之为黄梨。</span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cmn-Hans-SG&quot;</span>&gt;</span>黄梨<span class="tag">&lt;/<span class="name">b</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，由于历史原因，有时候不得不继续使用zh-CN。比如中文维基百科，沿用了传统的zh-CN/zh-HK/zh-SG/zh-TW（按照标准应该使用 zh-cmn-Hans-CN、zh-cmn-Hant-HK、zh-cmn-Hans-SG、zh-cmn-Hant-TW）。这时候，合理的软件行为，是将 zh-CN 等转化为 zh-cmn-Hans（即转化为最常见的误用所对应的实际标准写法）。<br>实际上，各相关标准，也存在一定的滞后，见仁见智咯。</p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>好词佳句</title>
    <url>/poem/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>收录自己喜欢的一些诗句、美文等等……（想到一点加一点）</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p><strong>与君初相识，犹如故人归。</strong></p>

</blockquote>

<table>
<thead>
<tr>
<th align="center"><strong>文</strong></th>
<th><strong>源</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>人闲桂花落，夜静春山空。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>不如意事常八九，可与言者无二三。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>人间有味是清欢</code></td>
<td>（宋）苏轼</td>
</tr>
<tr>
<td align="center"><code>君不见高堂明镜悲白发，朝如青丝暮成雪。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>南朝四百八十寺，多少楼台烟雨中。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>玲珑骰子安红豆，入骨相思知不知。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>枯藤老树昏鸦，小桥流水人家，古道西风瘦马。夕阳西下，断肠人在天涯。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>苟利国家生死以，岂因祸福避趋之。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>人生自古谁无死，留取丹心照汗青。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>我自横刀向天笑，去留肝胆两昆仑。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>朱门酒肉臭，路有冻死骨。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>星垂平野阔，月涌大江流。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>十年生死两茫茫，不思量，自难忘。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>桃李春风一杯酒，江湖夜雨十年灯。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>飞雪连天射白鹿，笑书神侠倚碧鸳。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>从此山水不相逢，莫道彼此长和短。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>江南无所有，聊赠一枝春。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>茕茕白兔，东走西顾，衣不如新，人不如故。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>十步杀一人，千里不留行。事了拂衣去，深藏功与名。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>夜阑卧听风吹雨，铁马冰河入梦来。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>取次花丛懒回顾，半缘修道半缘君。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>如今识得愁滋味，却道天凉好个秋。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>重湖疊巘清嘉。有三秋桂子，十里荷花。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>曾经沧海难为水，除却巫山不是云。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>挟飞仙以遨游，抱明月而长终；知不可乎骤得，托遗响于悲风。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>去年今日此门中，人面桃花相映红。人面不知何处去，桃花依旧笑春风。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>昔日龌龊不足夸，今朝放荡思无涯。春风得意马蹄急，一日看尽长安花。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>天生我材必有用，千金散尽还复来。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>仰天大笑出门去，我辈岂是蓬蒿人。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>落霞与孤鹜齐飞，秋水共长天一色。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>君埋泉下泥销骨，我寄人间雪满头。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>醉后不知天在水，满船清梦压星河。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>我有一壶酒，足以慰风尘。尽倾江海里，赠饮天下人。</code></td>
<td>女：怜君行劳顿，愿做添酒人。</td>
</tr>
<tr>
<td align="center"><code>落花人独立，微雨燕双飞。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>山中何事？松花酿酒，春水煎茶。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>正是江南好风景，落花时节又逢君。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>此去经年，应是良辰好景虚设，便纵有千种风情，更与何人说？</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>浮云吹作雪，世味煮成茶。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>山有木兮木有枝，心悦君兮君不知。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>行到水穷处，坐看云起时。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>昆山玉碎凤凰叫，芙蓉泣露香兰笑。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>且将新火试新茶，诗酒趁年华。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>安得广厦千万间，大庇天下寒士俱欢颜。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>凭君莫话封侯事，一将功成万骨枯。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>问君能有几多愁，恰似一江春水向东流。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>流水落花春去也，天上人间。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>衣带渐宽终不悔，为伊消得人憔悴。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>醉里挑灯看剑，梦回吹角连营。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>身无彩凤双飞翼，心有灵犀一点通。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>半醉半醒日复日，花开花落年复年。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>两情若是久长时，又岂在朝朝暮暮。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>天若有情天亦老，人间正道是沧桑。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>在天愿作比翼鸟，在地愿为连理枝。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>天长地久有时尽，此恨绵绵无绝期。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>相见时难别亦难，东风无力百花残，春蚕到死丝方尽，蜡炬成灰泪始干。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>入我相思门，知我相思苦，长相思兮长相忆，短相思兮无穷极。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>落红不是无情物，化作春泥更护花。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>剑气纵横三万里，一剑光寒十九州。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>风萧萧兮易水寒，壮士一去兮不复还。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>此情可待成追忆，只是当时已惘然。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>葡萄美酒夜光杯，欲饮琵琶马上催。醉卧沙场君莫笑，古来征战几人回。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>三十功名尘与土，八千里路云和月。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>壮志饥食胡虏肉，笑谈渴饮匈奴血。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>人生若只如初见，何事秋风悲化扇。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>问世间情是何物？直教生死相许。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>多情自古空余恨，好梦由来最易醒。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>人生自是有情痴，此恨不关风与月。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>年年岁岁花相似，岁岁年年人不同。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>江山代有才人出，各领风骚数百年。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>纸上得来终觉浅，绝知此事要躬行。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>花开堪折直须折，莫待无花空折枝。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>人无千日好，花无百日红。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>黑发不知勤学早，白首方悔读书迟。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>千淘万漉虽辛苦，吹尽狂沙始到金。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>金风玉露一相逢，便胜却人间无数。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>横眉冷对千夫指，俯首甘为孺子牛。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>死生契阔，与子成说。执子之手，与子偕老。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>有美人兮，见之不忘，一日不见兮，思之如狂。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>一日不见，如三秋兮。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>雄关漫道真如铁，而今迈步从头越。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>半亩方塘一鉴开，天光云影共徘徊。问渠那得清如许？为有源头活水来。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>莫愁前路无知己，天下谁人不识君。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>昨夜西风凋碧树，独上高楼，望尽天涯路。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>众里寻他千百度，蓦然回首，那人却在灯火阑珊处。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>色不迷人人自迷，情人眼里出西施。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>福王少小风流惯， 不爱江山爱美人。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>十有九人堪白眼，百无一用是书生。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>万一禅关砉然破，美人如玉剑如虹。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>今朝有酒今朝醉，明日愁来明日愁。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>不经一番寒彻骨，那得梅花扑鼻香。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>冲天香阵透长安，满城尽带黄金甲。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>侯门一入深如海，从此萧郎是路人。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>十八新娘八十郎，苍苍白发对红妆。鸳鸯被里成双夜，一树梨花压海棠。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>踏破铁鞋无觅处，得来全不费工夫。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>粗缯大布裹生涯，腹有诗书气自华。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>近水楼台先得月，向阳花木易为春。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>寒冰不能断流水，枯木也会再逢春。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>出师未捷身先死，长使英雄泪满襟。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>一骑红尘妃子笑，无人知是荔枝来。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>念天地之悠悠，独怆然而涕下。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>粉身碎骨浑不怕，要留清白在人间。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>春色满园关不住，一枝红杏出墙来。</code></td>
<td></td>
</tr>
<tr>
<td align="center"><code>忽有故人心上过，回首山河已是秋。(两处相思/他朝若是)同淋雪，此生也算共白头。</code></td>
<td></td>
</tr>
<tr>
<td align="center">``</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>胜却人间无数</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Fancybox与Lazyload冲突的问题</title>
    <url>/fancyboxandlazyload/</url>
    <content><![CDATA[<div class="note warning no-icon"><p>图片懒加载与fancybox冲突，导致点开后图片显示错误。<br>原因与解决办法如下：</p>
</div>
<span id="more"></span> 

<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>&emsp;&emsp;因为图片懒加载预先会使用占位图来替代图片的<code>src</code>，等图片加载完成后，再用<code>data-original</code>里面的内容替换<code>src里面的内容</code>。然而fancybox的原理是在页面加载时给页面中所有的图片套一层<code>a标签</code>，<code>a标签</code>的<code>href</code>就是fancybox在页面加载时获取的<code>图片src</code>，恰好这时候获取的<code>src</code>偏偏就是lazyload的占位图的url，因此针对这个问题的解决办法有两种，一种是修改fancybox的代码（因为有些人引入的是外部js，所以不推荐。），我们来看另一种解决办法。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>&emsp;&emsp;<strong>思路：</strong> 在图片加载完成后，找到所以图片上一级的<code>a标签</code>，修改他的<code>href</code>属性。<br><strong>代码如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> img = $(<span class="string">&#x27;img&#x27;</span>);                        <span class="comment">//获取所有的img标签</span></span><br><span class="line">  img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;                  <span class="comment">//设置其完成后加载的方法</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">find</span>(<span class="string">&#x27;img[data-original]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      $(<span class="variable language_">this</span>).<span class="title function_">parents</span>(<span class="string">&#x27;a[class=&quot;fancybox fancybox.image&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-original&quot;</span>));</span><br><span class="line">    &#125;);                                      <span class="comment">//获取img[data-original]的值，然后找到img上级的a标签，将值赋给其href属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2019年4月测试此BUG已修复</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>注意：</code>以上代码使用了jQuery，如果之前没有引用jQuery的话，记得在代码前引入。</p>
]]></content>
      <categories>
        <category>足迹</category>
      </categories>
      <tags>
        <tag>lazyload</tag>
        <tag>fancybox</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Android学习Demo</title>
    <url>/androidproject/</url>
    <content><![CDATA[<div class="note primary no-icon"><p>记录一下自己大二时做的几个安卓小Demo。</p>
</div>
<span id="more"></span> 

<blockquote class="blockquote-center">
<p>自己大二时做的一个小玩意，后面不了了之(已转为web全栈开发)，有需要的同学可以找我要源码。我自己感觉里面还是有很多有用的干货滴 ~ </p>

</blockquote>

<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><p><img data-src="/images/loading.gif" data-original="/androidproject/1.png"><br><img data-src="/images/loading.gif" data-original="/androidproject/2.png"><br><img data-src="/images/loading.gif" data-original="/androidproject/3.png"></p>
<h1 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h1><div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/1.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/2.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/3.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/5.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/6.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/7.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/8.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/9.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/10.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/11.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/13.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/12.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/14.jpg" title="preview" alt="preview">
</div>

<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/androidproject/15.jpg" title="preview" alt="preview">
<img data-src="/images/loading.gif" data-original="/androidproject/16.jpg" title="preview" alt="preview">
</div>

<div align="center">欢迎大家一起交流学习！</div>
]]></content>
      <categories>
        <category>足迹</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>博客改头换面</title>
    <url>/oldblog/</url>
    <content><![CDATA[<div class="note no-icon"><p>记录一下改变博客主题的“大工程”。</p>
</div>
<span id="more"></span> 


<h1 id="旧博客电脑端"><a href="#旧博客电脑端" class="headerlink" title="旧博客电脑端"></a>旧博客电脑端</h1><blockquote class="blockquote-center">
<p><img data-src="/images/loading.gif" data-original="/oldblog/old1.png"><br><img data-src="/images/loading.gif" data-original="/oldblog/old2.png"><br><img data-src="/images/loading.gif" data-original="/oldblog/old3.png"><br><img data-src="/images/loading.gif" data-original="/oldblog/old4.png"><br><img data-src="/images/loading.gif" data-original="/oldblog/old5.png"><br><img data-src="/images/loading.gif" data-original="/oldblog/old6.png"></p>

</blockquote>


<h1 id="旧博客手机端"><a href="#旧博客手机端" class="headerlink" title="旧博客手机端"></a>旧博客手机端</h1><blockquote class="blockquote-center">
<p><img data-src="/images/loading.gif" data-original="/oldblog/111.jpg"></p>
<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/oldblog/555.jpg" title="旧博客手机端" alt="old-blog">
<img data-src="/images/loading.gif" data-original="/oldblog/666.jpg" title="旧博客手机端" alt="old-blog">
</div>
<div style="display: flex;flex-direction: row;justify-content: space-around;">
<img data-src="/images/loading.gif" data-original="/oldblog/333.jpg" title="旧博客手机端" alt="old-blog">
<img data-src="/images/loading.gif" data-original="/oldblog/444.jpg" title="旧博客手机端" alt="old-blog">
</div>
<img data-src="/images/loading.gif" data-original="/oldblog/222.jpg" title="旧博客手机端" alt="old-blog">
</blockquote>



<blockquote class="blockquote-center">
<p><strong>修改期间！致命操作！删除源码！所以现在内容全是空的！┭┮﹏┭┮！！！！！</strong><br>同志们遇事要冷静啊 ~</p>

</blockquote>]]></content>
      <categories>
        <category>足迹</category>
      </categories>
      <tags>
        <tag>博客换衣服</tag>
      </tags>
  </entry>
  <entry>
    <title>中国传统文化知识</title>
    <url>/chinesetradition/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>中国传统文化知识汇总（想到一点加一点）</p>
</div>
<span id="more"></span> 

<h2 id="四大系列"><a href="#四大系列" class="headerlink" title="四大系列"></a>四大系列</h2><table>
<thead>
<tr>
<th align="center"><strong>名称</strong></th>
<th align="center"><strong>内容</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><em>四大国粹</em></td>
<td align="center"><code>京剧、中医、国画、烹饪</code></td>
</tr>
<tr>
<td align="center"><em>四大民间传说</em></td>
<td align="center"><code>牛郎织女、孟姜女哭长城、梁山伯与祝英台、白蛇传</code></td>
</tr>
<tr>
<td align="center"><em>四大名著</em></td>
<td align="center"><code>红楼梦、西游记、水浒传、三国演义</code></td>
</tr>
<tr>
<td align="center"><em>四大发明</em></td>
<td align="center"><code>造纸术、印刷术、指南针、火药</code></td>
</tr>
<tr>
<td align="center"><em>四大名楼</em></td>
<td align="center"><code>黄鹤楼、岳阳楼、滕王阁、鹳雀楼</code></td>
</tr>
<tr>
<td align="center"><em>四大名桥</em></td>
<td align="center"><code>赵州桥、洛阳桥、广济桥、霁虹桥</code></td>
</tr>
<tr>
<td align="center"><em>四大美女</em></td>
<td align="center"><code>西施、王昭君、貂蝉、杨玉环</code></td>
</tr>
<tr>
<td align="center"><em>四大名医</em></td>
<td align="center"><code>扁鹊、华佗、张仲景、李时珍</code></td>
</tr>
<tr>
<td align="center"><em>四大才子</em></td>
<td align="center"><code>唐伯虎、祝枝山、文征明、徐祯卿</code></td>
</tr>
<tr>
<td align="center"><em>四大才艺</em></td>
<td align="center"><code>琴、棋、书、画</code></td>
</tr>
<tr>
<td align="center"><em>四大韵文</em></td>
<td align="center"><code>汉赋、唐诗、宋词、元曲</code></td>
</tr>
<tr>
<td align="center"><em>四大神兽</em></td>
<td align="center"><code>青龙、白虎、朱雀、玄武</code></td>
</tr>
<tr>
<td align="center"><em>四大瑞兽</em></td>
<td align="center"><code>龙、凤、龟、麒麟</code></td>
</tr>
<tr>
<td align="center"><em>国画四君子</em></td>
<td align="center"><code>梅、兰、竹、菊</code></td>
</tr>
<tr>
<td align="center"><em>四大民族英雄</em></td>
<td align="center"><code>岳飞、戚继光、郑成功、林则徐</code></td>
</tr>
<tr>
<td align="center"><em>对联</em></td>
<td align="center"><code>仄起平收</code></td>
</tr>
<tr>
<td align="center"><em>主谓宾定壮补</em></td>
<td align="center"><code>定语位于主宾前，谓前为壮谓后补，定的状地得后补。</code></td>
</tr>
<tr>
<td align="center"><em>历史朝代</em></td>
<td align="center"><code>夏、商、周[西周、东周(春秋、战国)]、秦、汉[西汉、新朝、玄汉、东汉]、三国时期[魏、蜀、吴]、两晋(西晋、东晋)、南北朝[南朝(宋、齐、梁、陈)、北朝(北魏、东魏、西魏、北齐、北周)]、隋、唐、五代[后梁、后唐、后晋、后汉、后周]、十国[前蜀、后蜀、吴、南唐、吴越、闽、楚、南汉、南平(荆南)、北汉]、宋[北宋、南宋]、辽、西夏、金、元、明、清、中华民国、中华人民共和国</code></td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">``</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>传统文化</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC、MVP、MVVM 架构的特点与区别</title>
    <url>/mvcmvpmvvm/</url>
    <content><![CDATA[<div class="note default no-icon"><p>关于MVC、MVP、MVVM这几种架构方式的理解。</p>
</div>
<span id="more"></span> 
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp; &emsp;前人种树，后人乘凉。关于MVC、MVP、MVVM这几种架构方式的理解，前辈们写了很多的解答，我结合几篇好文，总结了以下一点点内容。</p>
<p>&emsp; &emsp;软件的架构方式有很多种，从最开始的MVC模式，到MVP，然后到现在的MVVM，在不断的演化过程中其核心的思想就是降低各组件之间的耦合度，使得数据的流向更加的清晰明了。但并不是意味着一个比另一个高级，只是对于软件的架构方式有的不同的视角，针对不同的场景有了更多的选择方案。那么，软件架构到底是什么呢，他有什么作用呢？其实，<code>架构就相当于人的骨架，他决定了软件开发之后所有的操作是基于一种什么样的方式进行的，因此，他对于开发是至关重要的。</code></p>
<p>&emsp; &emsp;<code>(Model-View-Controller)</code>和<code>(Model-View-ViewModel)</code>在概念上都是基于分层的，将表现与数据分开的设计架构，M 和 V 基本上不是问题，但将这两个整合的中间这层可就有很多的学问，另外，除了 MVC 和 MVVM 外，还有一个叫做 MVP <code>(Model-View-Presenter)</code>的架构，这三个的设计概念非常类似，很容易会让人傻傻分不清楚……</p>
<p>&emsp; &emsp;我们先来看各个架构的设计原则好了。</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="MVC定义"><a href="#MVC定义" class="headerlink" title="MVC定义"></a>MVC定义</h3><p>&emsp; &emsp;首先是 MVC，顾名思义，MVC 是将 Model、View 和 Controller 分离，让彼此的职责能够明确的分开，这样不论是改 M、 V 还是 C，都可以确保另外两层可不用做任何修改，同时这样的分层也可以加强程序的可测试性，View 和 Model 基本上是相关的，但它们并不会有直接的相依关系，而是由 Controller 去决定 Model 产生的数据，然后丢给 View 去做呈现，也就是说，Controller 是 Model 和 View 之间的协调者，View 和 Model 不能直接沟通，以确保责任的分离。</p>
<ul>
<li><p>Model: 模型（用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法）</p>
</li>
<li><p>View: 视图（渲染页面）</p>
</li>
<li><p>Controller: 控制器（M和V之间的连接器，用于控制应用程序的流程，及页面的业务逻辑）</p>
</li>
</ul>
<blockquote>
<p>顺便贴一张关于前后端MVC架构的图片</p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="/mvcmvpmvvm/mvc.jpg" alt="前后端MVC" title="图源：底部原文B"><br></p>
<h3 id="MVC特点"><a href="#MVC特点" class="headerlink" title="MVC特点"></a>MVC特点</h3><p>&emsp; &emsp;MVC模式最初生根于服务器端的Web开发，后来渐渐能够胜任客户端Web开发，能够满足其复杂性和丰富性。<br>&emsp; &emsp;MVC模式的特点在于实现关注点分离，即应用程序中的数据模型与业务和展示逻辑解耦。在客户端web开发中，就是将模型(M-数据、操作数据)、视图(V-显示数据的HTML元素)之间实现代码分离，松散耦合，使之成为一个更容易开发、维护和测试的客户端应用程序。</p>
<ul>
<li><p>View 传送指令到 Controller。</p>
</li>
<li><p>Controller 完成业务逻辑后，要求 Model 改变状态。</p>
</li>
<li><p>Model 将新的数据发送到 View，用户得到反馈。</p>
</li>
</ul>
<h3 id="MVC优缺点"><a href="#MVC优缺点" class="headerlink" title="MVC优缺点"></a>MVC优缺点</h3><blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>优点是对于混乱的软件组织方式有了一个明确的组织方式，通过Control来掌控全局，同时将View展示和Model的变化分离开。</p>
</li>
<li><p>耦合性低，视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码。</p>
</li>
<li><p>重用性高</p>
</li>
<li><p>生命周期成本低</p>
</li>
<li><p>MVC使开发和维护用户接口的技术含量降低</p>
</li>
<li><p>可维护性高，分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。</p>
</li>
<li><p>部署快</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li><p>View和Model之间是直接进行交互的，也就是说View和Model之间是可以相互产生影响的，这样在代码中就必然会导致View和Model之间的耦合。</p>
</li>
<li><p>不适合小型，中等规模的应用程序，花费大量时间将MVC应用到规模并不是很大的应用程序通常会得不偿失。</p>
</li>
<li><p>视图与控制器间过于紧密连接，视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。</p>
</li>
<li><p>视图对模型数据的低效率访问，依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</p>
</li>
</ul>
<h3 id="MVC补充"><a href="#MVC补充" class="headerlink" title="MVC补充"></a>MVC补充</h3><ul>
<li>MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。</li>
</ul>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>MVC（Model–View–Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</li>
<li>在MVC中，M层处理数据，业务逻辑等；V层处理界面的显示结果；C层起到桥梁的作用，来控制V层和M层通信以此来达到分离视图显示和业务逻辑层。</li>
</ul>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ul>
<li><p>基本流程</p>
<ul>
<li>View接受用户的交互请求(url,ajax)</li>
<li>View将请求通过路由转交给特定的Controller</li>
<li>Controller操作Model进行数据请求，Model操作DB进行对应的数据操作（增删改查CRUD）。</li>
<li>Model返回结果，Controller返回数据给View渲染。</li>
<li>View渲染完成后，将数据结果呈现给用户。</li>
</ul>
</li>
<li><p>图解</p>
</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="/mvcmvpmvvm/mvcmore.png"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。</p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="MVVM定义"><a href="#MVVM定义" class="headerlink" title="MVVM定义"></a>MVVM定义</h3><p>&emsp; &emsp;再来是 MVVM，MVVM 的架构一样是 M、V 分离，但中间是以 VM (ViewModel) 来串接，这个 ViewModel 比较像是 View 的一个代理程序，它负责直接对 Model 做沟通，而 View 可以透过一些机制 (例如: Events，Databindings…) 来和 ViewModel 沟通以取得数据或将数据抛给 Model 做存取等工作，ViewModel 也可以作为和外部系统的代理程序，例如 Web Service 或是 REST Service 或是 Enterprise Services 等等，不过它和 MVC 不同的地方，就是 ViewModel 和 View 的黏合度比较高，因为 View 必须要透过 ViewModel 才可以取得 Model，而 ViewModel 又必须要处理来自 View 的通知讯息，所以虽然职责一样分明，但是却不像 MVC 那样可以扩展到整个系统组件都能用。如果 MVVM 要和 MVP 比较的话，MVVM 会比 MVP 更灵活一点。</p>
<h3 id="MVVM特点"><a href="#MVVM特点" class="headerlink" title="MVVM特点"></a>MVVM特点</h3><p>&emsp; &emsp;MVVM其实是对MVP的一种改进，他将Presenter替换成了ViewModel，并通过双向的数据绑定来实现视图和数据的交互。也就是说只需要将数据和视图绑定一次之后，那么之后当数据发生改变时就会自动的在UI上刷新而不需要我们自己进行手动刷新。在MVVM中，他尽可能的会简化数据流的走向，使其变得更加简洁明了。</p>
<h3 id="MVVM优缺点"><a href="#MVVM优缺点" class="headerlink" title="MVVM优缺点"></a>MVVM优缺点</h3><blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>可以使得数据流的走向更加的清晰明了，同时也简化了开发，数据和视图只需要进行一次绑定即可。</p>
</li>
<li><p>低耦合，视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</p>
</li>
<li><p>可重用性，可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</p>
</li>
<li><p>独立开发，开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。</p>
</li>
<li><p>可测试，界面向来是比较难于测试的，而现在测试可以针对ViewModel来写。</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>目前这种架构方式的实现方式比较不完善规范</li>
</ul>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><h3 id="MVP定义"><a href="#MVP定义" class="headerlink" title="MVP定义"></a>MVP定义</h3><p>&emsp; &emsp;接着是 MVP，MVP 一样也是职责分明，且 Model 与 View 分离的架构，但是这个 P (Presenter) 和 ViewModel 就很类似，不过就如同 Presenter (主持人) 这个字所代表的意义，所有主控 View 呈现的工作，都是由 Presenter 来做，而 View 本身只是 Presenter 所要使用的舞台而已，所以 View 原则上会相依于 Presenter，但是为了要做到关注点分离 (SoC 原则)，所以在 View 和 Presenter 间都会加入一个界面 (例如: IView)，然后以 IoC 的方式将 View 注射到 Presenter 中，而 Presenter 就使用接口所定义的方法去操控，而 View 就透过接口所定义的方法去呈现接口即可。但也因为受限于接口，所以 Presenter 只能依接口定义的动作去响应与处理，而不能再做更多的延伸功能，除非更改 View 的接口。</p>
<h3 id="MVP特点"><a href="#MVP特点" class="headerlink" title="MVP特点"></a>MVP特点</h3><ul>
<li>M、V、P之间双向通信。</li>
<li>View 与 Model 不通信，都通过 Presenter 传递。Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
<li>Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，这样就可以重用。+ 不仅如此，还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–从而不需要使用自动化的测试工具。</li>
</ul>
<h3 id="MVP优缺点"><a href="#MVP优缺点" class="headerlink" title="MVP优缺点"></a>MVP优缺点</h3><blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>优点是可以是得整个软件分层清晰，降低耦合度。</p>
</li>
<li><p>模型与视图完全分离，我们可以修改视图而不影响模型。</p>
</li>
<li><p>可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部。</p>
</li>
<li><p>我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。</p>
</li>
<li><p>如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li><p>缺点是需要加入Presenter来作为桥梁协调View和Model，同时也会导致Presenter变得很臃肿。</p>
</li>
<li><p>视图和Presenter的交互会过于频繁，使得他们的联系过于紧密。也就是说，一旦视图变更了，presenter也要变更。</p>
</li>
</ul>
<h2 id="案例总结"><a href="#案例总结" class="headerlink" title="案例总结"></a>案例总结</h2><p>&emsp; &emsp;以上的解释是不是看蒙圈了，OK，我又发现一篇（作者：这是你的玩具车吗）博文里面写的讲解，发现挺容易懂的，我们一起来看一下。</p>
<p>&emsp; &emsp;这三个架构的区别在“M与V联系”的部分。针对这一部分我们来做一个对比：</p>
<blockquote>
<p>Controller: 负责监听View的用户事件，得到数据后Controller做一些处理，然后渲染View。</p>
</blockquote>
<p>&emsp; &emsp;<em>当然，在一些后端MVC架构里，Model也可以直接渲染View模版，但这只是不同变种的实现，这里不多做讨论。<br>但是随时逻辑的复杂，这样的处理遇到了很难调试的问题。由于View一定要运行在UI环境下，而且Model或者Controller和View强耦合，没有办法单独验证应用逻辑的正确性。当出了问题之后，因为各个模块是耦合在一起的，也不能快速判断究竟是哪个模块出现的问题。因此，MVP模式出现了。</em></p>
<blockquote>
<p>Presenter: 比起Controller，Presenter会调用View层提供的接口去渲染Model。这样做有几点好处：</p>
</blockquote>
<ol>
<li>面向接口编程</li>
<li>更好的解耦</li>
<li>方便做单元测试</li>
</ol>
<p>&emsp; &emsp;<em>现在P和V解耦了，P可以自己做单元测试了。软件结构划分的更加清楚，逻辑清晰并方便调试。但是这一切都来自于一个前提：View层要提供接口。当一个UI复杂起来的时候，View层需要提供的接口是很多的，这本身也是一种开发调试的成本。所以，MVVM应运而生。</em></p>
<blockquote>
<p>ViewModel: 比起MVP中View需要自己提供API，MVVM在VM中构建一组状态数据（state data），作为View状态的抽象。然后通过双向数据绑定（data binding）使VM中的状态数据（state data）与View中的显示状态（screen state）保持一致。这样，VM中的展示逻辑只需要修改对应的状态数据，就可以控制View的状态，从而避免在View上开发大量的接口。</p>
</blockquote>
<p>&emsp; &emsp;<em>那么VM有没有什么缺点？有的，当UI比较简单的时候，使用VM就会使业务逻辑变得复杂，有过分设计的嫌疑。所以VM只适合复杂UI交互的项目。</em></p>
<blockquote>
<p>举个例子：</p>
</blockquote>
<p>&emsp; &emsp;我们的界面上原本没有任何东西，现在用户发出一个请求（点击按钮），界面上出现一张图片，或者一段文字。那么MVC、MVP、MVVM这三种架构都是如何处理的呢。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. View获取用户请求，通知Controller。</span><br><span class="line">2. Controller向后台Model发起请求</span><br><span class="line">3. Model获得该请求所需要的数据，传递给Controller。</span><br><span class="line">4. Controller拿到这些数据，可能做一些处理，然后拿处理好的数据渲染View。</span><br><span class="line">    MVC: 拿到UI节点，渲染这些数据</span><br><span class="line">    MVP: 通过View提供的接口渲染这些数据</span><br><span class="line">    MVVM: 无需操作，只要VM的数据变化，通过数据双向绑定，View直接随之变化。</span><br></pre></td></tr></table></figure>


<p>&emsp; &emsp;这样是不是就很容易懂了。</p>
<p>&emsp; &emsp;最后我想提的是，MVC 的包容度比 MVVM 和 MVP 要来的高，在 MVC 的 V 层，可以再进一步的包含 MVVM 或 MVP 的实作，而 C 层也可以使用 MVP (V 是输出的资料) 来进一步切割数据的流动与输出，M 层则可以类似 MVVM 的架构，当 V (组件) 有数据的异动时，VM 即可自动侦测到并更新 Model (数据库)。当然，多大的脚就穿多大的鞋，要用什么样的架构去设计，要与当时的系统环境与需求来决定，而不是只想着要用同一种架构去做所有的系统。</p>
<p>&emsp; &emsp;学习这些概念的作用是培养我们的思考方式，站在巨人的肩膀上，了解他们的设计理念，搞清他们为什么要这样做，万一以后碰到了一些更为复杂的情况，用现有的这些无法解决时，我们就可以顺着这样的思路，自己去进行架构设计，解决问题。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZpY3Rvcnl6bi9hcnRpY2xlL2RldGFpbHMvNzgzOTIxMjg=">原文A<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNTMxMDY3NA==">原文B<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>干垃圾</category>
      </categories>
      <tags>
        <tag>MVC、MVP、MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>设置网站夜间模式</title>
    <url>/darktheme/</url>
    <content><![CDATA[<div class="note danger no-icon"><p>超简单的给网站添加夜间模式</p>
</div>
<span id="more"></span> 

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> brightness = <span class="number">0</span>;<span class="comment">//显示遮罩</span></span><br><span class="line"><span class="keyword">let</span> div;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cover</span>(<span class="params">brightness</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">typeof</span> (div) === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;position:fixed;top:0;left:0;outline:50000px solid;z-index:99999;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  div.<span class="property">style</span>.<span class="property">outlineColor</span> = <span class="string">&#x27;rgba(0,0,0,&#x27;</span> + brightness + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;<span class="comment">//事件监听</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">altKey</span> &amp;&amp; e.<span class="property">keyCode</span> === <span class="number">90</span>) &#123;<span class="comment">//Alt+Z 关灯</span></span><br><span class="line">    <span class="title function_">cover</span>(brightness = <span class="number">0.3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">altKey</span> &amp;&amp; e.<span class="property">keyCode</span> === <span class="number">88</span>) &#123;<span class="comment">//Alt+X 开灯</span></span><br><span class="line">    <span class="title function_">cover</span>(brightness = <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">altKey</span> &amp;&amp; e.<span class="property">keyCode</span> === <span class="number">38</span>) &#123;<span class="comment">//Alt+↑ 亮度调高</span></span><br><span class="line">    <span class="keyword">if</span> (brightness - <span class="number">0.05</span> &gt; <span class="number">0.05</span>) &#123;</span><br><span class="line">      <span class="title function_">cover</span>(brightness -= <span class="number">0.05</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">altKey</span> &amp;&amp; e.<span class="property">keyCode</span> === <span class="number">40</span>) &#123;<span class="comment">//Alt+↓ 亮度调低</span></span><br><span class="line">    <span class="keyword">if</span> (brightness + <span class="number">0.05</span> &lt; <span class="number">0.95</span>) &#123;</span><br><span class="line">      <span class="title function_">cover</span>(brightness += <span class="number">0.05</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>夜间模式</tag>
      </tags>
  </entry>
  <entry>
    <title>英雄联盟常用快捷键</title>
    <url>/shortcutkey_lol/</url>
    <content><![CDATA[ <div class="note danger no-icon"><p>英雄联盟常用快捷键 </p>
</div>
<span id="more"></span>

<h1 id="英雄联盟常用快捷键"><a href="#英雄联盟常用快捷键" class="headerlink" title="英雄联盟常用快捷键"></a>英雄联盟常用快捷键</h1><p>（给lol玩家科普！）</p>
<table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>1～6</strong></td>
<td align="center">物品栏</td>
</tr>
<tr>
<td align="center"><strong>F1～F5</strong></td>
<td align="center">切换玩家视角</td>
</tr>
<tr>
<td align="center"><strong>空格</strong></td>
<td align="center">锁定自己视角</td>
</tr>
<tr>
<td align="center"><strong>T</strong></td>
<td align="center">表情</td>
</tr>
<tr>
<td align="center"><strong>P</strong></td>
<td align="center">商城</td>
</tr>
<tr>
<td align="center"><strong>B</strong></td>
<td align="center">回城</td>
</tr>
<tr>
<td align="center"><strong>G</strong></td>
<td align="center">警告信号</td>
</tr>
<tr>
<td align="center"><strong>V</strong></td>
<td align="center">撤退信号</td>
</tr>
<tr>
<td align="center"><strong>M</strong></td>
<td align="center">显示LoL大地图</td>
</tr>
<tr>
<td align="center"><strong>Z</strong></td>
<td align="center">显示聊天记录</td>
</tr>
<tr>
<td align="center"><strong>Y</strong></td>
<td align="center">锁定/解除锁定视角</td>
</tr>
<tr>
<td align="center"><strong>C</strong></td>
<td align="center">打开英雄属性界面</td>
</tr>
<tr>
<td align="center"><strong>L</strong></td>
<td align="center">切换小兵生命条显示方式</td>
</tr>
<tr>
<td align="center"><strong>S</strong></td>
<td align="center">停止命令（英雄停止一切他们的行动）</td>
</tr>
<tr>
<td align="center"><strong>H</strong></td>
<td align="center">等待命令（类似于停止，但是受周围触发事件影响）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+技能</strong></td>
<td align="center">快速升级技能</td>
</tr>
<tr>
<td align="center"><strong>Alt+技能</strong></td>
<td align="center">快速释放增益技能给自己</td>
</tr>
<tr>
<td align="center"><strong>鼠标放到队友的头像上+技能键</strong></td>
<td align="center">快速释放增益技能给鼠标放上的队友</td>
</tr>
<tr>
<td align="center"><strong>鼠标滚轮</strong></td>
<td align="center">使用鼠标滚轮，可以拉近或拉远游戏视角。</td>
</tr>
<tr>
<td align="center"><strong>Shift+Enter</strong></td>
<td align="center">发送全部消息</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+1或/joke</strong></td>
<td align="center">笑话快捷键</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+2或/taunt</strong></td>
<td align="center">嘲讽快捷键</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+3或/dance</strong></td>
<td align="center">跳舞快捷键</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+4或/laugh</strong></td>
<td align="center">大笑快捷键</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+6</strong></td>
<td align="center">向对手表示尊敬嘻嘻</td>
</tr>
<tr>
<td align="center"><strong>Tab</strong></td>
<td align="center">统计页/排行榜/计分板(松开即消失)</td>
</tr>
<tr>
<td align="center"><strong>ESC</strong></td>
<td align="center">呼出游戏菜单</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F</strong></td>
<td align="center">显示/隐藏FPS（帧数）与延迟</td>
</tr>
<tr>
<td align="center"><strong>Alt(R)+右键</strong></td>
<td align="center">移动宠物</td>
</tr>
<tr>
<td align="center"><strong>Shift+L</strong></td>
<td align="center">切换生命条显示方式</td>
</tr>
<tr>
<td align="center"><strong>Alt+鼠标拖动</strong></td>
<td align="center">快速信号(快捷键)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标拖动</strong></td>
<td align="center">快速信号(快捷键)建议多向队友发送黄色问号，表达对其的赞扬与崇拜~</td>
</tr>
<tr>
<td align="center"><strong>眼位标记</strong></td>
<td align="center">设置-热键-交流(建议设置Ctrl+Z)</td>
</tr>
<tr>
<td align="center"><strong>~</strong></td>
<td align="center">(<code>ESC</code>下面那颗键)仅以英雄为目标，越塔必用！</td>
</tr>
<tr>
<td align="center"><strong>D/F</strong></td>
<td align="center">购买隐藏装备</td>
</tr>
<tr>
<td align="center"><strong>Alt+F4</strong></td>
<td align="center">开启技能自动瞄准</td>
</tr>
<tr>
<td align="center"><strong>/r+空格</strong></td>
<td align="center">发给最后发给你私密消息的玩家</td>
</tr>
<tr>
<td align="center"><strong>/remake</strong></td>
<td align="center">重开指令</td>
</tr>
<tr>
<td align="center"><strong>/mute</strong></td>
<td align="center">屏蔽所有人(游戏获胜的必备法门)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>英雄联盟快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>函数与方法的区别</title>
    <url>/methodandfunction/</url>
    <content><![CDATA[<div class="note success no-icon"><p>函数与方法的区别</p>
</div>
<span id="more"></span> 

<p>&emsp;&emsp;其实吧，<strong>函数就是方法。</strong>函数（方法）并不是依附与类才能存在。函数并不只是在类中定义。这种直接在模块中而不是类中定义的函数（方法），叫做函数。<br>而方法（method），是依附于类的，他们定义在类中，是属于类的，但是他们本质上，还是一个函数。</p>
<blockquote>
<p>总而言之，我们暂且把一个函数（方法）定义为<code>苹果</code>。<code>苹果</code>在一个模块中，没有在类里面，那么他是函数。<code>苹果</code>在类中，且没有特殊的定义，那么他是一个普通方法，或者说类方法。<code>苹果</code>在类中，但是他是静态方法，那么他是函数。</p>
</blockquote>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>函数与方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows常用快捷键</title>
    <url>/shortcutkey_win/</url>
    <content><![CDATA[ <div class="note success no-icon"><p>Windows常用快捷键 </p>
</div>
<span id="more"></span>

<h1 id="Windows常用快捷键"><a href="#Windows常用快捷键" class="headerlink" title="Windows常用快捷键"></a>Windows常用快捷键</h1><p>（其中好多快捷键在许多编辑软件中，也是有效的，后面就不写了。）</p>
<table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>鼠标</strong></td>
<td align="center">鼠标双击选中一个字或词，<br>三击选中一行</td>
</tr>
<tr>
<td align="center"><strong>Alt+鼠标</strong></td>
<td align="center">竖排选定内容</td>
</tr>
<tr>
<td align="center"><strong>Alt+Tab</strong></td>
<td align="center">切换任务</td>
</tr>
<tr>
<td align="center"><strong>Alt+F4</strong></td>
<td align="center">瞬间转移(^o^)~</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+C</strong></td>
<td align="center">复制</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+V</strong></td>
<td align="center">粘贴</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+X</strong></td>
<td align="center">剪切</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Z</strong></td>
<td align="center">撤销上一步操作</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Y</strong></td>
<td align="center">重复（反撤销）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+S</strong></td>
<td align="center">保存</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+O</strong></td>
<td align="center">打开</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+W</strong></td>
<td align="center">关闭</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+N</strong></td>
<td align="center">新建</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F</strong></td>
<td align="center">查找</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+H</strong></td>
<td align="center">替换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+G/H</strong></td>
<td align="center">查找/替换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+A</strong></td>
<td align="center">全选</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+P</strong></td>
<td align="center">打印当前窗口</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+空格或Shift</strong></td>
<td align="center">中英文切换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift</strong></td>
<td align="center">输入法切换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+-或者+</strong></td>
<td align="center">放大、缩小</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标滚轮</strong></td>
<td align="center">放大、缩小</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标</strong></td>
<td align="center">多选，或者拖动复制。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Esc</strong></td>
<td align="center">任务管理器</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Alt+Delete或者.</strong></td>
<td align="center">打开安全选项</td>
</tr>
<tr>
<td align="center"><strong>Esc</strong></td>
<td align="center">退出或者关闭</td>
</tr>
<tr>
<td align="center"><strong>F2</strong></td>
<td align="center">重命名</td>
</tr>
<tr>
<td align="center"><strong>Tab</strong></td>
<td align="center">Tab本身作用很多，此处主要是说明重命名时可以使用Tab跳到下一个文件。</td>
</tr>
<tr>
<td align="center"><strong>F12</strong></td>
<td align="center">另存为</td>
</tr>
<tr>
<td align="center"><strong>Shift+方向键或者鼠标</strong></td>
<td align="center">选中内容</td>
</tr>
<tr>
<td align="center"><strong>Win</strong></td>
<td align="center">开始菜单</td>
</tr>
<tr>
<td align="center"><strong>Win+D</strong></td>
<td align="center">回到桌面，再按一次返回应用。</td>
</tr>
<tr>
<td align="center"><strong>Win+L</strong></td>
<td align="center">锁屏</td>
</tr>
<tr>
<td align="center"><strong>Win+R</strong></td>
<td align="center">运行 可以运行cmd，然后输入<br>（shutdown -s -t 3600）<br>实现定时关机，此处为一小时。</td>
</tr>
<tr>
<td align="center"><strong>Win+P</strong></td>
<td align="center">投影切换</td>
</tr>
<tr>
<td align="center"><strong>Win+V</strong></td>
<td align="center">WIN10剪贴板</td>
</tr>
<tr>
<td align="center"><strong>Win+G</strong></td>
<td align="center">WIN10 Xbox 自带录屏</td>
</tr>
<tr>
<td align="center"><strong>Win+M</strong></td>
<td align="center">最小化所有窗口</td>
</tr>
<tr>
<td align="center"><strong>Win+Shift+M</strong></td>
<td align="center">将最小化的窗口还原</td>
</tr>
<tr>
<td align="center"><strong>Win+Ctrl+D</strong></td>
<td align="center">WIN10创建虚拟桌面</td>
</tr>
<tr>
<td align="center"><strong>Win+Ctrl+方向键</strong></td>
<td align="center">WIN10切换桌面</td>
</tr>
<tr>
<td align="center"><strong>Win+E</strong></td>
<td align="center">资源管理器</td>
</tr>
<tr>
<td align="center"><strong>INSERT</strong></td>
<td align="center">插入内容</td>
</tr>
<tr>
<td align="center"><strong>DELETE</strong></td>
<td align="center">删除内容</td>
</tr>
<tr>
<td align="center"><strong>Shift+DELETE</strong></td>
<td align="center">永久删除某项</td>
</tr>
<tr>
<td align="center"><strong>PRTSC</strong></td>
<td align="center">截屏到剪贴板</td>
</tr>
<tr>
<td align="center"><strong>其他截屏</strong></td>
<td align="center">QQ截屏：<strong>Ctrl+Alt+A</strong> / 微信截屏：<strong>Alt+A</strong> <br> 自带截屏：直接按截屏键PRTSC或者开始菜单搜索(截图工具、剪取工具) <br> win10: <strong>WIN+Shift+S</strong> 任意截图、<strong>WIN+W</strong> 全屏截图并可使用手写笔</td>
</tr>
<tr>
<td align="center"><strong>Alt+X</strong></td>
<td align="center">本站的亮度最高</td>
</tr>
<tr>
<td align="center"><strong>Alt+↑</strong></td>
<td align="center">本站的亮度增加</td>
</tr>
<tr>
<td align="center"><strong>Alt+Z</strong></td>
<td align="center">本站的亮度最低</td>
</tr>
<tr>
<td align="center"><strong>Alt+↓</strong></td>
<td align="center">本站的亮度减小</td>
</tr>
<tr>
<td align="center"><strong>Others</strong></td>
<td align="center">在桌面上，键盘直接输入存在的文件夹名称（英文），可以快速选中文件，再按<code>enter</code>可以快速打开文件，<code>F2</code>可以重命名文件。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Windows快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Office常用快捷键</title>
    <url>/shortcutkey_office/</url>
    <content><![CDATA[ <div class="note default no-icon"><p>Office常用快捷键 </p>
</div>
<span id="more"></span>

<h1 id="Office常用快捷键"><a href="#Office常用快捷键" class="headerlink" title="Office常用快捷键"></a>Office常用快捷键</h1><h2 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h2><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Alt+鼠标</strong></td>
<td align="center">竖排选定内容</td>
</tr>
<tr>
<td align="center"><strong>Alt+Shift+D</strong></td>
<td align="center">快速插入日期</td>
</tr>
<tr>
<td align="center"><strong>Alt+Shift+T</strong></td>
<td align="center">快速插入时间</td>
</tr>
<tr>
<td align="center"><strong>Alt+Ctrl+C</strong></td>
<td align="center">版权符号</td>
</tr>
<tr>
<td align="center"><strong>Alt+Ctrl+R</strong></td>
<td align="center">注册商标符号</td>
</tr>
<tr>
<td align="center"><strong>Alt+Ctrl+T</strong></td>
<td align="center">商标符号</td>
</tr>
<tr>
<td align="center"><strong>Alt+Ctrl+.</strong></td>
<td align="center">省略号</td>
</tr>
<tr>
<td align="center"><strong>Alt+Ctrl+.M</strong></td>
<td align="center">插入批注</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+A</strong></td>
<td align="center">全选</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+G</strong></td>
<td align="center">查找文字、格式和特殊项</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+B</strong></td>
<td align="center">使字符变为粗体</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+I</strong></td>
<td align="center">使字符变为斜体</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+U</strong></td>
<td align="center">为字符添加下划线</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F</strong></td>
<td align="center">搜索</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+H</strong></td>
<td align="center">替换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+K</strong></td>
<td align="center">加入超链接</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+P</strong></td>
<td align="center">打印</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+C</strong></td>
<td align="center">复制</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+V</strong></td>
<td align="center">粘贴</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+X</strong></td>
<td align="center">剪切</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Z</strong></td>
<td align="center">撤销</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Y</strong></td>
<td align="center">重复，反撤销。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+1</strong></td>
<td align="center">单倍行距</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+2</strong></td>
<td align="center">双倍行距</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+5</strong></td>
<td align="center">1.5倍行距</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+E</strong></td>
<td align="center">居中</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+L</strong></td>
<td align="center">居左</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+R</strong></td>
<td align="center">居右</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+[</strong></td>
<td align="center">减小字号</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+]</strong></td>
<td align="center">增加字号</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Enter</strong></td>
<td align="center">换页符</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标</strong></td>
<td align="center">多选或者拖动复制</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+D</strong></td>
<td align="center">分散对齐</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+M</strong></td>
<td align="center">取消左侧段落缩进</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+F9</strong></td>
<td align="center">删除超链接</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+N</strong></td>
<td align="center">清除格式</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+C</strong></td>
<td align="center">格式刷复制</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+V</strong></td>
<td align="center">格式刷粘贴</td>
</tr>
<tr>
<td align="center"><strong>F12</strong></td>
<td align="center">另存为</td>
</tr>
<tr>
<td align="center"><strong>Shift+F3</strong></td>
<td align="center">切换大小写</td>
</tr>
<tr>
<td align="center"><strong>Shift+Enter</strong></td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center"><strong>Shift+方向键</strong></td>
<td align="center">选中文字</td>
</tr>
</tbody></table>
<h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Alt+；</strong></td>
<td align="center">只选取显示的行，隐藏行不选取。</td>
</tr>
<tr>
<td align="center"><strong>Alt+`</strong></td>
<td align="center">显示“样式”对话框</td>
</tr>
<tr>
<td align="center"><strong>Alt+O+R+A</strong></td>
<td align="center">自动调整行高</td>
</tr>
<tr>
<td align="center"><strong>Alt+O+C+A</strong></td>
<td align="center">自动调整列宽</td>
</tr>
<tr>
<td align="center"><strong>Alt+Enter</strong></td>
<td align="center">单元格内强制换行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+PageDown</strong></td>
<td align="center">下一张工作表</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+PageUp</strong></td>
<td align="center">上一张工作表</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+空格</strong></td>
<td align="center">选中整列</td>
</tr>
<tr>
<td align="center"><strong>Shift+空格</strong></td>
<td align="center">选中整行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F1</strong></td>
<td align="center">显示隐藏功能区</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+5</strong></td>
<td align="center">应用或取消删除线</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+1</strong></td>
<td align="center">显示“单元格格式”对话框</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+(</strong></td>
<td align="center">快速隐藏行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+)</strong></td>
<td align="center">快速隐藏列</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+；</strong></td>
<td align="center">快速插入日期</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+；</strong></td>
<td align="center">快速插入时间</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+&amp;</strong></td>
<td align="center">为选定的单元格区域加上边框线</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift++</strong></td>
<td align="center">插入空白单元格</td>
</tr>
<tr>
<td align="center"><strong>ctrl+shift+~</strong></td>
<td align="center">应用“常规”数字格式</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+#</strong></td>
<td align="center">应用含年，月，日的“日期”格式</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+$</strong></td>
<td align="center">应用带两个小数位的“货币”格式<br>（负数在括号内）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+%</strong></td>
<td align="center">应用不带小数位的“百分比”格式</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+^</strong></td>
<td align="center">应用带两位小数位的“科学记数”数字格式</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+!</strong></td>
<td align="center">应用带两位小数位，使用千位分隔符且<br>负数用负号（-）表示的“数字”格式。</td>
</tr>
<tr>
<td align="center"><strong>F11</strong></td>
<td align="center">快速插入图表</td>
</tr>
<tr>
<td align="center"><strong>shift+F3</strong></td>
<td align="center">在公式中，显示“插入函数”对话框。</td>
</tr>
<tr>
<td align="center"><strong>Shift+Ctrl+↓</strong></td>
<td align="center">选中需要求和的区域</td>
</tr>
<tr>
<td align="center"><strong>Alt+=</strong></td>
<td align="center">求和</td>
</tr>
<tr>
<td align="center"><strong>Shift+F5</strong></td>
<td align="center">显示“查找”对话框。</td>
</tr>
<tr>
<td align="center"><strong>Shift+F11</strong></td>
<td align="center">新建工作表</td>
</tr>
</tbody></table>
<h2 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h2><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Ctrl+J</strong></td>
<td align="center">段落两端对齐(放映时)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+A</strong></td>
<td align="center">显示鼠标指针(放映时)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+H</strong></td>
<td align="center">隐藏鼠标指针(放映时)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+G</strong></td>
<td align="center">打开网格参考线对话框</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+W</strong></td>
<td align="center">关闭当前文件</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+P</strong></td>
<td align="center">将指针改为注释笔(放映时)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标左键(放映时)</strong></td>
<td align="center">鼠标变亮点</td>
</tr>
<tr>
<td align="center"><strong>E(放映时)</strong></td>
<td align="center">擦除注释</td>
</tr>
<tr>
<td align="center"><strong>W(放映时)</strong></td>
<td align="center">白屏</td>
</tr>
<tr>
<td align="center"><strong>B(放映时)</strong></td>
<td align="center">黑屏</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+等号</strong></td>
<td align="center">应用下标格式(自动调整间距)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+加号</strong></td>
<td align="center">应用上标格式(自动调整间距)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+G</strong></td>
<td align="center">组合对象</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+H</strong></td>
<td align="center">解除组合</td>
</tr>
<tr>
<td align="center"><strong>Esc</strong></td>
<td align="center">退出放映</td>
</tr>
<tr>
<td align="center"><strong>按住鼠标左右键2秒</strong></td>
<td align="center">回到第一张</td>
</tr>
<tr>
<td align="center"><strong>F5</strong></td>
<td align="center">从头放映</td>
</tr>
<tr>
<td align="center"><strong>Shift+F5</strong></td>
<td align="center">从当前开始放映</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Office快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse常用快捷键</title>
    <url>/shortcutkey_eclipse/</url>
    <content><![CDATA[ <div class="note danger no-icon"><p>Eclipse常用快捷键</p>
</div>
<span id="more"></span>


<h1 id="Eclipse常用快捷键"><a href="#Eclipse常用快捷键" class="headerlink" title="Eclipse常用快捷键"></a>Eclipse常用快捷键</h1><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Alt+/</strong></td>
<td align="center">代码提示</td>
</tr>
<tr>
<td align="center"><strong>Alt+上下方向键</strong></td>
<td align="center">移动当前行</td>
</tr>
<tr>
<td align="center"><strong>Alt+Enter</strong></td>
<td align="center">显示当前选择资源的属性</td>
</tr>
<tr>
<td align="center"><strong>Alt+Shift+R</strong></td>
<td align="center">重命名</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+1</strong></td>
<td align="center">快速修复</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+D</strong></td>
<td align="center">删除当前行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Alt+上下方向键</strong></td>
<td align="center">复制当前行到上或下一行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F</strong></td>
<td align="center">当前文件中查找并替换</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+H</strong></td>
<td align="center">搜索</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+F</strong></td>
<td align="center">整理代码，代码格式化。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+X</strong></td>
<td align="center">把当前选中的文本全部变为大写</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Y</strong></td>
<td align="center">把当前选中的文本全部变为小写</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+/</strong></td>
<td align="center">注释当前行或选中的行,再按则取消注释。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+M</strong></td>
<td align="center">添加类的import导入</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+O</strong></td>
<td align="center">组织类的import导入，<br>既有Ctrl+Shift+M的作用，又可以帮你<br>去除没用的导入，很有用</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+T</strong></td>
<td align="center">搜索类（包括工程和关联的第三jar包）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+R</strong></td>
<td align="center">搜索工程中的文件</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+PageUp/PageDown</strong></td>
<td align="center">在编辑器中，切换已经打开的文件</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F11</strong></td>
<td align="center">快速执行程序（第一次就要设置）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+/</strong></td>
<td align="center">段注释</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift</strong></td>
<td align="center">取消段注释</td>
</tr>
<tr>
<td align="center"><strong>F3</strong></td>
<td align="center">跳转到声明处</td>
</tr>
<tr>
<td align="center"><strong>F5</strong></td>
<td align="center">单步跳入</td>
</tr>
<tr>
<td align="center"><strong>F6</strong></td>
<td align="center">单步跳过</td>
</tr>
<tr>
<td align="center"><strong>F7</strong></td>
<td align="center">单步返回</td>
</tr>
<tr>
<td align="center"><strong>F8</strong></td>
<td align="center">继续</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Enter</strong></td>
<td align="center">在当前行插入空行</td>
</tr>
<tr>
<td align="center"><strong>Shift+Enter</strong></td>
<td align="center">在当前行的下一行插入空行</td>
</tr>
<tr>
<td align="center"><strong>Shift+方向键</strong></td>
<td align="center">选中文字</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Eclipse快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器常用快捷键</title>
    <url>/shortcutkey_chrome/</url>
    <content><![CDATA[ <div class="note info no-icon"><p>Chrome常用快捷键 </p>
</div>
<span id="more"></span>


<h1 id="Chrome常用快捷键"><a href="#Chrome常用快捷键" class="headerlink" title="Chrome常用快捷键"></a>Chrome常用快捷键</h1><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Alt+Home</strong></td>
<td align="center">在当前标签页打开主页</td>
</tr>
<tr>
<td align="center"><strong>Alt+←</strong></td>
<td align="center">后退/也可使用鼠标前后键或者Backspace[但是Chrome新版为防止误操作已取消，可安装(Go Back With Backspace)扩展实现。]</td>
</tr>
<tr>
<td align="center"><strong>Alt+→</strong></td>
<td align="center">前进/鼠标前后键实现前进后退</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标点击</strong></td>
<td align="center">后台打开此链接，不离开原页面。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+N</strong></td>
<td align="center">打开新的标签页</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+T</strong></td>
<td align="center">打开新的标签</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+W</strong></td>
<td align="center">关闭当前标签</td>
</tr>
<tr>
<td align="center"><strong>Ctrl++</strong></td>
<td align="center">放大网页内容</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+-</strong></td>
<td align="center">缩小网页内容</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标滚轮</strong></td>
<td align="center">放大或者缩小网页内容</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+0</strong></td>
<td align="center">将网页所有内容恢复默认大小</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+1~8</strong></td>
<td align="center">跳到特定标签页</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+9</strong></td>
<td align="center">跳到最后一个标签页</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+U</strong></td>
<td align="center">显示当前网页源代码</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+D</strong></td>
<td align="center">将当前网页保存为书签</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+Delete</strong></td>
<td align="center">清楚浏览数据</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+T</strong></td>
<td align="center">重新打开最后关闭的标签页，<br>并跳转到该标签页。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Tab</strong></td>
<td align="center">切换标签页</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F4</strong></td>
<td align="center">关闭当前标签页</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F5</strong></td>
<td align="center">强制刷新</td>
</tr>
<tr>
<td align="center"><strong>F3</strong></td>
<td align="center">查找</td>
</tr>
<tr>
<td align="center"><strong>F5</strong></td>
<td align="center">刷新</td>
</tr>
<tr>
<td align="center"><strong>F6</strong></td>
<td align="center">地址栏</td>
</tr>
<tr>
<td align="center"><strong>F11</strong></td>
<td align="center">全屏</td>
</tr>
<tr>
<td align="center"><strong>F12</strong></td>
<td align="center">检查</td>
</tr>
<tr>
<td align="center"><strong>空格</strong></td>
<td align="center">向下滚动网页内容，一次一个屏幕。</td>
</tr>
<tr>
<td align="center"><strong>Shift+回车</strong></td>
<td align="center">console换行</td>
</tr>
<tr>
<td align="center"><strong>Shift+鼠标点击</strong></td>
<td align="center">用新标签页打开此链接</td>
</tr>
<tr>
<td align="center"><strong>Shift+空格</strong></td>
<td align="center">向上滚动网页内容，一次一个屏幕。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>Chrome快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>常用颜色表</title>
    <url>/colorrgb/</url>
    <content><![CDATA[<div class="note no-icon"><p>这是我get到的常用传统名称色卡及RGB值。</p>
</div>
<span id="more"></span> 

<div align="center"><strong>常用颜色参考表</strong></div><table><tbody><tr align="center"><td><strong>颜色</strong></td><td><strong>英文代码</strong></td><td><strong>形象描述</strong></td><td><strong>十六进制</strong></td><td><strong>RGB</strong></td></tr><tr><td bgcolor="#ffb6c1">　</td><td>LightPink</td><td>浅粉红</td><td>#FFB6C1</td><td>255,182,193</td></tr><tr><td bgcolor="#ffc0cb">　</td><td>Pink</td><td>粉红</td><td>#FFC0CB</td><td>255,192,203</td></tr><tr><td bgcolor="#dc143c">　</td><td>Crimson</td><td>猩红</td><td>#DC143C</td><td>220,20,60</td></tr><tr><td bgcolor="#fff0f5">　</td><td>LavenderBlush</td><td>脸红的淡紫色</td><td>#FFF0F5</td><td>255,240,245</td></tr><tr><td bgcolor="#db7093">　</td><td>PaleVioletRed</td><td>苍白的紫罗兰红色</td><td>#DB7093</td><td>219,112,147</td></tr><tr><td bgcolor="#ff69b4">　</td><td>HotPink</td><td>热情的粉红</td><td>#FF69B4</td><td>255,105,180</td></tr><tr><td bgcolor="#ff1493">　</td><td>DeepPink</td><td>深粉色</td><td>#FF1493</td><td>255,20,147</td></tr><tr><td bgcolor="#c71585">　</td><td>MediumVioletRed</td><td>适中的紫罗兰红色</td><td>#C71585</td><td>199,21,133</td></tr><tr><td bgcolor="#da70d6">　</td><td>Orchid</td><td>兰花的紫色</td><td>#DA70D6</td><td>218,112,214</td></tr><tr><td bgcolor="#d8bfd8">　</td><td>Thistle</td><td>蓟</td><td>#D8BFD8</td><td>216,191,216</td></tr><tr><td bgcolor="#dda0dd">　</td><td>plum</td><td>李子</td><td>#DDA0DD</td><td>221,160,221</td></tr><tr><td bgcolor="#ee82ee">　</td><td>Violet</td><td>紫罗兰</td><td>#EE82EE</td><td>238,130,238</td></tr><tr><td bgcolor="#ff00ff">　</td><td>Magenta</td><td>洋红</td><td>#FF00FF</td><td>255,0,255</td></tr><tr><td bgcolor="#ff00ff">　</td><td>Fuchsia</td><td>灯笼海棠(紫红色)</td><td>#FF00FF</td><td>255,0,255</td></tr><tr><td bgcolor="#8b008b">　</td><td>DarkMagenta</td><td>深洋红色</td><td>#8B008B</td><td>139,0,139</td></tr><tr><td bgcolor="#800080">　</td><td>Purple</td><td>紫色</td><td>#800080</td><td>128,0,128</td></tr><tr><td bgcolor="#ba55d3">　</td><td>MediumOrchid</td><td>适中的兰花紫</td><td>#BA55D3</td><td>186,85,211</td></tr><tr><td bgcolor="#9400d3">　</td><td>DarkVoilet</td><td>深紫罗兰色</td><td>#9400D3</td><td>148,0,211</td></tr><tr><td bgcolor="#9932cc">　</td><td>DarkOrchid</td><td>深兰花紫</td><td>#9932CC</td><td>153,50,204</td></tr><tr><td bgcolor="#4b0082">　</td><td>Indigo</td><td>靛青</td><td>#4B0082</td><td>75,0,130</td></tr><tr><td bgcolor="#8a2be2">　</td><td>BlueViolet</td><td>深紫罗兰的蓝色</td><td>#8A2BE2</td><td>138,43,226</td></tr><tr><td bgcolor="#9370db">　</td><td>MediumPurple</td><td>适中的紫色</td><td>#9370DB</td><td>147,112,219</td></tr><tr><td bgcolor="#7b68ee">　</td><td>MediumSlateBlue</td><td>适中的板岩暗蓝灰色</td><td>#7B68EE</td><td>123,104,238</td></tr><tr><td bgcolor="#6a5acd">　</td><td>SlateBlue</td><td>板岩暗蓝灰色</td><td>#6A5ACD</td><td>106,90,205</td></tr><tr><td bgcolor="#483d8b">　</td><td>DarkSlateBlue</td><td>深岩暗蓝灰色</td><td>#483D8B</td><td>72,61,139</td></tr><tr><td bgcolor="#e6e6fa">　</td><td>Lavender</td><td>熏衣草花的淡紫色</td><td>#E6E6FA</td><td>230,230,250</td></tr><tr><td bgcolor="#f8f8ff">　</td><td>GhostWhite</td><td>幽灵的白色</td><td>#F8F8FF</td><td>248,248,255</td></tr><tr><td bgcolor="#0000ff">　</td><td>Blue</td><td>纯蓝</td><td>#0000FF</td><td>0,0,255</td></tr><tr><td bgcolor="#0000cd">　</td><td>MediumBlue</td><td>适中的蓝色</td><td>#0000CD</td><td>0,0,205</td></tr><tr><td bgcolor="#191970">　</td><td>MidnightBlue</td><td>午夜的蓝色</td><td>#191970</td><td>25,25,112</td></tr><tr><td bgcolor="#00008b">　</td><td>DarkBlue</td><td>深蓝色</td><td>#00008B</td><td>0,0,139</td></tr><tr><td bgcolor="#000080">　</td><td>Navy</td><td>海军蓝</td><td>#000080</td><td>0,0,128</td></tr><tr><td bgcolor="#4169e1">　</td><td>RoyalBlue</td><td>皇家蓝</td><td>#4169E1</td><td>65,105,225</td></tr><tr><td bgcolor="#6495ed">　</td><td>CornflowerBlue</td><td>矢车菊的蓝色</td><td>#6495ED</td><td>100,149,237</td></tr><tr><td bgcolor="#b0c4de">　</td><td>LightSteelBlue</td><td>淡钢蓝</td><td>#B0C4DE</td><td>176,196,222</td></tr><tr><td bgcolor="#778899">　</td><td>LightSlateGray</td><td>浅石板灰</td><td>#778899</td><td>119,136,153</td></tr><tr><td bgcolor="#708090">　</td><td>SlateGray</td><td>石板灰</td><td>#708090</td><td>112,128,144</td></tr><tr><td bgcolor="#1e90ff">　</td><td>DoderBlue</td><td>道奇蓝</td><td>#1E90FF</td><td>30,144,255</td></tr><tr><td bgcolor="#f0f8ff">　</td><td>AliceBlue</td><td>爱丽丝蓝</td><td>#F0F8FF</td><td>240,248,255</td></tr><tr><td bgcolor="#4682b4">　</td><td>SteelBlue</td><td>钢蓝</td><td>#4682B4</td><td>70,130,180</td></tr><tr><td bgcolor="#87cefa">　</td><td>LightSkyBlue</td><td>淡蓝色</td><td>#87CEFA</td><td>135,206,250</td></tr><tr><td bgcolor="#87ceeb">　</td><td>SkyBlue</td><td>天蓝色</td><td>#87CEEB</td><td>135,206,235</td></tr><tr><td bgcolor="#00bfff">　</td><td>DeepSkyBlue</td><td>深天蓝</td><td>#00BFFF</td><td>0,191,255</td></tr><tr><td bgcolor="#add8e6">　</td><td>LightBLue</td><td>淡蓝</td><td>#ADD8E6</td><td>173,216,230</td></tr><tr><td bgcolor="#b0e0e6">　</td><td>PowDerBlue</td><td>火药蓝</td><td>#B0E0E6</td><td>176,224,230</td></tr><tr><td bgcolor="#5f9ea0">　</td><td>CadetBlue</td><td>军校蓝</td><td>#5F9EA0</td><td>95,158,160</td></tr><tr><td bgcolor="#f0ffff">　</td><td>Azure</td><td>蔚蓝色</td><td>#F0FFFF</td><td>240,255,255</td></tr><tr><td bgcolor="#e1ffff">　</td><td>LightCyan</td><td>淡青色</td><td>#E1FFFF</td><td>225,255,255</td></tr><tr><td bgcolor="#afeeee">　</td><td>PaleTurquoise</td><td>苍白的绿宝石</td><td>#AFEEEE</td><td>175,238,238</td></tr><tr><td bgcolor="#00ffff">　</td><td>Cyan</td><td>青色</td><td>#00FFFF</td><td>0,255,255</td></tr><tr><td bgcolor="#00ffff">　</td><td>Aqua</td><td>水绿色</td><td>#00FFFF</td><td>0,255,255</td></tr><tr><td bgcolor="#00ced1">　</td><td>DarkTurquoise</td><td>深绿宝石</td><td>#00CED1</td><td>0,206,209</td></tr><tr><td bgcolor="#2f4f4f">　</td><td>DarkSlateGray</td><td>深石板灰</td><td>#2F4F4F</td><td>47,79,79</td></tr><tr><td bgcolor="#008b8b">　</td><td>DarkCyan</td><td>深青色</td><td>#008B8B</td><td>0,139,139</td></tr><tr><td bgcolor="#008080">　</td><td>Teal</td><td>水鸭色</td><td>#008080</td><td>0,128,128</td></tr><tr><td bgcolor="#48d1cc">　</td><td>MediumTurquoise</td><td>适中的绿宝石</td><td>#48D1CC</td><td>72,209,204</td></tr><tr><td bgcolor="#20b2aa">　</td><td>LightSeaGreen</td><td>浅海洋绿</td><td>#20B2AA</td><td>32,178,170</td></tr><tr><td bgcolor="#40e0d0">　</td><td>Turquoise</td><td>绿宝石</td><td>#40E0D0</td><td>64,224,208</td></tr><tr><td bgcolor="#7fffaa">　</td><td>Auqamarin</td><td>绿玉\碧绿色</td><td>#7FFFAA</td><td>127,255,170</td></tr><tr><td bgcolor="#00fa9a">　</td><td>MediumAquamarine</td><td>适中的碧绿色</td><td>#00FA9A</td><td>0,250,154</td></tr><tr><td bgcolor="#00ff7f">　</td><td>MediumSpringGreen</td><td>适中的春天的绿色</td><td>#00FF7F</td><td>0,255,127</td></tr><tr><td bgcolor="#f5fffa">　</td><td>MintCream</td><td>薄荷奶油</td><td>#F5FFFA</td><td>245,255,250</td></tr><tr><td bgcolor="#3cb371">　</td><td>SpringGreen</td><td>春天的绿色</td><td>#3CB371</td><td>60,179,113</td></tr><tr><td bgcolor="#2e8b57">　</td><td>SeaGreen</td><td>海洋绿</td><td>#2E8B57</td><td>46,139,87</td></tr><tr><td bgcolor="#f0fff0">　</td><td>Honeydew</td><td>蜂蜜</td><td>#F0FFF0</td><td>240,255,240</td></tr><tr><td bgcolor="#90ee90">　</td><td>LightGreen</td><td>淡绿色</td><td>#90EE90</td><td>144,238,144</td></tr><tr><td bgcolor="#98fb98">　</td><td>PaleGreen</td><td>苍白的绿色</td><td>#98FB98</td><td>152,251,152</td></tr><tr><td bgcolor="#8fbc8f">　</td><td>DarkSeaGreen</td><td>深海洋绿</td><td>#8FBC8F</td><td>143,188,143</td></tr><tr><td bgcolor="#32cd32">　</td><td>LimeGreen</td><td>酸橙绿</td><td>#32CD32</td><td>50,205,50</td></tr><tr><td bgcolor="#00ff00">　</td><td>Lime</td><td>酸橙色</td><td>#00FF00</td><td>0,255,0</td></tr><tr><td bgcolor="#228b22">　</td><td>ForestGreen</td><td>森林绿</td><td>#228B22</td><td>34,139,34</td></tr><tr><td bgcolor="#008000">　</td><td>Green</td><td>纯绿</td><td>#008000</td><td>0,128,0</td></tr><tr><td bgcolor="#006400">　</td><td>DarkGreen</td><td>深绿色</td><td>#006400</td><td>0,100,0</td></tr><tr><td bgcolor="#7fff00">　</td><td>Chartreuse</td><td>查特酒绿</td><td>#7FFF00</td><td>127,255,0</td></tr><tr><td bgcolor="#7cfc00">　</td><td>LawnGreen</td><td>草坪绿</td><td>#7CFC00</td><td>124,252,0</td></tr><tr><td bgcolor="#adff2f">　</td><td>GreenYellow</td><td>绿黄色</td><td>#ADFF2F</td><td>173,255,47</td></tr><tr><td bgcolor="#556b2f">　</td><td>OliveDrab</td><td>橄榄土褐色</td><td>#556B2F</td><td>85,107,47</td></tr><tr><td bgcolor="#f5f5dc">　</td><td>Beige</td><td>米色(浅褐色)</td><td>#F5F5DC</td><td>245,245,220</td></tr><tr><td bgcolor="#fafad2">　</td><td>LightGoldenrodYellow</td><td>浅秋麒麟黄</td><td>#FAFAD2</td><td>250,250,210</td></tr><tr><td bgcolor="#fffff0">　</td><td>Ivory</td><td>象牙</td><td>#FFFFF0</td><td>255,255,240</td></tr><tr><td bgcolor="#ffffe0">　</td><td>LightYellow</td><td>浅黄色</td><td>#FFFFE0</td><td>255,255,224</td></tr><tr><td bgcolor="#ffff00">　</td><td>Yellow</td><td>纯黄</td><td>#FFFF00</td><td>255,255,0</td></tr><tr><td bgcolor="#808000">　</td><td>Olive</td><td>橄榄</td><td>#808000</td><td>128,128,0</td></tr><tr><td bgcolor="#bdb76b">　</td><td>DarkKhaki</td><td>深卡其布</td><td>#BDB76B</td><td>189,183,107</td></tr><tr><td bgcolor="#fffacd">　</td><td>LemonChiffon</td><td>柠檬薄纱</td><td>#FFFACD</td><td>255,250,205</td></tr><tr><td bgcolor="#eee8aa">　</td><td>PaleGodenrod</td><td>灰秋麒麟</td><td>#EEE8AA</td><td>238,232,170</td></tr><tr><td bgcolor="#f0e68c">　</td><td>Khaki</td><td>卡其布</td><td>#F0E68C</td><td>240,230,140</td></tr><tr><td bgcolor="#ffd700">　</td><td>Gold</td><td>金</td><td>#FFD700</td><td>255,215,0</td></tr><tr><td bgcolor="#fff8dc">　</td><td>Cornislk</td><td>玉米色</td><td>#FFF8DC</td><td>255,248,220</td></tr><tr><td bgcolor="#daa520">　</td><td>GoldEnrod</td><td>秋麒麟</td><td>#DAA520</td><td>218,165,32</td></tr><tr><td bgcolor="#fffaf0">　</td><td>FloralWhite</td><td>花的白色</td><td>#FFFAF0</td><td>255,250,240</td></tr><tr><td bgcolor="#fdf5e6">　</td><td>OldLace</td><td>老饰带</td><td>#FDF5E6</td><td>253,245,230</td></tr><tr><td bgcolor="#f5deb3">　</td><td>Wheat</td><td>小麦色</td><td>#F5DEB3</td><td>245,222,179</td></tr><tr><td bgcolor="#ffe4b5">　</td><td>Moccasin</td><td>鹿皮鞋</td><td>#FFE4B5</td><td>255,228,181</td></tr><tr><td bgcolor="#ffa500">　</td><td>Orange</td><td>橙色</td><td>#FFA500</td><td>255,165,0</td></tr><tr><td bgcolor="#ffefd5">　</td><td>PapayaWhip</td><td>番木瓜</td><td>#FFEFD5</td><td>255,239,213</td></tr><tr><td bgcolor="#ffebcd">　</td><td>BlanchedAlmond</td><td>漂白的杏仁</td><td>#FFEBCD</td><td>255,235,205</td></tr><tr><td bgcolor="#ffdead">　</td><td>NavajoWhite</td><td>纳瓦霍白</td><td>#FFDEAD</td><td>255,222,173</td></tr><tr><td bgcolor="#faebd7">　</td><td>AntiqueWhite</td><td>古代的白色</td><td>#FAEBD7</td><td>250,235,215</td></tr><tr><td bgcolor="#d2b48c">　</td><td>Tan</td><td>晒黑</td><td>#D2B48C</td><td>210,180,140</td></tr><tr><td bgcolor="#deb887">　</td><td>BrulyWood</td><td>结实的树</td><td>#DEB887</td><td>222,184,135</td></tr><tr><td bgcolor="#ffe4c4">　</td><td>Bisque</td><td>(浓汤)乳脂,番茄等</td><td>#FFE4C4</td><td>255,228,196</td></tr><tr><td bgcolor="#ff8c00">　</td><td>DarkOrange</td><td>深橙色</td><td>#FF8C00</td><td>255,140,0</td></tr><tr><td bgcolor="#faf0e6">　</td><td>Linen</td><td>亚麻布</td><td>#FAF0E6</td><td>250,240,230</td></tr><tr><td bgcolor="#cd853f">　</td><td>Peru</td><td>秘鲁</td><td>#CD853F</td><td>205,133,63</td></tr><tr><td bgcolor="#ffdab9">　</td><td>PeachPuff</td><td>桃色</td><td>#FFDAB9</td><td>255,218,185</td></tr><tr><td bgcolor="#f4a460">　</td><td>SandyBrown</td><td>沙棕色</td><td>#F4A460</td><td>244,164,96</td></tr><tr><td bgcolor="#d2691e">　</td><td>Chocolate</td><td>巧克力</td><td>#D2691E</td><td>210,105,30</td></tr><tr><td bgcolor="#8b4513">　</td><td>SaddleBrown</td><td>马鞍棕色</td><td>#8B4513</td><td>139,69,19</td></tr><tr><td bgcolor="#fff5ee">　</td><td>SeaShell</td><td>海贝壳</td><td>#FFF5EE</td><td>255,245,238</td></tr><tr><td bgcolor="#a0522d">　</td><td>Sienna</td><td>黄土赭色</td><td>#A0522D</td><td>160,82,45</td></tr><tr><td bgcolor="#ffa07a">　</td><td>LightSalmon</td><td>浅鲜肉(鲑鱼)色</td><td>#FFA07A</td><td>255,160,122</td></tr><tr><td bgcolor="#ff7f50">　</td><td>Coral</td><td>珊瑚</td><td>#FF7F50</td><td>255,127,80</td></tr><tr><td bgcolor="#ff4500">　</td><td>OrangeRed</td><td>橙红色</td><td>#FF4500</td><td>255,69,0</td></tr><tr><td bgcolor="#e9967a">　</td><td>DarkSalmon</td><td>深鲜肉(鲑鱼)色</td><td>#E9967A</td><td>233,150,122</td></tr><tr><td bgcolor="#ff6347">　</td><td>Tomato</td><td>番茄</td><td>#FF6347</td><td>255,99,71</td></tr><tr><td bgcolor="#ffe4e1">　</td><td>MistyRose</td><td>薄雾玫瑰</td><td>#FFE4E1</td><td>255,228,225</td></tr><tr><td bgcolor="#fa8072">　</td><td>Salmon</td><td>鲜肉(鲑鱼)色</td><td>#FA8072</td><td>250,128,114</td></tr><tr><td bgcolor="#fffafa">　</td><td>Snow</td><td>雪</td><td>#FFFAFA</td><td>255,250,250</td></tr><tr><td bgcolor="#f08080">　</td><td>LightCoral</td><td>淡珊瑚色</td><td>#F08080</td><td>240,128,128</td></tr><tr><td bgcolor="#bc8f8f">　</td><td>RosyBrown</td><td>玫瑰棕色</td><td>#BC8F8F</td><td>188,143,143</td></tr><tr><td bgcolor="#cd5c5c">　</td><td>IndianRed</td><td>印度红</td><td>#CD5C5C</td><td>205,92,92</td></tr><tr><td bgcolor="#ff0000">　</td><td>Red</td><td>纯红</td><td>#FF0000</td><td>255,0,0</td></tr><tr><td bgcolor="#a52a2a">　</td><td>Brown</td><td>棕色</td><td>#A52A2A</td><td>165,42,42</td></tr><tr><td bgcolor="#b22222">　</td><td>FireBrick</td><td>耐火砖</td><td>#B22222</td><td>178,34,34</td></tr><tr><td bgcolor="#8b0000">　</td><td>DarkRed</td><td>深红色</td><td>#8B0000</td><td>139,0,0</td></tr><tr><td bgcolor="#800000">　</td><td>Maroon</td><td>栗色</td><td>#800000</td><td>128,0,0</td></tr><tr><td bgcolor="#ffffff">　</td><td>White</td><td>纯白</td><td>#FFFFFF</td><td>255,255,255</td></tr><tr><td bgcolor="#f5f5f5">　</td><td>WhiteSmoke</td><td>白烟</td><td>#F5F5F5</td><td>245,245,245</td></tr><tr><td bgcolor="#dcdcdc">　</td><td>Gainsboro</td><td>亮灰色</td><td>#DCDCDC</td><td>220,220,220</td></tr><tr><td bgcolor="#d3d3d3">　</td><td>LightGrey</td><td>浅灰色</td><td>#D3D3D3</td><td>211,211,211</td></tr><tr><td bgcolor="#c0c0c0">　</td><td>Silver</td><td>银白色</td><td>#C0C0C0</td><td>192,192,192</td></tr><tr><td bgcolor="#a9a9a9">　</td><td>DarkGray</td><td>深灰色</td><td>#A9A9A9</td><td>169,169,169</td></tr><tr><td bgcolor="#808080">　</td><td>Gray</td><td>灰色</td><td>#808080</td><td>128,128,128</td></tr><tr><td bgcolor="#696969">　</td><td>DimGray</td><td>暗淡的灰色</td><td>#696969</td><td>105,105,105</td></tr><tr><td bgcolor="#000000">　</td><td>Black</td><td>纯黑</td><td>#000000</td><td>0,0,0</td></tr></tbody></table>]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>常用颜色RGB</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用github和hexo搭建个人博客</title>
    <url>/hexobuild/</url>
    <content><![CDATA[ <div class="note info no-icon"><p>利用github和hexo搭建个人博客的简单教程。 </p>
</div>
<span id="more"></span>                                                                                  

<div align="center">欢迎你来到我的[博客](https://a.biugle.cn)</div>
   
   
<hr>
<h3 id="写在前面的话："><a href="#写在前面的话：" class="headerlink" title="写在前面的话："></a>写在前面的话：</h3><p>&emsp;&emsp; <strong>这是一篇教你使用github和Hexo搭建自己独立博客的教程，里面介绍了如何使用和配置Hexo框架。如何将Hexo部署到自己的Github项目中等等。</strong></p>
<p>&emsp;&emsp; <strong>首先，我要说明一下我是一名在校大学生，虽然我是计算机专业，但是在我搭这个网站之前对网站开发和前端等等这些方面都是零基础。</strong></p>
<p>&emsp;&emsp; <strong>有可能我写的文章中有一些错误，也希望大家能够在评论区指出来，谢谢理解。</strong></p>
<p>&emsp;&emsp; <strong>如果你也想搭建一个自己的博客，希望你做好准备，因为过程可能有些复杂，必须要经得折腾。好了，废话不多说，我们开始吧。</strong></p>
<hr>
<h3 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h3><h4 id="首先我们要做一些准备工作（搭建之前最好阅读一下官方文档）："><a href="#首先我们要做一些准备工作（搭建之前最好阅读一下官方文档）：" class="headerlink" title="首先我们要做一些准备工作（搭建之前最好阅读一下官方文档）："></a>首先我们要做一些准备工作（搭建之前最好阅读一下<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvaW5kZXguaHRtbA==">官方文档<i class="fa fa-external-link-alt"></i></span>）：</h4><ul>
<li><em><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">github账户<i class="fa fa-external-link-alt"></i></span></em></li>
<li><em><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==">Node.js<i class="fa fa-external-link-alt"></i></span></em></li>
<li><em><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZC93aW4=">Git<i class="fa fa-external-link-alt"></i></span></em></li>
</ul>
<p>&emsp;&emsp; <strong>以上必须全部准备好！github账户注册我就不多说了。我们先在自己喜欢的磁盘里面创建一个文件夹，文件夹名称随你自己取，最好是英文，例如dog啊，pig啊，blog啊等等。将另外两个工具都安装到我们创建的文件夹中，这样以便于之后的管理。</strong></p>
<p>&emsp;&emsp; <strong>安装Node.js非常简单，只要选择对应版本安装即可，不需要配置环境变量。安装Git的话，也是在官网选择对应版本安装，安装完成后在命令行输入 git version 有输出版本号说明安装成功。</strong></p>
<p>&emsp;&emsp; <strong>安装成功后在该文件夹目录下单击鼠标右键，我们就会发现右键菜单里就多了两个选项 Git GUI Here和Git Bash Here 两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。</strong></p>
<hr>
<h3 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h3><h4 id="然后就是安装Hexo："><a href="#然后就是安装Hexo：" class="headerlink" title="然后就是安装Hexo："></a>然后就是安装Hexo：</h4><ul>
<li><em>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</em></li>
</ul>
<h4 id="点击Git-Bash-Here之后，输入npm命令即可安装。"><a href="#点击Git-Bash-Here之后，输入npm命令即可安装。" class="headerlink" title="点击Git Bash Here之后，输入npm命令即可安装。"></a><strong>点击Git Bash Here之后，输入npm命令即可安装。</strong></h4><p>&emsp;&emsp; <em>第一句是安装 Hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。（注意粘贴代码时不要用Ctrl+C，否则会停止命令）</em></p>
<blockquote>
<p><strong>npm install hexo-cli -g</strong><br><strong>npm install hexo-deployer-git –save</strong></p>
</blockquote>
<hr>
<h3 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h3><h4 id="安装完成我们要开始建站了："><a href="#安装完成我们要开始建站了：" class="headerlink" title="安装完成我们要开始建站了："></a>安装完成我们要开始建站了：</h4><h5 id="在我们刚刚创建的文件夹里面新建一个文件夹Hexo，然后在Hexo文件夹里单击鼠标右键，选择"><a href="#在我们刚刚创建的文件夹里面新建一个文件夹Hexo，然后在Hexo文件夹里单击鼠标右键，选择" class="headerlink" title="在我们刚刚创建的文件夹里面新建一个文件夹Hexo，然后在Hexo文件夹里单击鼠标右键，选择"></a>在我们刚刚创建的文件夹里面新建一个文件夹Hexo，然后在Hexo文件夹里单击鼠标右键，选择</h5><h5 id="Git-Bash-Here，输入命令："><a href="#Git-Bash-Here，输入命令：" class="headerlink" title="Git Bash Here，输入命令："></a>Git Bash Here，<strong>输入命令：</strong></h5><blockquote>
<p><strong>hexo init</strong></p>
</blockquote>
<p>&emsp; 安装 Hexo 完成后，Hexo 将会在 Hexo 文件夹中新建所需要的文件(初始化)。</p>
<h4 id="接下来安装Hexo其他插件（如果不想之后出错的话，最好全装上把。）："><a href="#接下来安装Hexo其他插件（如果不想之后出错的话，最好全装上把。）：" class="headerlink" title="接下来安装Hexo其他插件（如果不想之后出错的话，最好全装上把。）："></a><strong>接下来安装Hexo其他插件（如果不想之后出错的话，最好全装上把。）：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>
<h4 id="然后再执行以下语句："><a href="#然后再执行以下语句：" class="headerlink" title="然后再执行以下语句："></a><strong>然后再执行以下语句：</strong></h4><blockquote>
<p><strong>hexo generate（ hexo g ）</strong><br><strong>hexo  server （ hexo s ）</strong></p>
</blockquote>
<h4 id="大功告成，现在我们就可以在浏览器地址栏输入：-localhost-4000-在本地预览最初的效果啦。"><a href="#大功告成，现在我们就可以在浏览器地址栏输入：-localhost-4000-在本地预览最初的效果啦。" class="headerlink" title="大功告成，现在我们就可以在浏览器地址栏输入： localhost:4000 在本地预览最初的效果啦。"></a>大功告成，现在我们就可以在浏览器地址栏输入： localhost:4000 在本地预览最初的效果啦。</h4><hr>
<h3 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a>NO.4</h3><h4 id="将博客部署到Github上："><a href="#将博客部署到Github上：" class="headerlink" title="将博客部署到Github上："></a>将博客部署到Github上：</h4><p>&emsp;&emsp; 我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客。而 Github Pages 就帮我完成了这件事情。</p>
<p>&emsp;&emsp; 但是 Github Pages 的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。</p>
<p>&emsp;&emsp; <em>前面我们已经注册了github账户，*<em>现在我们登录</em></em><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">github<i class="fa fa-external-link-alt"></i></span>。*</p>
<p>&emsp;&emsp; <strong>然后点击右上角的个人中心</strong></p>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2018/10/08/5bbb517b68cff.png" alt="First"></p>
<p>&emsp;&emsp; <strong>选择 Your repositories</strong></p>
<p>&emsp;&emsp; <strong>单击绿色的新建按钮</strong></p>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2018/10/08/5bbb517b5e290.png" alt="Second"></p>
<p>&emsp;&emsp; <strong>最后按照如下图所示填写信息：</strong></p>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2018/10/08/5bbb517b92a63.png" alt="Third"></p>
<p>&emsp;&emsp; <strong>注意：yourname改成你自己自定义的名称（例如：wangergou.github.io）</strong></p>
<p><em>欢迎 follow <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhb2g=">我的github<i class="fa fa-external-link-alt"></i></span></em></p>
<hr>
<h3 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a>NO.5</h3><h4 id="配置SSH密钥："><a href="#配置SSH密钥：" class="headerlink" title="配置SSH密钥："></a>配置SSH密钥：</h4><p>&emsp;&emsp; 配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。</p>
<p>&emsp;&emsp; <em><strong>操作如下：</strong></em></p>
<p>&emsp; <em><strong>第一步、看看是否存在SSH密钥(keys)</strong></em></p>
<p>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并<strong>输入命令:</strong></p>
<blockquote>
<p><strong>cd ~/. ssh</strong></p>
</blockquote>
<p>这是检查你本机用户home目录下是否存在.ssh目录。</p>
<p>如果不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥。（可以略过第二步，直接进入第三步操作。）</p>
<p>&emsp; <em><strong>第二步、创建一对新的SSH密钥(keys)</strong></em></p>
<p><strong>输入命令</strong></p>
<blockquote>
<p>ssh-keygen -t rsa -C ‘<span class="exturl" data-url="bWFpbHRvOiYjeDc5OyYjMTExOyYjeDc1OyYjMTE0OyYjeDVmOyYjMTAxOyYjMTA5OyYjOTc7JiN4Njk7JiMxMDg7JiM2NDsmIzEwMTsmI3g3ODsmIzk3OyYjeDZkOyYjMTEyOyYjMTA4OyYjMTAxOyYjeDJlOyYjOTk7JiMxMTE7JiMxMDk7">&#x79;&#111;&#x75;&#114;&#x5f;&#101;&#109;&#97;&#x69;&#108;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;<i class="fa fa-external-link-alt"></i></span>‘</p>
</blockquote>
<p><em>这里将按照你提供的邮箱地址，创建一对密钥。</em></p>
<blockquote>
<p><strong>Generating public/private rsa key pair.</strong><br><strong>Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</strong></p>
</blockquote>
<p>&emsp;&emsp; <strong>直接回车</strong>，将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如:</p>
<p>&emsp;&emsp; /C/Users/you/.ssh/github_rsa(随便你啦)。</p>
<p>&emsp;&emsp; 接着，根据提示，你需要输入密码和确认密码。说到这里，如果你很放心，其实可以不用密码。这样到输密码的时候，都直接回车，所以每次push就只管回车就行了，以后提交什么的多方便啊。所谓的最安全的密码，就是没有密码哈哈哈～</p>
<p>&emsp;&emsp; <strong>相关提示如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure>
<p>输入完成之后，屏幕会显示<strong>如下信息：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure>
<p>&emsp; <em><strong>第三步、在GitHub账户中添加你的公钥</strong></em></p>
<p><strong>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中（手动复制也是可以的，就是你邮箱账户前面的那一串）。</strong></p>
<blockquote>
<p><strong>clip &lt; ~/.ssh/id_rsa.pub</strong></p>
</blockquote>
<h4 id="现在登录我们的github"><a href="#现在登录我们的github" class="headerlink" title="现在登录我们的github"></a>现在登录<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">我们的github<i class="fa fa-external-link-alt"></i></span></h4><ol>
<li>进入你的Settings,点Account。</li>
<li>选择SSH Keys。</li>
<li>粘贴密钥，添加即可。</li>
</ol>
<p>&emsp; <em><strong>第四步、测试</strong></em></p>
<p>&emsp;&emsp; 可以输入下面的命令，看看设置是否成功：</p>
<blockquote>
<p><strong>ssh -T <span class="exturl" data-url="bWFpbHRvOiYjMTAzOyYjeDY5OyYjMTE2OyYjNjQ7JiN4Njc7JiMxMDU7JiN4NzQ7JiN4Njg7JiMxMTc7JiM5ODsmIzQ2OyYjeDYzOyYjeDZmOyYjeDZkOw==">&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;<i class="fa fa-external-link-alt"></i></span></strong></p>
</blockquote>
<p>如果是下面的反馈：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;github.com (207.97.227.239)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp; <strong>不要紧张，输入yes就好，然后会显示成功(successful)。</strong></p>
<p>&emsp; <em><strong>第五步、设置用户信息</strong></em></p>
<p>&emsp;&emsp; 现在你已经可以通过 SSH 链接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理。</p>
<p>&emsp;&emsp; 输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p>
<blockquote>
<p><strong>git config –global user.name “yonhuming”</strong>            //用户名<br><strong>git config –global user.email  “<span class="exturl" data-url="bWFpbHRvOiYjMTE5OyYjOTc7JiMxMTA7JiN4Njc7JiMxMDE7JiN4NzI7JiN4Njc7JiMxMTE7JiMxMTc7JiM2NDsmIzQ5OyYjeDM2OyYjeDMzOyYjNDY7JiM5OTsmI3g2ZjsmIzEwOTs=">&#119;&#97;&#110;&#x67;&#101;&#x72;&#x67;&#111;&#117;&#64;&#49;&#x36;&#x33;&#46;&#99;&#x6f;&#109;<i class="fa fa-external-link-alt"></i></span>“</strong>  //填写自己的邮箱</p>
</blockquote>
<h4 id="到这里SSH-Key已经配置成功，本机已成功连接到github。"><a href="#到这里SSH-Key已经配置成功，本机已成功连接到github。" class="headerlink" title="到这里SSH Key已经配置成功，本机已成功连接到github。"></a><strong>到这里SSH Key已经配置成功，本机已成功连接到github。</strong></h4><hr>
<h3 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a>NO.6</h3><h4 id="将本地的Hexo文件更新到Github仓库："><a href="#将本地的Hexo文件更新到Github仓库：" class="headerlink" title="将本地的Hexo文件更新到Github仓库："></a>将本地的Hexo文件更新到Github仓库：</h4><ul>
<li>登录Github打开自己的项目(我们之前创建的) yourname.github.io</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2018/10/08/5bbb571ab3308.png" alt="点击绿色的按钮选择SSH方式(use SSH)，然后点击链接右边的按钮复制。"></p>
<ul>
<li>打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本（或者下载一个Sublime Text）打开刚文件夹下的_config.yml文件。在配置文件里作如下修改，保存。</li>
</ul>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2018/10/08/5bbb5803a6554.jpg" alt="如图所示"></p>
<ul>
<li>最后执行以下语句</li>
</ul>
<blockquote>
<p><strong>hexo g</strong><br><strong>hexo d</strong></p>
</blockquote>
<p><em>或者直接执行：</em></p>
<blockquote>
<p><strong>hexo g -d</strong></p>
</blockquote>
<p>&emsp;&emsp; 执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的网址是 youname.github.io 例如：（pandaoh.github.io）。</p>
<p>&emsp;&emsp; 假如这时候，报错：<em>ERROR Deployer not found: git</em>，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p>
<blockquote>
<p><strong>npm install hexo-deployer-git –save</strong></p>
</blockquote>
<p>&emsp;&emsp; <strong>之后，你再执行 <em>hexo g -d</em> ，你的博客就部署到Github上了。</strong></p>
<p><em><strong>到这里的话，恭喜你。我们的博客已经基本搭好啦！</strong></em></p>
<hr>
<h4 id="最后我们就可以在浏览器中输入自己的博客地址来访问啦，地址是-yourname-github-io-。"><a href="#最后我们就可以在浏览器中输入自己的博客地址来访问啦，地址是-yourname-github-io-。" class="headerlink" title="最后我们就可以在浏览器中输入自己的博客地址来访问啦，地址是  yourname.github.io 。"></a>最后我们就可以在浏览器中输入自己的博客地址来访问啦，地址是  yourname.github.io 。</h4><h4 id="博客地址：-https-yourname-你自定义的用户名-github-io"><a href="#博客地址：-https-yourname-你自定义的用户名-github-io" class="headerlink" title="博客地址：( https://yourname(你自定义的用户名).github.io )"></a><em><strong>博客地址：( <span class="exturl" data-url="aHR0cHM6Ly95b3VybmFtZSjkvaDoh6rlrprkuYnnmoTnlKjmiLflkI0pLmdpdGh1Yi5pby8=">https://yourname(你自定义的用户名).github.io<i class="fa fa-external-link-alt"></i></span> )</strong></em></h4><h4 id="所有人都可以通过这个地址访问到你的博客，快去试试吧。"><a href="#所有人都可以通过这个地址访问到你的博客，快去试试吧。" class="headerlink" title="所有人都可以通过这个地址访问到你的博客，快去试试吧。"></a>所有人都可以通过这个地址访问到你的博客，快去试试吧。</h4><p><em><span class="exturl" data-url="aHR0cHM6Ly9scnVpaGFvLmdpdGh1Yi5pby9oZXhvJTIwKyUyMGdpdGh1YiUyMCVFNiU5MCVBRCVFNSVCQiVCQSVFNCVCOCVBQSVFNCVCQSVCQSVFNSU4RCU5QSVFNSVBRSVBMi5odG1s">参考文档<i class="fa fa-external-link-alt"></i></span></em></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客搭建教程</tag>
      </tags>
  </entry>
  <entry>
    <title>NetBeans常用快捷键</title>
    <url>/shortcutkey_netbeans/</url>
    <content><![CDATA[ <div class="note primary no-icon"><p>NetBeans常用快捷键 </p>
</div>
<span id="more"></span>
<h1 id="NetBeans常用快捷键"><a href="#NetBeans常用快捷键" class="headerlink" title="NetBeans常用快捷键"></a>NetBeans常用快捷键</h1><table>
<thead>
<tr>
<th align="center"><strong>键位</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Alt+鼠标滚轮</strong></td>
<td align="center">放大缩小</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+/</strong></td>
<td align="center">注释一行（或选中部分）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+X</strong></td>
<td align="center">剪切一行（或选中部分）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+E</strong></td>
<td align="center">删除一行（或选中部分）</td>
</tr>
<tr>
<td align="center"><strong>Ctrl++</strong></td>
<td align="center">展开代码</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+-</strong></td>
<td align="center">折叠代码</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+鼠标移到某个位置</strong></td>
<td align="center">显示该位置详情信息</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+上下方向键</strong></td>
<td align="center">移动当前行</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+上下方向键</strong></td>
<td align="center">复制当前行(该操作并非复制到粘贴板)</td>
</tr>
<tr>
<td align="center"><strong>Shift+Alt+F</strong></td>
<td align="center">整理代码</td>
</tr>
<tr>
<td align="center"><strong>TAB</strong></td>
<td align="center">代码自动补全(设置过)/缩进/选中文字同时缩进</td>
</tr>
<tr>
<td align="center"><strong>Shift+TAB</strong></td>
<td align="center">选中文字同时取消缩进</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+F</strong></td>
<td align="center">查找某个字</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+F</strong></td>
<td align="center">整个项目中查找某个字</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+H</strong></td>
<td align="center">替换某个字</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Enter</strong></td>
<td align="center">增加空白行，光标不动。</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+(0~7)</strong></td>
<td align="center">自己摸索，一个个试试吧！</td>
</tr>
<tr>
<td align="center"><strong>Shift+方向键</strong></td>
<td align="center">选中文字</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Alt+Space</strong></td>
<td align="center">代码输入提示<br>不习惯的可以设置为(<strong>Alt+/</strong>)</td>
</tr>
<tr>
<td align="center"><strong>Ctrl+Shift+F5</strong></td>
<td align="center">调试当前程序</td>
</tr>
<tr>
<td align="center"><strong>Shift+F6</strong></td>
<td align="center">运行当前程序</td>
</tr>
<tr>
<td align="center"><strong>F6</strong></td>
<td align="center">运行主程序</td>
</tr>
<tr>
<td align="center"><strong>Alt+Enter</strong></td>
<td align="center">显示程序bug建议或者警示等</td>
</tr>
<tr>
<td align="center"><strong>Alt+F4</strong></td>
<td align="center">瞬间转移！！！(^o^)~</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>NetBeans快捷键</tag>
        <tag>NetBeans</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown基本语法</title>
    <url>/markdown/</url>
    <content><![CDATA[ <div class="note info no-icon"><p>本文介绍MarkDown的基本语法。</p>
</div>
<span id="more"></span>

<p><strong>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</strong></p>
<p><strong>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</strong></p>
<p><strong>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</strong></p>
<p><strong>Markdown 编写的文档后缀为 .md, .markdown。</strong></p>
<br>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><hr>
<blockquote>
<p><strong>示例：</strong> </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>效果：</strong>  </p>
</blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p><br><br><br></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><hr>
<blockquote>
<p><strong>示例：</strong> </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line"></span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line"></span><br><span class="line">&gt; 嵌套引用</span><br><span class="line">&gt; </span><br><span class="line">&gt;&gt;&gt;test</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>效果：</strong>     </p>
</blockquote>
<blockquote>
<p>一级引用</p>
</blockquote>
<blockquote>
<blockquote>
<p>二级引用</p>
</blockquote>
</blockquote>
<blockquote>
<p>嵌套引用</p>
<blockquote>
<blockquote>
<p>test</p>
</blockquote>
</blockquote>
</blockquote>
<p><br><br><br></p>
<h1 id="字体与分割线"><a href="#字体与分割线" class="headerlink" title="字体与分割线"></a>字体与分割线</h1><hr>
<blockquote>
<p><strong>示例：</strong>    </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**粗体** 或者 __粗体__</span><br><span class="line"></span><br><span class="line">*斜体* 或者 _斜体_</span><br><span class="line"></span><br><span class="line">***斜体加粗*** 或者  ___斜体加粗___</span><br><span class="line"></span><br><span class="line">&lt;kbd&gt;键盘体&lt;/kbd&gt; (html标签)</span><br><span class="line"></span><br><span class="line">`加框文字`</span><br><span class="line"></span><br><span class="line">``行内代码``</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line">&lt;ins&gt;下划线&lt;/ins&gt; (html标签)</span><br><span class="line"></span><br><span class="line">分割线：使用三个或者三个以上的(-)或者(*)</span><br><span class="line">例如：   ---   或者   ***</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>效果：</strong>    </p>
</blockquote>
<p><strong>粗体</strong>   </p>
<p><em>斜体</em>   </p>
<p><em><strong>斜体加粗</strong></em>   </p>
<p><kbd>键盘体</kbd>   </p>
<p>这是一段 <code>加框</code> 的文字   </p>
<p>Hello，我是一段 <code>行内代码</code> ，你懂了吗？   </p>
<p><del>删除线</del>   </p>
<p><ins>下划线</ins>   </p>
<p>分割线：   </p>
<hr>
<p><br><br><br></p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><hr>
<blockquote>
<p><strong>示例：</strong>    </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无序列表用 - + * 任何一种都可以</span><br><span class="line">例如：</span><br><span class="line">- 列表内容A</span><br><span class="line">+ 列表内容B</span><br><span class="line">* 列表内容C</span><br><span class="line"></span><br><span class="line">有序列表用 数字+· 的形式</span><br><span class="line">例如：</span><br><span class="line">1. 列表内容1</span><br><span class="line">2. 列表内容2</span><br><span class="line">3. 列表内容3</span><br><span class="line"></span><br><span class="line">列表嵌套只要在上一级和下一级之间敲三个空格即可</span><br><span class="line">（同类型和不同类型的列表都可以嵌套）</span><br><span class="line">例如：</span><br><span class="line">* 一级列表</span><br><span class="line">   （这里敲了三个空格）</span><br><span class="line">1. 二级列表1</span><br><span class="line">2. 二级列表2</span><br><span class="line">3. 二级列表3</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>效果：</strong>    </p>
</blockquote>
<p><strong>无序列表：</strong>   </p>
<ul>
<li>列表内容A</li>
</ul>
<ul>
<li>列表内容B</li>
</ul>
<ul>
<li>列表内容C</li>
<li><em>有序列表：</em>*   </li>
</ul>
<ol>
<li>列表内容1</li>
<li>列表内容2</li>
<li>列表内容3</li>
</ol>
<p><br><br><br></p>
<h1 id="插入媒体与超链接"><a href="#插入媒体与超链接" class="headerlink" title="插入媒体与超链接"></a>插入媒体与超链接</h1><hr>
<blockquote>
<p><strong>示例：</strong>    </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入图片：</span><br><span class="line">![图片alt](图片Url &#x27;图片title&#x27;)</span><br><span class="line"></span><br><span class="line">插入视频等其他媒体：</span><br><span class="line">可以直接使用HTML的标签，也可以在现在主流媒体网站的分享选项中，找到插入的代码。CtrlC即可！</span><br><span class="line"></span><br><span class="line">超链接：</span><br><span class="line">[超链接名](超链接Url &quot;超链接title&quot;)</span><br><span class="line"></span><br><span class="line">邮箱地址：</span><br><span class="line">&lt;邮箱地址&gt;</span><br><span class="line"></span><br><span class="line">注意：以上title都可以不写，这是鼠标移上去显示的名称。</span><br><span class="line">Markdown语法不支持链接在新的标签页中打开，不过有些网站做了特殊处理，是可以的。有的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>效果：</strong>    </p>
</blockquote>
<p><img data-src="/images/loading.gif" data-original="https://www.baidu.com/img/bd_logo1.png" alt="图片Alt" title="图片Title">   </p>
<p>其他媒体演示省略。   </p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tLw==">超链接名<i class="fa fa-external-link-alt"></i></span>   </p>
<p><span class="exturl" data-url="bWFpbHRvOiYjeDMxOyYjNDg7JiN4MzA7JiM1MzsmI3gzNzsmIzU0OyYjNDg7JiN4MzY7JiM1NzsmIzUyOyYjeDQwOyYjMTEzOyYjeDcxOyYjNDY7JiM5OTsmIzExMTsmIzEwOTs=">&#x31;&#48;&#x30;&#53;&#x37;&#54;&#48;&#x36;&#57;&#52;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;<i class="fa fa-external-link-alt"></i></span>   </p>
<p><br><br><br></p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><hr>
<blockquote>
<p><strong>示例：</strong>    </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"></span><br><span class="line">|表头A|表头B|表头C|</span><br><span class="line">|:--|:--:|--:|</span><br><span class="line">|内容居左|内容居中|内容居右|</span><br><span class="line">|内容居左|内容居中|内容居右|</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，有时候可以多加几个，不过有可能有些编辑器会出问题。</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。也可以省略。</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>效果：</strong>    </p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">表头A</th>
<th align="center">表头B</th>
<th align="right">表头C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内容居左</td>
<td align="center">内容居中</td>
<td align="right">内容居右</td>
</tr>
<tr>
<td align="left">内容居左</td>
<td align="center">内容居中</td>
<td align="right">内容居右</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"><br><br><br></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<h1 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h1><hr>
<blockquote>
<p><strong>示例：</strong>    </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;```&#125;[language] [title] [url] [link text]</span><br><span class="line"></span><br><span class="line">（常见的支持：HTML、C、C#、CSS、Delphi、Java、JavaScript、JSON、Php、Python、Shell、SQL、XML、Matlab、GO等等还有很多）</span><br><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void main()&#123;</span><br><span class="line">     while(1)&#123;</span><br><span class="line">     printf(&quot;hello world!\n&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#123;```&#125;</span><br><span class="line">使用时去掉大括号</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>效果：</strong>    </p>
</blockquote>
<figure class="highlight c"><figcaption><span>你好</span><a href="https://a.biugle.cn">我的主页</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><hr>
<p>MarkDown还有脚注（[^要注明的文本]），使用反斜杠、感叹号、花括号进行转义等等，这些之外，他还全面支持HTML标签，有些时候也可以使用HTML标签来编写文档。</p>
<p><strong>总而言之，MarkDown不仅是简单易学，还十分强大。</strong> </p>
]]></content>
      <categories>
        <category>可回收物</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>实训攸州活动日志</title>
    <url>/sxyz/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请稍后再试！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6f57de5f1d468e77f8e68cdd15191bb1d3560766d271aafb10556a622c51a144"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">点击此处输入密码～</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>实训攸州</tag>
      </tags>
  </entry>
  <entry>
    <title>随便写点啥</title>
    <url>/wdgs/</url>
    <content><![CDATA[<div class="note info no-icon"><p><code>测试完毕文章</code><br>完成了测试工作，现在写点东西玩一下。</p>
</div>
<span id="more"></span>  

<p>&emsp;&emsp; 这段时间一直在忙着博客的搭建、测试，然而又不知道该写点啥记录一下，所以就随便写写。就说说自己大学以来的生活吧。</p>
<p>&emsp;&emsp; 大一是个过渡期，这时候我们大部分人都对新鲜的环境事物充满了好奇，对大学的生活也有美好的憧憬。我也是如此，大一和多数人一样，每周除了上课就是和朋友一起出去耍。因为第一个学期基本都是一些公共课程，使得我们对自己的专业都没有一个明确的认知。到了下学期开设了C语言，才让我们对自己的专业有了更多的了解，这是我们第一次接触编程，也算是入门级程序猿。在学习的过程中我也接触了ACM，不过后来发现这并不适合我，在实验室待了一段时间就离开了。也没有去往这个方向走。再后来自学了视频剪辑和PS，这些完全是自己的兴趣使然，不过说到这里还是有一丢丢成就感的，因为当年在b站发的第一个视频，播放量居然破7万了（目前已经10万＋了），这也算是给了我一点鼓励吧，哈哈哈~    </p>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2018/10/20/5bcabe7809835.png" alt="截图" title="先上波图啦~"></p>
<p>&emsp;&emsp; 大一的暑假，在实验室和学长学姐们一起参加大学生互联网+创新创业大赛，并且拿到了二等奖，还是挺欣慰的。之后闲下来后，本想找个暑假工，奈何已经太晚了，基本没有地方再招人了。。。</p>
<p>&emsp;&emsp; 大二的时候，我帮自己实验室做过一个宣传视频，当时是用AE的TypeMonkey脚本和PR一起做的，效果还不错，得到了同学老师们的认可。在暑假的时候帮我们高中班主任制作了一个高考加油的视频，给高中的学弟学妹们加油助力。最近又参加了一个大学生公益广告大赛，虽然现在还不知道结果如何，但是×还是得装全的。</p>
<p>&emsp;&emsp; 大二下学期，我们专业开了Java和数据结构，这时候开始，对这两门课有了比较大的兴趣，到现在自己也一直都在学习。并且开始学习Android开发相关的知识，刚好我们现在又开了Android，所以现在还算顺利。果然，兴趣是最好的老师，我觉得这句话还是有点道理的。</p>
<p>&emsp;&emsp; 大二暑假，我报名参加了我们县委组织的一次大学生实训活动，我被分到了镇政府民政部门帮忙，在那里做些下乡调研等等一些基本的工作。这些我就在下篇博文里面再分享一下吧。工作了一个多月之后，和家里人一起去韶山游玩，我感觉这个暑假还是比较充实的，相信自己以后也会很怀念这段时光。</p>
<p>&emsp;&emsp; 这些只是大学以来自己印象比较深刻的一些事情，篇幅有限，很多事情也写不了这么多，这篇博文也只是随便写写，当是记录一下生活，就写到这里吧。</p>
<p><img data-src="/images/loading.gif" data-original="https://i.loli.net/2019/09/07/dQrie8lhuLRTacO.jpg" alt="截图" title="补充现在的播放情况~"></p>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>生活感受</tag>
      </tags>
  </entry>
  <entry>
    <title>搭博客的初衷</title>
    <url>/myidea/</url>
    <content><![CDATA[ <div class="note danger no-icon"><p><code>测试文章</code><br>怎么说呢，搭这个博客还是多亏了豪哥的带领。 </p>
</div>
<span id="more"></span>                                                                                     


<p>&emsp;&emsp; 大概是从上学期开始，豪哥就开始搭建自己的博客，那时候在寝室看着他每天在电脑前搞这个事情，有时也会饶有兴趣的在旁边观摩学习一下。这次开学来，他的博客已经基本成型，我看了之后，突然也想搭建一个这样的网站。。。至于原因嘛，一是看着这个东西有点意思，自己也想尝试一下。二是自己所学的专业在以后的发展中对这个东西还是有点需求的。当然，还有一个最重要的原因就是想到自己从小到大，不管是学习还是生活等等，很多地方都有可以记录的东西。什么学习过程啊，心情变化啊，或者是刹那间的想法啊等等，我觉得这些东西都可以在一个地方保存下来，像个树洞一样，说不定在未来的某一天回头看看，自己又能获得不一样的感悟，这也是一件很有意义的事情。</p>
<p>&emsp;&emsp; 好啦，有了想法就得去做了。搭建的过程还是很痛苦的，从开始啥都不知道，一步一步摸着石头过河，花了半天的时间才把基本的结构搞懂。然后在百度的教程下，慢慢的把博客的雏形搞好。接着就是界面的美化了，因为自己还没有学过这方面的东西，看着一行行的文档和代码真是让人头大，辛亏自己还是能够勉强看懂的，加上豪哥的指导，也还算是顺利的把基本的东西都搭好了。之后的几天里，我又忙着内容的补充和代码优化，天天也是在电脑前琢磨这个东西。。。哇，说真的这几天真的算是废寝忘食了。之后还要忙着服务器备案和软考，o(╥﹏╥)o ~ ~ ~</p>
<p>&emsp;&emsp; 最后，在国庆假期内，顺利的完成了网站的搭建。我暂且叫他 Beta 1.0 版，以后我再去慢慢的优化他的。</p>
<p>&emsp;&emsp; 现在正式开始写的第一篇博文就是这篇，虽然本人写的不怎么样。</p>
<p>&emsp;&emsp; 总的来说，过程虽然有点坎坷，但是看到自己能够做出来，还是挺欣慰的。继续加油吧。</p>
]]></content>
      <categories>
        <category>有害垃圾</category>
      </categories>
      <tags>
        <tag>搭博客的心路历程</tag>
      </tags>
  </entry>
  <entry>
    <title>死神Vs火影改版资源分享</title>
    <url>/BVN/</url>
    <content><![CDATA[<div class="note default no-icon"><p>安利一个自己从小就特别喜欢的小游戏。</p>
</div>
<span id="more"></span> 
<blockquote class="blockquote-center">
<p>死神Vs火影 </p>

</blockquote> 
<p>&emsp;&emsp;因为小时候喜欢玩这个游戏，无奈家里虽然有电脑但是没通网，而且自己那时候也不知道下载下来，所以玩的次数也比较少。现在我找到了一个 <mark class="label success">改版</mark> 资源，稍作修改后分享出来供大家娱乐消遣 ~ </p>
<div align="center"><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJ4RFY1N2tjNGhHNnNMOTJraUw1M0E=">下载链接<i class="fa fa-external-link-alt"></i></span></div>
    
<div align="center"><b>提取码：zijg</b></div>
]]></content>
      <categories>
        <category>湿垃圾</category>
      </categories>
      <tags>
        <tag>死神Vs火影改版</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello_world/</url>
    <content><![CDATA[ <div class="note warning no-icon"><p>Hello World! </p>
</div>
<span id="more"></span>


<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
